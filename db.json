{
  "meta": {
    "version": 1,
    "warehouse": "2.2.0"
  },
  "models": {
    "Asset": [
      {
        "_id": "themes/spfk2/source/apple-touch-icon.png",
        "path": "apple-touch-icon.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/css/default.css",
        "path": "css/default.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/css/loading-style.css",
        "path": "css/loading-style.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/css/showshare.css",
        "path": "css/showshare.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/css/style.styl",
        "path": "css/style.styl",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_loading@2x.gif",
        "path": "fancybox/fancybox_loading@2x.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/blank.gif",
        "path": "fancybox/blank.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_overlay.png",
        "path": "fancybox/fancybox_overlay.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_loading.gif",
        "path": "fancybox/fancybox_loading.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_sprite.png",
        "path": "fancybox/fancybox_sprite.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_sprite@2x.png",
        "path": "fancybox/fancybox_sprite@2x.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/jquery.fancybox.css",
        "path": "fancybox/jquery.fancybox.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/jquery.fancybox.pack.js",
        "path": "fancybox/jquery.fancybox.pack.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/jquery.fancybox.js",
        "path": "fancybox/jquery.fancybox.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/alipay.png",
        "path": "img/alipay.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/coderwall.png",
        "path": "img/coderwall.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/delicious.png",
        "path": "img/delicious.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/douban.png",
        "path": "img/douban.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/facebook.png",
        "path": "img/facebook.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/github.png",
        "path": "img/github.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/favicon.png",
        "path": "img/favicon.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/google.png",
        "path": "img/google.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/head.jpg",
        "path": "img/head.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/img-err.png",
        "path": "img/img-err.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/img-loading.png",
        "path": "img/img-loading.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/linkedin.png",
        "path": "img/linkedin.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/instagram.png",
        "path": "img/instagram.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/mail.png",
        "path": "img/mail.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/pinboard.png",
        "path": "img/pinboard.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/pinterest.png",
        "path": "img/pinterest.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/qq.png",
        "path": "img/qq.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/rss.png",
        "path": "img/rss.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/segmentfault.png",
        "path": "img/segmentfault.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/scrollbar_arrow.png",
        "path": "img/scrollbar_arrow.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/twitter.png",
        "path": "img/twitter.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/stackoverflow.png",
        "path": "img/stackoverflow.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/wechat.png",
        "path": "img/wechat.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/weibo.png",
        "path": "img/weibo.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/weixin.png",
        "path": "img/weixin.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/zhihu.png",
        "path": "img/zhihu.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/TweenMax.js",
        "path": "js/TweenMax.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/clipboard.min.js",
        "path": "js/clipboard.min.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/instagram.js",
        "path": "js/instagram.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/jquery.lazyload.js",
        "path": "js/jquery.lazyload.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/main.js",
        "path": "js/main.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/mobile.js",
        "path": "js/mobile.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/pc.js",
        "path": "js/pc.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/plugins.js",
        "path": "js/plugins.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/pace.js",
        "path": "js/pace.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-25.jpg",
        "path": "background/bg-25.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/alipayimg.jpg",
        "path": "img/alipayimg.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/wechatimg.jpg",
        "path": "img/wechatimg.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/TweenMax.min.js",
        "path": "js/TweenMax.min.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/embed.js",
        "path": "js/embed.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-1.jpg",
        "path": "background/bg-1.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-109.jpg",
        "path": "background/bg-109.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-11.jpg",
        "path": "background/bg-11.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-17.jpg",
        "path": "background/bg-17.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-20.jpg",
        "path": "background/bg-20.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-26.jpg",
        "path": "background/bg-26.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-27.jpg",
        "path": "background/bg-27.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-3.jpg",
        "path": "background/bg-3.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/css/pace/pace-theme-flash.css",
        "path": "css/pace/pace-theme-flash.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg.jpg",
        "path": "background/bg.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/fancybox_buttons.png",
        "path": "fancybox/helpers/fancybox_buttons.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-buttons.css",
        "path": "fancybox/helpers/jquery.fancybox-buttons.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-buttons.js",
        "path": "fancybox/helpers/jquery.fancybox-buttons.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-media.js",
        "path": "fancybox/helpers/jquery.fancybox-media.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-thumbs.css",
        "path": "fancybox/helpers/jquery.fancybox-thumbs.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-thumbs.js",
        "path": "fancybox/helpers/jquery.fancybox-thumbs.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/css/font-awesome.css",
        "path": "font-awesome/css/font-awesome.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/css/font-awesome.min.css",
        "path": "font-awesome/css/font-awesome.min.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/404/jquery.parallaxify-0.0.2.min.js",
        "path": "js/404/jquery.parallaxify-0.0.2.min.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/gitment.browser.js",
        "path": "js/gitment.browser.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-15.jpg",
        "path": "background/bg-15.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-23.jpg",
        "path": "background/bg-23.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-7.jpg",
        "path": "background/bg-7.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.eot",
        "path": "font-awesome/fonts/fontawesome-webfont.eot",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/FontAwesome.otf",
        "path": "font-awesome/fonts/FontAwesome.otf",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.woff",
        "path": "font-awesome/fonts/fontawesome-webfont.woff",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.woff2",
        "path": "font-awesome/fonts/fontawesome-webfont.woff2",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/js/404/jquery-2.0.3.min.js",
        "path": "js/404/jquery-2.0.3.min.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-14.jpg",
        "path": "background/bg-14.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-9.jpg",
        "path": "background/bg-9.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.ttf",
        "path": "font-awesome/fonts/fontawesome-webfont.ttf",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/select_share.css",
        "path": "static/api/css/select_share.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_popup.css",
        "path": "static/api/css/share_popup.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/like.css",
        "path": "static/api/css/like.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/imgshare.css",
        "path": "static/api/css/imgshare.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style0_16.css",
        "path": "static/api/css/share_style0_16.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style0_32.css",
        "path": "static/api/css/share_style0_32.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style0_24.css",
        "path": "static/api/css/share_style0_24.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style1_16.css",
        "path": "static/api/css/share_style1_16.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2.css",
        "path": "static/api/css/share_style2.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style1_24.css",
        "path": "static/api/css/share_style1_24.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style1_32.css",
        "path": "static/api/css/share_style1_32.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2_16.css",
        "path": "static/api/css/share_style2_16.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2_24.css",
        "path": "static/api/css/share_style2_24.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style4.css",
        "path": "static/api/css/share_style4.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2_32.css",
        "path": "static/api/css/share_style2_32.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/slide_share.css",
        "path": "static/api/css/slide_share.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/css/weixin_popup.css",
        "path": "static/api/css/weixin_popup.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share.js",
        "path": "static/api/js/share.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-19.jpg",
        "path": "background/bg-19.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-21.jpg",
        "path": "background/bg-21.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-22.jpg",
        "path": "background/bg-22.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-24.jpg",
        "path": "background/bg-24.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-4.jpg",
        "path": "background/bg-4.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-6.jpg",
        "path": "background/bg-6.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-8.jpg",
        "path": "background/bg-8.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l8.gif",
        "path": "static/api/img/share/l8.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/data.js",
        "path": "static/api/js/trans/data.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/logger.js",
        "path": "static/api/js/trans/logger.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-10.jpg",
        "path": "background/bg-10.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-12.jpg",
        "path": "background/bg-12.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-18.jpg",
        "path": "background/bg-18.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/img/bg.jpg",
        "path": "img/bg.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_0_16.png",
        "path": "static/api/img/share/icons_0_16.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_1_16.png",
        "path": "static/api/img/share/icons_1_16.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_0_32.png",
        "path": "static/api/img/share/icons_0_32.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_0_24.png",
        "path": "static/api/img/share/icons_0_24.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_1_24.png",
        "path": "static/api/img/share/icons_1_24.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_2_16.png",
        "path": "static/api/img/share/icons_2_16.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_1_32.png",
        "path": "static/api/img/share/icons_1_32.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l0.gif",
        "path": "static/api/img/share/l0.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_2_24.png",
        "path": "static/api/img/share/icons_2_24.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_2_32.png",
        "path": "static/api/img/share/icons_2_32.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l3.gif",
        "path": "static/api/img/share/l3.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l2.gif",
        "path": "static/api/img/share/l2.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l1.gif",
        "path": "static/api/img/share/l1.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l7.gif",
        "path": "static/api/img/share/l7.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l4.gif",
        "path": "static/api/img/share/l4.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l6.gif",
        "path": "static/api/img/share/l6.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r0.gif",
        "path": "static/api/img/share/r0.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l5.gif",
        "path": "static/api/img/share/l5.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/pop_c.gif",
        "path": "static/api/img/share/pop_c.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r2.gif",
        "path": "static/api/img/share/r2.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r3.gif",
        "path": "static/api/img/share/r3.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r1.gif",
        "path": "static/api/img/share/r1.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r4.gif",
        "path": "static/api/img/share/r4.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r5.gif",
        "path": "static/api/img/share/r5.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r6.gif",
        "path": "static/api/img/share/r6.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r7.gif",
        "path": "static/api/img/share/r7.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r8.gif",
        "path": "static/api/img/share/r8.gif",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/sc.png",
        "path": "static/api/img/share/sc.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/selectshare_close.png",
        "path": "static/api/img/share/selectshare_close.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/base/class.js",
        "path": "static/api/js/base/class.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/share-search-icon.png",
        "path": "static/api/img/share/share-search-icon.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/anticheat.js",
        "path": "static/api/js/component/anticheat.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/comm_tools.js",
        "path": "static/api/js/component/comm_tools.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/animate.js",
        "path": "static/api/js/component/animate.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_base.js",
        "path": "static/api/js/component/pop_base.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/partners.js",
        "path": "static/api/js/component/partners.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_popup.js",
        "path": "static/api/js/component/pop_popup.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_dialog.js",
        "path": "static/api/js/component/pop_dialog.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_popup_slide.js",
        "path": "static/api/js/component/pop_popup_slide.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/conf/define.js",
        "path": "static/api/js/conf/define.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/conf/const.js",
        "path": "static/api/js/conf/const.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/qrcode.js",
        "path": "static/api/js/component/qrcode.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/api_base.js",
        "path": "static/api/js/share/api_base.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/combine_api.js",
        "path": "static/api/js/share/combine_api.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/image_api.js",
        "path": "static/api/js/share/image_api.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/like_api.js",
        "path": "static/api/js/share/like_api.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/likeshare.js",
        "path": "static/api/js/share/likeshare.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/select_api.js",
        "path": "static/api/js/share/select_api.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/share_api.js",
        "path": "static/api/js/share/share_api.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/slide_api.js",
        "path": "static/api/js/share/slide_api.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/start/router.js",
        "path": "static/api/js/start/router.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans.js",
        "path": "static/api/js/trans/trans.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans_bdysc.js",
        "path": "static/api/js/trans/trans_bdysc.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans_bdxc.js",
        "path": "static/api/js/trans/trans_bdxc.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans_weixin.js",
        "path": "static/api/js/trans/trans_weixin.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/image_view.js",
        "path": "static/api/js/view/image_view.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/like_view.js",
        "path": "static/api/js/view/like_view.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/select_view.js",
        "path": "static/api/js/view/select_view.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/share_view.js",
        "path": "static/api/js/view/share_view.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/view_base.js",
        "path": "static/api/js/view/view_base.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/slide_view.js",
        "path": "static/api/js/view/slide_view.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-13.jpg",
        "path": "background/bg-13.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-111.jpg",
        "path": "background/bg-111.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-16.jpg",
        "path": "background/bg-16.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.svg",
        "path": "font-awesome/fonts/fontawesome-webfont.svg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/static/api/js/base/tangram.js",
        "path": "static/api/js/base/tangram.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-2.jpg",
        "path": "background/bg-2.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-5.jpg",
        "path": "background/bg-5.jpg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/spfk2/source/background/bg-112.jpg",
        "path": "background/bg-112.jpg",
        "modified": 0,
        "renderable": 1
      }
    ],
    "Cache": [
      {
        "_id": "themes/spfk2/README.md",
        "hash": "228961ab390b883cb441fec95fd2ae6ab1f423ba",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/_config.yml",
        "hash": "a28dcf764f4c5e0798e297e7f1de51936a7a3ff2",
        "modified": 1518161926000
      },
      {
        "_id": "source/_posts/20180313AndroidInterViewFragment.md",
        "hash": "a3cc6763b0cdc9aacedabecc9e71f76eabedfac4",
        "modified": 1589855524674
      },
      {
        "_id": "source/_posts/20180403StopWorld.md",
        "hash": "4a0fffe3f43f241353eb63ce0d0270951d32b8c9",
        "modified": 1589855524674
      },
      {
        "_id": "source/_posts/20180330AndroidListViewInDialog.md",
        "hash": "fa370e4b291dac4e77a1f3f6c98eb6b46c967654",
        "modified": 1589855524674
      },
      {
        "_id": "source/_posts/20180413UseWifiToDebugApp.md",
        "hash": "652a466c0fda330565e7ae1933ab179a992b7b7e",
        "modified": 1589855524675
      },
      {
        "_id": "source/_posts/20180704AndroidUseDrawerLayout.md",
        "hash": "f94a4935fc725f2e862b231fb852aac41f96b066",
        "modified": 1589855524675
      },
      {
        "_id": "source/_posts/20181127SuperEditTextUsage.md",
        "hash": "89d5d0802283de8bf5493b374673cef8aa5d07af",
        "modified": 1589855524675
      },
      {
        "_id": "source/_posts/20190103UseZXingScanCodes.md",
        "hash": "4a63b8bbb008993fe0ff87185456e4722e02dc3e",
        "modified": 1589855524675
      },
      {
        "_id": "source/_posts/20190123Camera2FragmentUse.md",
        "hash": "ed3557225d6c7732bb4e6d6d161586390652196f",
        "modified": 1589855524676
      },
      {
        "_id": "source/_posts/AS3NDKEnvironment.md",
        "hash": "88a907d79ac67ce5c16b338a1d8d34aef4aa6fe2",
        "modified": 1589855524677
      },
      {
        "_id": "source/_posts/20191220AndroidUnitTest.md",
        "hash": "4cb387dd016c0812583d9c1ec3126a5a66515061",
        "modified": 1589855524676
      },
      {
        "_id": "source/_posts/AddGitTag.md",
        "hash": "ce341745f7e2848e485bcf8af7150c2949992b47",
        "modified": 1589855524678
      },
      {
        "_id": "source/_posts/AS3NDKCMakeLists.md",
        "hash": "a8b102461bdec52d1cd7d3832bcad076d516a591",
        "modified": 1589855524677
      },
      {
        "_id": "source/_posts/20200518JavaGeneric.md",
        "hash": "6a78d86ab0ffab39de1adf7b89fb4e1454f87ddd",
        "modified": 1589855524677
      },
      {
        "_id": "source/_posts/Android-IllegalStateException-Fragment-not-attached-to-Activity.md",
        "hash": "3f52ebe47fda208134ce8b9e2daa5a46f0bd05f3",
        "modified": 1589855524678
      },
      {
        "_id": "source/_posts/AndroidIntentJump.md",
        "hash": "7246da8de48d4c6e62f24e951c43674779a203b8",
        "modified": 1589855524678
      },
      {
        "_id": "source/_posts/AndroidIntentJumpToSysSettings.md",
        "hash": "8ae38df5b515b7d73d77ca625a2ea720202d1199",
        "modified": 1589855524678
      },
      {
        "_id": "source/_posts/AndroidNotificationSound.md",
        "hash": "89a91807bcfc58081a427f1376d38fc6e88050b0",
        "modified": 1589855524679
      },
      {
        "_id": "source/_posts/ClaimApp.md",
        "hash": "6ecabdef5d5bbcdf382320c02eeed685e6541f13",
        "modified": 1589855524679
      },
      {
        "_id": "source/_posts/GoodGoodStudyDayDayUp.md",
        "hash": "4b61e6213106cb753234032c5137050f854894b8",
        "modified": 1589855524680
      },
      {
        "_id": "source/_posts/BitmapOccupyMemory.md",
        "hash": "1b3ca62d0b8c6317195dfa6b57ce1c4d44d7eac2",
        "modified": 1589855524679
      },
      {
        "_id": "source/_posts/JDK7CollectionsSortError.md",
        "hash": "b1de6ad4cc4b30180d28caaefcc44990e666ceda",
        "modified": 1589855524680
      },
      {
        "_id": "source/_posts/RemoveAndroidListviewDefaultClickEffect.md",
        "hash": "d29234145460edbe2f8ea0047bbb3cb07bd4d598",
        "modified": 1589855524681
      },
      {
        "_id": "source/_posts/ServiceIntetMustBeExplicit.md",
        "hash": "2b892d1b7f43079909ad9a1ec07276e64f49cc71",
        "modified": 1589855524681
      },
      {
        "_id": "source/_posts/PushHexoBlogToGitHubAndCoding.md",
        "hash": "68ff5b1f922876c7de5bb17b63e9fa2ca8dd816b",
        "modified": 1589855524681
      },
      {
        "_id": "source/_posts/MyHexoBlogWebsiteRecord.md",
        "hash": "57f83f82f0ebedbf4527cee8b22f3b4aa61f213c",
        "modified": 1589855524680
      },
      {
        "_id": "source/_posts/hello-world.md",
        "hash": "933847c5997c007552d2717bb85e4bf3bc5d85da",
        "modified": 1589855524682
      },
      {
        "_id": "themes/spfk2/languages/default.yml",
        "hash": "9e59cd11b290be84909612beb12d0f93ce737f53",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/es.yml",
        "hash": "1f9e9c0084e972c8e40045da963ec4904ac79327",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/de.yml",
        "hash": "ecb13af8af81ccc033ae7494cb2f94f84f6466ad",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/en.yml",
        "hash": "8fa0a7482188ca56fd3cf19c4a87320f85a76846",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/fr-FR.yml",
        "hash": "12cfa96dc412ecb6f8bf4de2690575929464906e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/pt-BR",
        "hash": "922b6d836cc690742b2d55a725e3886c5d0cbb75",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/ru.yml",
        "hash": "9997425292031ee8a58a93346ac6d3f38f18e566",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/zh.yml",
        "hash": "0d7e8da60fd5e5db217e1733ac273ae00fd752ea",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/zh-Hans.yml",
        "hash": "0d7e8da60fd5e5db217e1733ac273ae00fd752ea",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/zh-tw.yml",
        "hash": "9e4034870b57d2bb3063c91f8d206a6c4d7b3789",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/languages/zh-hk.yml",
        "hash": "606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/archive.ejs",
        "hash": "2703b07cc8ac64ae46d1d263f4653013c7e1666b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/category.ejs",
        "hash": "765426a9c8236828dc34759e604cc2c52292835a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/layout.ejs",
        "hash": "4a5566f704f3246f5ef77badddf18d2e16750328",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/page.ejs",
        "hash": "7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/index.ejs",
        "hash": "aa1b4456907bdb43e629be3931547e2d29ac58c8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/plugins.swig",
        "hash": "f809b5e62e968a80921c56e5d7658325b48b7263",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/apple-touch-icon.png",
        "hash": "c36a373c7830d61d1ce092bd5a88d0e9b54212fd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/post.ejs",
        "hash": "7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/tag.ejs",
        "hash": "eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/default.css",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1496717504000
      },
      {
        "_id": "source/_posts/media/15468502040939.jpg",
        "hash": "1775652c21bdd706828032274bb2505339df71d1",
        "modified": 1589855524682
      },
      {
        "_id": "source/_posts/media/camera1-1.png",
        "hash": "6e7467cb5e26b0002cbeba0b1a6e5c8bce510e23",
        "modified": 1589855524690
      },
      {
        "_id": "source/_posts/media/camera1.png",
        "hash": "6e7467cb5e26b0002cbeba0b1a6e5c8bce510e23",
        "modified": 1589855524690
      },
      {
        "_id": "source/_posts/media/menu.png",
        "hash": "c5f0a9a1d68f58d1c2fb3337b4419ca4095192ed",
        "modified": 1589855524693
      },
      {
        "_id": "source/_posts/media/屏幕快照 2019-01-24 下午2.51.19.png",
        "hash": "6e7467cb5e26b0002cbeba0b1a6e5c8bce510e23",
        "modified": 1589855524693
      },
      {
        "_id": "themes/spfk2/layout/_partial/archive.ejs",
        "hash": "a6e94061ac55b9eb55275f87b608d62f6ea35659",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/archive-post.ejs",
        "hash": "8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/after-footer.ejs",
        "hash": "d2d8fda1d50d193088dbd641c6dcc3bd2bdf0165",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/article.ejs",
        "hash": "b30e6dac43ac0c82cca3990f31e29004c1b8e647",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/background.ejs",
        "hash": "cb656037dae582272c748c68a174f2da622d5a12",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/bodybackground.ejs",
        "hash": "931700a928b84577cc33dfff68a009188885f6c0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/footer.ejs",
        "hash": "19b2524cecca65a2033b767768f0da9556521761",
        "modified": 1516171254000
      },
      {
        "_id": "themes/spfk2/layout/_partial/case.swig",
        "hash": "a2a7ec0e4c203e49fd32335c60c3b9851ed6e4a5",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/head.ejs",
        "hash": "6f34f1062b8bbd46bb5216332c8110c08697c6d2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/header.ejs",
        "hash": "6387a93dad7c3d778eb91e3821852fbf6813880c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/hide-labels.ejs",
        "hash": "e981795db4954ba5cc9d6844a6a2799bffdc0af3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/mobile-nav.ejs",
        "hash": "320de58b166710d02963d80f27bcd50478841401",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/mathjax.ejs",
        "hash": "cdfd21f079933f3a275bc4088e1ca5e6068e75b4",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/page.ejs",
        "hash": "55ffdcc87b5fa50afdc370f439c0e812e307cbff",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/left-col.ejs",
        "hash": "9d9aaecfd40903be38b97c46d6b7f1ea3fd7354e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/plugin.swig",
        "hash": "17b6c6945e4b1b41dbb10d851f85ca10100c28ea",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post-nav-button.ejs",
        "hash": "c817bdf39f62670872aae19accea4c51f5e0bfa7",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/scrolling-button.ejs",
        "hash": "b3a28974f37375796687e6100b48c3da6f662640",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/theme.swig",
        "hash": "5a279ad8f6c6b7c104cce495faa563d8b7a7c74a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/sidebar.swig",
        "hash": "38bea91021bc559245ef7765a3fdd805ec9885c1",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/toc.ejs",
        "hash": "84bbda825793de643d5a40190fab2160af1e75e3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/work.swig",
        "hash": "6bdb6ec45f6179875e5a33bfdc7568a3831638fd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_variables.styl",
        "hash": "a753c14f409a294188f2e99575f2c10b82fd56a2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_extend.styl",
        "hash": "222fbe6d222531d61c1ef0f868c90f747b1c2ced",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/loading-style.css",
        "hash": "1f67362d809e85edc9f122db7bc3711af1ed1d8b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/showshare.css",
        "hash": "d5288601c95acd7fea993ac8cc3d04efcbdd1559",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/style.styl",
        "hash": "e2064d2ba11610154306730bfbac821b9633abe7",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_loading@2x.gif",
        "hash": "273b123496a42ba45c3416adb027cd99745058b0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/blank.gif",
        "hash": "2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_overlay.png",
        "hash": "b3a4ee645ba494f52840ef8412015ba0f465dbe0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_loading.gif",
        "hash": "1a755fb2599f3a313cc6cfdb14df043f8c14a99c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_sprite.png",
        "hash": "17df19f97628e77be09c352bf27425faea248251",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/fancybox_sprite@2x.png",
        "hash": "30c58913f327e28f466a00f4c1ac8001b560aed8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/jquery.fancybox.css",
        "hash": "b6aa6692c2e5f8bd74d96827b78570f0c5683c20",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/jquery.fancybox.pack.js",
        "hash": "9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/jquery.fancybox.js",
        "hash": "a82597493d75ea989ca586e09173cff332efe41e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/alipay.png",
        "hash": "6ec0c618109aac31a212d252a3b85f2975b82b3a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/coderwall.png",
        "hash": "fa84676c4d654e040e51fd34bfcd9f9348cd5331",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/delicious.png",
        "hash": "9553a5f5189e4a953e04a58a49dbfa74b86b73dd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/douban.png",
        "hash": "e2ade003ffadd5826ee66ec23901c2d6e8607e4e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/facebook.png",
        "hash": "d19ad7a0903daf26817afd8753cd97e0cc714f54",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/github.png",
        "hash": "b84d03b32fa388dcbf149296ebd16dce6223d48d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/favicon.png",
        "hash": "5b4e9c94ff3396db5b074b69c1aa5bb909aba825",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/google.png",
        "hash": "61a21fec7346fa3400b747ac9a201cf3d5bc013d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/head.jpg",
        "hash": "73f453fef23669fbb0394079f4b955eaef5220ae",
        "modified": 1461334130000
      },
      {
        "_id": "themes/spfk2/source/img/img-err.png",
        "hash": "23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/img-loading.png",
        "hash": "a9cd5cd11866824f31e3d1c5e23badfeb3f73031",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/linkedin.png",
        "hash": "e203138fb53c257cb214e97f4e30091b9c568d2c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/instagram.png",
        "hash": "3c148a3882a8d141d7d405be8c4815d0dcb03561",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/mail.png",
        "hash": "fca8199cc77fdbd700a45bf56d091c82f4a67fe7",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/pinboard.png",
        "hash": "0891fbb6d092fa012bf936019923383d84c6aeb0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/pinterest.png",
        "hash": "9c72917f8779c083157c6ce7a5d62ed4874f0630",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/qq.png",
        "hash": "fd741764c5528fe371f053beac99839a97900eef",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/rss.png",
        "hash": "430fd47340e75214c081abd05cd7410cf7c71b86",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/segmentfault.png",
        "hash": "4483ab273423deb65021111fc8ad9512b69e45b2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/scrollbar_arrow.png",
        "hash": "d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/twitter.png",
        "hash": "14dbb8e62d056525253bc0de13acd1723da7a934",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/stackoverflow.png",
        "hash": "da5dfe9043055c95e479d49c78cd3b020de608f2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/wechat.png",
        "hash": "7ca41b6e32ca4dac419225261ab4fee5a88f73a9",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/weibo.png",
        "hash": "280dae3fd38086158b4a1b57edb94c06b1a5014b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/weixin.png",
        "hash": "92b8df9aba9169c1553c01994bf21a938fa39cb7",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/zhihu.png",
        "hash": "a6d6ef65e9ac82e613a311810391ebb90d9b1c1d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/TweenMax.js",
        "hash": "0ba64564a4fde4085fa3971dd53b7d64a41751e1",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/clipboard.min.js",
        "hash": "c13b4bb8fee46447284590d2afc0efca0ea3cb7b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/instagram.js",
        "hash": "f19adbcc0dac33536bc6660598059048ec901882",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/jquery.lazyload.js",
        "hash": "8e4ad3e17f8e82be311b6b6e87811762e2b2d764",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/main.js",
        "hash": "921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/mobile.js",
        "hash": "d3847e5bcaf39108931724ecb02770c62b10889f",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/pc.js",
        "hash": "ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/plugins.js",
        "hash": "c1cf96b2d852b5803228a34d99014b005623bc06",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/pace.js",
        "hash": "b49c10cd65d9488f7338e3c778e55ac6628650f3",
        "modified": 1496717504000
      },
      {
        "_id": "source/_posts/media/camera3.png",
        "hash": "6eebc4ba30b68e5bb76043adc8246c0f9f7efaf0",
        "modified": 1589855524692
      },
      {
        "_id": "themes/spfk2/source/background/bg-25.jpg",
        "hash": "7a05a524b70c9acd75c3f16a3b9992e4587995bd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/alipayimg.jpg",
        "hash": "3c2cec5d46934da729f89319fad0b6f5b60651c7",
        "modified": 1496719586000
      },
      {
        "_id": "themes/spfk2/source/img/wechatimg.jpg",
        "hash": "87687e7dc27eedf20303e505ea539e85ef856436",
        "modified": 1496719596000
      },
      {
        "_id": "themes/spfk2/source/js/TweenMax.min.js",
        "hash": "eaa4e4a08400da3f22dedda706ba56cdce5b0b7a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/embed.js",
        "hash": "8d2d4a812ab639bc02fdd8749d3a39f6b9406c54",
        "modified": 1496717504000
      },
      {
        "_id": "source/_posts/media/camera2.png",
        "hash": "325c5afbf8847c2e6e8539baa11847ecf7c7aadf",
        "modified": 1589855524691
      },
      {
        "_id": "themes/spfk2/layout/_partial/analytics/baidu-analytics.ejs",
        "hash": "b21500b87d79a0068e3ca0408b4e125e3e749d01",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/analytics/google-analytics.ejs",
        "hash": "f921e7f9223d7c95165e0f835f353b2938e40c45",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/comments/disqus.ejs",
        "hash": "7792a79ab85ef28551cc2a793735973b1d5521a7",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/comments/gitment.ejs",
        "hash": "a3248f670ca13c4ea1e330cf8b89152adb8b5625",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/comments/duoshuo.ejs",
        "hash": "f6112c3f08f46dde1c0ba6a5bee8017624590e47",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/comments/youyan.ejs",
        "hash": "a6853b59ee60e775de1ed90b242084f83774d195",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/TipTitle.ejs",
        "hash": "65b0956edca84e0bc0eb616ec236309822d5f803",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/date.ejs",
        "hash": "1cfcf2e06ab9b1c6dcd44f41825dfe98d400c7ea",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/category.ejs",
        "hash": "265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/loading.ejs",
        "hash": "52a576a8afee08d33c6f69a61c496e1820132e91",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/nav.ejs",
        "hash": "4779c17cf76bf4560e52708102467bb8ec7a2781",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/swiftype.ejs",
        "hash": "76374e601d911e1279e1944d2a6b7eb3391c7c7c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/tag.ejs",
        "hash": "9dad471e27de9e066666f3082137eccaede2e67b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/post/title.ejs",
        "hash": "2f275739b6f1193c123646a5a31f37d48644c667",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/share/baidu-share.ejs",
        "hash": "993b7d231881601ba79aab1e78d75dcb271b3500",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/share/share.ejs",
        "hash": "62467610ba6df9b63350d163e806be774dcf5a00",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/layout/_partial/share/showshare.ejs",
        "hash": "410b809eb6c50bacfd9e1e573f1e0251841bc79d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-1.jpg",
        "hash": "f0617756387d74f99afe0087c7b93a32f3c7096b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-109.jpg",
        "hash": "6171c1e921c8cc9bdcd7276cf7f0bee5295f4672",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-11.jpg",
        "hash": "d69a0447e91f62977b144737f08620d77037c76a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-17.jpg",
        "hash": "6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-20.jpg",
        "hash": "9d428ac435198b2a0107102a2e9ae71e53afe364",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-26.jpg",
        "hash": "3730aa317f9d75ca327b34478cd58e72667b04e8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-27.jpg",
        "hash": "ced50e6e8cad2b0db97445c4e1463d4a62540b9b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-3.jpg",
        "hash": "f1347eddd07bdae93ab6bebad8627eddc5baeb44",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/archive.styl",
        "hash": "a8bc2e2458bcc51fa68122274a41f5e4e52a8ebd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/article.styl",
        "hash": "956eddddae0059c0abc63c5cc820b6e987a673cc",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/baidushare.styl",
        "hash": "fe36e3d8933b1b0b674aaf16e50dbf6090099912",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/footer.styl",
        "hash": "cbf916a5338e69e05d0815c53aeb818d636b6d99",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/instagram.styl",
        "hash": "db9cc156c7df27f7f54b0e7ff34b5949f55f99eb",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/header.styl",
        "hash": "85ab11e082f4dd86dde72bed653d57ec5381f30c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/highlight.styl",
        "hash": "62d7930e9556f893088c65c5fc4229a10ebc7671",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/mobile-slider.styl",
        "hash": "3bf9f2359f68c700e21618ad6262db81038c3d96",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/main.styl",
        "hash": "6e3d15fbe2663bb6fc408df4a771925c3eac65cf",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/mobile.styl",
        "hash": "53b1a06e08df81427505cbc76cc8eb02bea54356",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/plugins.styl",
        "hash": "629ae10dfc053dbfc074966f0bf7f0115acf65e2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/reward.styl",
        "hash": "2b705bcc1c2f8c71a979aa10851a162d1deba394",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/page.styl",
        "hash": "46b9c91428c1e1f42cc8a1010f600f70fb8edc82",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/scroll.styl",
        "hash": "1932774d30b8706919342f9cf36ea2d99987ce14",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/share.styl",
        "hash": "2dde7c9ea40c71fce3dbd8d5e2bcc8d9682141b8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/tagcloud.styl",
        "hash": "91e6553775ca931a1b3db1ab11c4cf227df68c21",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/wheelmenu.styl",
        "hash": "74630c56944e27bef53ef0c0e391611a2eec2ed0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_util/grid.styl",
        "hash": "0bf55ee5d09f193e249083602ac5fcdb1e571aed",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_util/mixin.styl",
        "hash": "44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/pace/pace-theme-flash.css",
        "hash": "508bce8b59a1fbc1f1443a7c4ab3b026e5517dab",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg.jpg",
        "hash": "f0617756387d74f99afe0087c7b93a32f3c7096b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/fancybox_buttons.png",
        "hash": "e385b139516c6813dcd64b8fc431c364ceafe5f3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-buttons.css",
        "hash": "1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-buttons.js",
        "hash": "dc3645529a4bf72983a39fa34c1eb9146e082019",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-media.js",
        "hash": "294420f9ff20f4e3584d212b0c262a00a96ecdb3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-thumbs.css",
        "hash": "4ac329c16a5277592fc12a37cca3d72ca4ec292f",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/fancybox/helpers/jquery.fancybox-thumbs.js",
        "hash": "47da1ae5401c24b5c17cc18e2730780f5c1a7a0c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/css/font-awesome.css",
        "hash": "b488600451227b445414796e9b8550e7c1bd6d29",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/css/font-awesome.min.css",
        "hash": "12d6861075de8e293265ff6ff03b1f3adcb44c76",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/404/jquery.parallaxify-0.0.2.min.js",
        "hash": "b97e2dfcb210b76f7bdd6e1800b26128bf4fad99",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/gitment.browser.js",
        "hash": "6154e6a3bfb402c3ecc9b7889675f1f640926b75",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-15.jpg",
        "hash": "ce5760578eb814fe951c56200e81c6f47b6468d4",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-23.jpg",
        "hash": "050937d649be2c02ef8a66a0ffe7d320b236d1b0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-7.jpg",
        "hash": "acbe0946a47ba16b79f062dbee14c4c9ff9a48da",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.eot",
        "hash": "986eed8dca049714e43eeebcb3932741a4bec76d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/FontAwesome.otf",
        "hash": "42c179eef588854b5ec151bcf6a3f58aa8b79b11",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.woff",
        "hash": "4a313eb93b959cc4154c684b915b0a31ddb68d84",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.woff2",
        "hash": "638c652d623280a58144f93e7b552c66d1667a11",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/js/404/jquery-2.0.3.min.js",
        "hash": "fbf9c77d0c4e3c34a485980c1e5316b6212160c8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-14.jpg",
        "hash": "2fd6ede2bc9de2d26d910ea4e45d28b2350881eb",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/customise/blockquote.styl",
        "hash": "83179f1d0e12b025cd433a6071b2826c2b4168cc",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/customise/code-block.styl",
        "hash": "1f05c0558b2970c369fe19bafbc8a1821c09bce0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/customise/inline-code.styl",
        "hash": "ac2fcef8823d5566c0e27f23b2a46beecbd71c72",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-9.jpg",
        "hash": "df731da0fe0de9a05d99d017e747252c990f972d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/post/gitment.styl",
        "hash": "9a103392d4fd8ba0667e633fcb8b30d36d51ef65",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/css/_partial/post/youyan.styl",
        "hash": "ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.ttf",
        "hash": "6484f1af6b485d5096b71b344e67f4164c33dd1f",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/select_share.css",
        "hash": "d0259abdb410193cf761e42bffaa51e70327a0cd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_popup.css",
        "hash": "338ba2b30ef8ce0c84cd36b37d7f8482996291dc",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/like.css",
        "hash": "2024d58206df01b858c38f07957f928b44e14cb3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/imgshare.css",
        "hash": "c3624a2dde649ed28b2e5d1f050fd971fbaf71a0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style0_16.css",
        "hash": "090e77e9e6e9b8ee0d73a233cbe46499de935bdd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style0_32.css",
        "hash": "7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style0_24.css",
        "hash": "7d1f9f32b80f91001f4f951aa045180cde22d82e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style1_16.css",
        "hash": "aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2.css",
        "hash": "1ad451187cde8a74843fd398b924ca0ac911e9be",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style1_24.css",
        "hash": "3ee5f745c863b4f68299fe5dc125f913ca619c07",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style1_32.css",
        "hash": "626d67a4c0bb72a152e90d25dbf281c0c35a2140",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2_16.css",
        "hash": "572c8e856988e463eb865f38d33ba003cc20d083",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2_24.css",
        "hash": "917d963d3be111064cbb1d122963da91ee3724a0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style4.css",
        "hash": "0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/share_style2_32.css",
        "hash": "3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/slide_share.css",
        "hash": "3898feaf45559b039f885bee8f9e831f48adb20c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/css/weixin_popup.css",
        "hash": "5e6c5084bfd16051de5776c2e136a5462b08a32c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share.js",
        "hash": "5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-19.jpg",
        "hash": "d77504412d28432643fc61ed9fd9f7c57096bdd9",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-21.jpg",
        "hash": "7c4c6cd5d75115093fa29bba7372fa198f04b0f1",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-22.jpg",
        "hash": "7a055391fa4188d9c22fdc1d34a10b26e2f0826d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-24.jpg",
        "hash": "796fa5262d7714e8ce9496a2d03864429cfc5b45",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-4.jpg",
        "hash": "da47f889e02241c8b095f852fb7efd89c114599d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-6.jpg",
        "hash": "1a4f4c8875b2c56e7992000979a7fca7856eec35",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-8.jpg",
        "hash": "dbecc189e28d00fa23e397eb512e039c2ff03c87",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l8.gif",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/data.js",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/logger.js",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-10.jpg",
        "hash": "dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-12.jpg",
        "hash": "2e0815591309863d8130881681cde32ec4bfebf1",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-18.jpg",
        "hash": "4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/img/bg.jpg",
        "hash": "1bcba3c6348e2190a42bff762800bf846cf9239c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_0_16.png",
        "hash": "0eec1e81a04664b2032bd389513349e9bd5d5b0f",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_1_16.png",
        "hash": "3793c3265429ab7b830bfaf18322259cd0b4c4ef",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_0_32.png",
        "hash": "c20521634fdacef39631031671528713e6ba6081",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_0_24.png",
        "hash": "a89223f9714c8c4fa169430a327963ca6a1c9a6e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_1_24.png",
        "hash": "9f1d472095dbe138ef7aff069b1d18cae6ffa942",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_2_16.png",
        "hash": "07340442cb61aabb419dd226f4bfb206a7577f52",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_1_32.png",
        "hash": "09825de5f238c97e4374d545961d6e0d5bbfb3e2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l0.gif",
        "hash": "738b92632b0a9789a9eb568b8d101eb64f55f6e0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_2_24.png",
        "hash": "e47fb87c533f2be89f22901f0864d9b5ef83412d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/icons_2_32.png",
        "hash": "deba62865245a6b5aafa446787d72165c703b943",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l3.gif",
        "hash": "26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l2.gif",
        "hash": "e6a5d6104c226a686d48759e0268e09d762e242e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l1.gif",
        "hash": "70e1932ca7a622ed3322b683eceb7a590860a55e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l7.gif",
        "hash": "e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l4.gif",
        "hash": "8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l6.gif",
        "hash": "f4b8e3188f744f13aca46b27b451d55d9e209c48",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r0.gif",
        "hash": "882f255fbafc0136a3917c1dd40db88879c1b1c1",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/l5.gif",
        "hash": "148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/pop_c.gif",
        "hash": "e8b9ece6ddaa47ccb2c15f2396d1cd3020740603",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r2.gif",
        "hash": "67c84a67be3b039892e9cb8c7c29ed29813bf60f",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r3.gif",
        "hash": "ecdd21f1457be54afc96e2d005524eef93d7bf85",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r1.gif",
        "hash": "96064d132ee2477c0e444c2e18162f9d1dc9e9c2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r4.gif",
        "hash": "517435e69a2215a0f003e75a4861154ca963c30e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r5.gif",
        "hash": "e61b32d1830390303927bdab21823959f8dc7023",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r6.gif",
        "hash": "4bc01e08ef0015fddf5b8c7257c094ec584ca3ee",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r7.gif",
        "hash": "3c596c924910c93cf3e37cc1b2870dbf271151e2",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/r8.gif",
        "hash": "c068ece54a72a3f2428d4f1b5ca7c176f027dd4e",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/sc.png",
        "hash": "e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/selectshare_close.png",
        "hash": "6f3666278268890a153c85fb9f04ac848c442561",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/base/class.js",
        "hash": "ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/img/share/share-search-icon.png",
        "hash": "0629677a7eb5aa3e8bab3faa310c6d8c467a3287",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/anticheat.js",
        "hash": "ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/comm_tools.js",
        "hash": "e651fbb1a85ab9c615ee833f4d042c203ef430bc",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/animate.js",
        "hash": "00b6f74ed82e5a21a9295dd2dc963e892734b7f6",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_base.js",
        "hash": "eae6e120c149a21caa2883c533ccc40bc07fda51",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/partners.js",
        "hash": "a4c275ffb4d3557280211e6bf0573485b397ffd8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_popup.js",
        "hash": "aface5a8c3f71e9e024bf0df5b361ed8f5452f50",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_dialog.js",
        "hash": "4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/pop_popup_slide.js",
        "hash": "1119fc14abd34ffb8e1f653cd30ca26adaafa3bf",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/conf/define.js",
        "hash": "1393906ec26b7cf711c18e569a64f7d0c1951fc7",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/conf/const.js",
        "hash": "e2269411b129b847eca265fbc73f0d573f2474bb",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/component/qrcode.js",
        "hash": "2e3cc4cc5545556dd97ab899ff32d3ab7ccee808",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/api_base.js",
        "hash": "cbacd664451f80955c2ff4caccd4b9110062c714",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/combine_api.js",
        "hash": "c45d76df1707b4fd739dae7022dc4a015632a81a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/image_api.js",
        "hash": "43a93415f2a5dd34760042c2bcd9f4692feecb5d",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/like_api.js",
        "hash": "3526047b7f9f7446b883e2fa5ebcf143526449be",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/likeshare.js",
        "hash": "d088ffe7b6451cedf202280d16e85f75a8c3bfd3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/select_api.js",
        "hash": "bf259a7912ee6124d741dbb5e45cab40bfa45e90",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/share_api.js",
        "hash": "f7b86d0cc063f692a73a174d04e77cbe3c5facc7",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/share/slide_api.js",
        "hash": "c317e3f7fec13d89178e475f26a689bb94e5aa76",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/start/router.js",
        "hash": "97c195ae0d30dd8c7aac55a0555f082eeed4eee0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans.js",
        "hash": "2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans_bdysc.js",
        "hash": "1be632b99fdd67ba5279aa6c56db7d528fd094c3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans_bdxc.js",
        "hash": "da78025de5717315252d2d33b4252c89b891c71c",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/trans/trans_weixin.js",
        "hash": "e68e9bc91ee6fbcd64ac788463870f01602a8562",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/image_view.js",
        "hash": "bb66297a5bd2c7dd931b9145f5d4a616876f3373",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/like_view.js",
        "hash": "42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/select_view.js",
        "hash": "2611efec1d31d85609feea0c57e14d3f817a6220",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/share_view.js",
        "hash": "f445ce9cbbcf887da5e248b1cfadc03ab7df76d0",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/view_base.js",
        "hash": "b3fd7dafde05d63af3dfe9e0a59f9367f81402c5",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/view/slide_view.js",
        "hash": "973ded5cd15eb119e79ffd9326af3a44167b26bd",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-13.jpg",
        "hash": "d7237c6014e28c90f53287f48f718d0759af104b",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-111.jpg",
        "hash": "e1631b47fede8da6c03582ceed648668547c4f09",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-16.jpg",
        "hash": "d1a34d0c4b69262169b543922e4aeb4dae997ad8",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/font-awesome/fonts/fontawesome-webfont.svg",
        "hash": "b06b5c8f67fd632cdc62a33b62ae4f74194131b3",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/static/api/js/base/tangram.js",
        "hash": "e1952e27f6dc3d6339128cec157acef8cc0a775f",
        "modified": 1496717504000
      },
      {
        "_id": "source/_posts/media/15483126974039.png",
        "hash": "8d9527ab3fcabae86acb02326c4983887d8e53bb",
        "modified": 1589855524686
      },
      {
        "_id": "source/_posts/media/15635202622351.png",
        "hash": "8d9527ab3fcabae86acb02326c4983887d8e53bb",
        "modified": 1589855524689
      },
      {
        "_id": "themes/spfk2/source/background/bg-2.jpg",
        "hash": "40a6db13e9c461f80e2c4efee7fb63bbd594e751",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-5.jpg",
        "hash": "2d5da2a209732cce0abf2ca234c0bef0516b65ff",
        "modified": 1496717504000
      },
      {
        "_id": "themes/spfk2/source/background/bg-112.jpg",
        "hash": "54d04b06878eec5d021b6f257bc44298f953a2b7",
        "modified": 1496717504000
      },
      {
        "_id": "public/content.json",
        "hash": "6468315a25b95649472288fcd2065db76a2999f8",
        "modified": 1589869059330
      },
      {
        "_id": "public/archives/2016/05/index.html",
        "hash": "09964b619525c31014c9399b4d126798d104bbda",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2016/12/index.html",
        "hash": "e3fb1b7a56e32f181d3b4cd527f5b0c98ac23b1c",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2017/index.html",
        "hash": "8c0b7179ec6bb3f1cd93c6f321c782ffc6c57e18",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2017/07/index.html",
        "hash": "f9cf021f930c1a710b899f2ff6e83d30540bcabb",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2017/09/index.html",
        "hash": "2c6e79c759af5a9d35d1eed6c3426f4bac56a0a3",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2018/01/index.html",
        "hash": "586c3c3a91121a8900628aa08b2bf46b609576d9",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2018/02/index.html",
        "hash": "ed661b350d45f4787fc2682fafef9739f355fee1",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2018/03/index.html",
        "hash": "30d3a1babd774d66e728470150ec8f26c469bb5d",
        "modified": 1589869059342
      },
      {
        "_id": "public/archives/2018/04/index.html",
        "hash": "b2e6dcc16656c118d6b6520b20c4775bd7335539",
        "modified": 1589869059343
      },
      {
        "_id": "public/archives/2018/07/index.html",
        "hash": "05d56e65c0f824764cb4359f430798ac163e35b4",
        "modified": 1589869059343
      },
      {
        "_id": "public/archives/2018/11/index.html",
        "hash": "685184c779821bc9a75112c744b04cca924f2574",
        "modified": 1589869059343
      },
      {
        "_id": "public/archives/2019/01/index.html",
        "hash": "2db8b6cdefc95fdbdde90433d308f2a6f66cb994",
        "modified": 1589869059343
      },
      {
        "_id": "public/archives/2019/12/index.html",
        "hash": "c19f247e17ffd64190a9903545cd1c0ceb0571b3",
        "modified": 1589869059343
      },
      {
        "_id": "public/archives/2020/index.html",
        "hash": "4ebe8a33c63280738d75de6704b198173cbb757a",
        "modified": 1589869059343
      },
      {
        "_id": "public/archives/2020/05/index.html",
        "hash": "93a59c66099bf0683c6141839300137a064c35e4",
        "modified": 1589869059343
      },
      {
        "_id": "public/categories/AndroidInterview/index.html",
        "hash": "f329d7fb53d9ff2b31135f906f75163f2236ef73",
        "modified": 1589869059343
      },
      {
        "_id": "public/categories/Git/index.html",
        "hash": "14784c3c8fe21a1d4e76f8c2bbb20bdda663485f",
        "modified": 1589869059343
      },
      {
        "_id": "public/categories/Java学习笔记/index.html",
        "hash": "c4685ce8355341b21863621726423a7989beb88e",
        "modified": 1589869059343
      },
      {
        "_id": "public/categories/Hexo/index.html",
        "hash": "08a92c4843e335abc27c71af5043553833d9079e",
        "modified": 1589869059343
      },
      {
        "_id": "public/tags/fragment/index.html",
        "hash": "bf135c23d50215a16d8aab9c96efdec61d98e018",
        "modified": 1589869059343
      },
      {
        "_id": "public/tags/Interview/index.html",
        "hash": "db5a40fcc0d2d78eafb5750fb5f97742af7ead66",
        "modified": 1589869059343
      },
      {
        "_id": "public/tags/性能优化/index.html",
        "hash": "24eae03045f948c631dee6cae0ca1c803dc9c503",
        "modified": 1589869059343
      },
      {
        "_id": "public/tags/ListView/index.html",
        "hash": "9aeea2aef95a881a6cb464f2417837d58d34ad8c",
        "modified": 1589869059343
      },
      {
        "_id": "public/tags/Debug/index.html",
        "hash": "522bf92621223e063831eb7fcaeb13727d92ad4e",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/UI/index.html",
        "hash": "dc6c2a764245843315b250006f1dd6e63f769e84",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/自定义控件/index.html",
        "hash": "c4c98e79edc0ecfacad61410423ee5434b7c79bd",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/NDK/index.html",
        "hash": "c3b97ea96ef8df58391c51fb0f114a219451ddf9",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Android-UnitTest/index.html",
        "hash": "c2a1f5e5fb91cac8ec81406e02ec063742efe5af",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Android-Studio/index.html",
        "hash": "a756ef0477684c13ea8d6b925fa38e2e195c6272",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Git/index.html",
        "hash": "050f9d2b03a6a359c6a37b2f13365635d9247970",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Java/index.html",
        "hash": "a443f0bfee16a7ec150a39abc416c2bf26827f7d",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/setFlags/index.html",
        "hash": "7b452e22f698acc07d2e701464945f210832d7f4",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Intent/index.html",
        "hash": "3714c2295e692666298e5dac675ae11854fc42c0",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Bitmap/index.html",
        "hash": "e06a518bc9353fb83cef43ea9f42aa89b8584207",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Hexo/index.html",
        "hash": "fa969d2fc0e7dd5210a73f551fb4fee10644b175",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Coding/index.html",
        "hash": "2642e913bd5bc980e0c4b48d57b0f2c38c30167b",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/GitHub/index.html",
        "hash": "262000ae92b71796c4a24e4cd0e6bb7443511a0a",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Mac/index.html",
        "hash": "455c954f9827bdd450ea68c22321d79020d00eb1",
        "modified": 1589869059344
      },
      {
        "_id": "public/tags/Blog/index.html",
        "hash": "c8ab6c03e1d2b08b8f60cb32d62d5bced4f8aed1",
        "modified": 1589869059345
      },
      {
        "_id": "public/2020/05/19/hello-world/index.html",
        "hash": "6e264f67a452d4e9a85e581053454e62d2b41165",
        "modified": 1589869059345
      },
      {
        "_id": "public/2020/05/18/20200518JavaGeneric/index.html",
        "hash": "6652c10b560cdb9044a52f3bea594ca4d1b08ff2",
        "modified": 1589869059345
      },
      {
        "_id": "public/2019/12/23/20191220AndroidUnitTest/index.html",
        "hash": "82e9b5ac61d30fc9650a5bcce25b84f2165aa2b4",
        "modified": 1589869059345
      },
      {
        "_id": "public/2019/01/23/20190123Camera2FragmentUse/index.html",
        "hash": "ed19dcb396fb1b687c686727ab8e6584bbc38354",
        "modified": 1589869059345
      },
      {
        "_id": "public/2019/01/03/20190103UseZXingScanCodes/index.html",
        "hash": "b78abda6aee7478800e092c6206e068a9344660f",
        "modified": 1589869059345
      },
      {
        "_id": "public/2018/11/27/20181127SuperEditTextUsage/index.html",
        "hash": "ed959eeebdf547e8970dfe3f16bb63148a6886f9",
        "modified": 1589869059345
      },
      {
        "_id": "public/2018/07/04/20180704AndroidUseDrawerLayout/index.html",
        "hash": "8b15a17286130d7c0483a40eae03a969cb53c208",
        "modified": 1589869059345
      },
      {
        "_id": "public/2018/04/03/20180403StopWorld/index.html",
        "hash": "b48b1c1e4dd595c1b0e83d71c5651c8d1f8a4961",
        "modified": 1589869059345
      },
      {
        "_id": "public/2018/04/13/20180413UseWifiToDebugApp/index.html",
        "hash": "710091554a69b8a20623124d18bcc8a226be542f",
        "modified": 1589869059345
      },
      {
        "_id": "public/2018/03/30/20180330AndroidListViewInDialog/index.html",
        "hash": "a42a42c4543b9700c58286f0df89f0578992e224",
        "modified": 1589869059346
      },
      {
        "_id": "public/2018/03/13/20180313AndroidInterViewFragment/index.html",
        "hash": "8e8731cc92846daa8228068bec7c900e90581057",
        "modified": 1589869059346
      },
      {
        "_id": "public/2018/02/09/AS3NDKCMakeLists/index.html",
        "hash": "6bed6c2c6091d6574e5587655f17259090b49e8d",
        "modified": 1589869059346
      },
      {
        "_id": "public/2018/02/08/AS3NDKEnvironment/index.html",
        "hash": "cc5a6c7b2896c90e7aaca92bf130eab8fd61c73e",
        "modified": 1589869059346
      },
      {
        "_id": "public/2018/01/25/GoodGoodStudyDayDayUp/index.html",
        "hash": "57cdeb9d649836fa5fa21ff6fa4ea0b91e2300bb",
        "modified": 1589869059346
      },
      {
        "_id": "public/2018/01/18/AndroidIntentJumpToSysSettings/index.html",
        "hash": "5effd8819b70d6b91b6d3f042e8e8a4753181f86",
        "modified": 1589869059346
      },
      {
        "_id": "public/2017/09/14/ServiceIntetMustBeExplicit/index.html",
        "hash": "c0faf6d8912cf4c06a3f665f02252fcf6b20cb59",
        "modified": 1589869059346
      },
      {
        "_id": "public/2017/07/31/AndroidNotificationSound/index.html",
        "hash": "c1604900c439cac68c44cc12249d086447b51a16",
        "modified": 1589869059346
      },
      {
        "_id": "public/2016/12/06/JDK7CollectionsSortError/index.html",
        "hash": "8ba60754480ef06f376e2f7622fb91536725004f",
        "modified": 1589869059346
      },
      {
        "_id": "public/2016/07/11/ClaimApp/index.html",
        "hash": "59e84ec32db7a8c738a21e63358b2f39db3b3744",
        "modified": 1589869059346
      },
      {
        "_id": "public/2016/07/06/BitmapOccupyMemory/index.html",
        "hash": "29166062b44b8f4e2236975aadb99ce00924f3bb",
        "modified": 1589869059346
      },
      {
        "_id": "public/2016/07/04/Android-IllegalStateException-Fragment-not-attached-to-Activity/index.html",
        "hash": "f42f4663bef08ae154d19361bb463c369dc908c5",
        "modified": 1589869059346
      },
      {
        "_id": "public/2016/07/04/AddGitTag/index.html",
        "hash": "10191c607c66034807778939c5869aeca25188e4",
        "modified": 1589869059347
      },
      {
        "_id": "public/2016/05/12/RemoveAndroidListviewDefaultClickEffect/index.html",
        "hash": "78c8f3965e7ece63c454b59045d4227d65b383d6",
        "modified": 1589869059347
      },
      {
        "_id": "public/2016/04/27/AndroidIntentJump/index.html",
        "hash": "ea436fa5e3807254a00db9962e3c0da7d370843e",
        "modified": 1589869059347
      },
      {
        "_id": "public/2016/04/24/MyHexoBlogWebsiteRecord/index.html",
        "hash": "48780b78078f39ded10023a1e7ac2dc074787166",
        "modified": 1589869059347
      },
      {
        "_id": "public/2016/04/25/PushHexoBlogToGitHubAndCoding/index.html",
        "hash": "8dd3e08702185318948c9cc95a755522d5f0664a",
        "modified": 1589869059348
      },
      {
        "_id": "public/archives/index.html",
        "hash": "431b250209cba165cf63352cbe8bc0f188d23ba7",
        "modified": 1589869059348
      },
      {
        "_id": "public/archives/page/3/index.html",
        "hash": "7b6e159f6c970ed074aa1bde8f7a64abc4240867",
        "modified": 1589869059348
      },
      {
        "_id": "public/archives/page/2/index.html",
        "hash": "21cdfd22c95cfc6d4eca9a2b767b44da21698dbb",
        "modified": 1589869059348
      },
      {
        "_id": "public/archives/2016/index.html",
        "hash": "e3873d2268f552a462acb5a12679da14f42efb87",
        "modified": 1589869059348
      },
      {
        "_id": "public/archives/2016/04/index.html",
        "hash": "360a917228cf803ab3527c2384c96aac642df812",
        "modified": 1589869059348
      },
      {
        "_id": "public/archives/2016/07/index.html",
        "hash": "9fe10ea72f3997e3a3d34be4fcfe0835da341f9e",
        "modified": 1589869059348
      },
      {
        "_id": "public/archives/2018/index.html",
        "hash": "9141288d1c008ebfbec5ee6313e3eca0493a8236",
        "modified": 1589869059349
      },
      {
        "_id": "public/archives/2019/index.html",
        "hash": "ba93be994d3d35cf9aec5ce5044b86b64959e5b0",
        "modified": 1589869059349
      },
      {
        "_id": "public/categories/Android开发笔记/index.html",
        "hash": "f56e0659e9cbcdb159f98527fcfdc04242d71a8b",
        "modified": 1589869059349
      },
      {
        "_id": "public/categories/Android开发笔记/page/2/index.html",
        "hash": "5898c8624bbcc8ff52d1351f0339743dfff48363",
        "modified": 1589869059349
      },
      {
        "_id": "public/index.html",
        "hash": "0aa3d3ebf8925987ddadeed1babdeec3cc502c96",
        "modified": 1589869059349
      },
      {
        "_id": "public/page/2/index.html",
        "hash": "ec6cac5c702fdec924df0aa0e84c10d06a611adf",
        "modified": 1589869059349
      },
      {
        "_id": "public/page/3/index.html",
        "hash": "ea30d2e92af628f503de707d09df7919b4c4d57b",
        "modified": 1589869059349
      },
      {
        "_id": "public/tags/Android/index.html",
        "hash": "4e24b4cea2a0ecc3e7d13ba2b4683173c35c9ac2",
        "modified": 1589869059349
      },
      {
        "_id": "public/tags/Android/page/2/index.html",
        "hash": "0d0047305713746428216012ac7a093e9c3bd9b2",
        "modified": 1589869059349
      },
      {
        "_id": "public/static/api/img/share/l8.gif",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1589869059349
      },
      {
        "_id": "public/apple-touch-icon.png",
        "hash": "c36a373c7830d61d1ce092bd5a88d0e9b54212fd",
        "modified": 1589869059358
      },
      {
        "_id": "public/fancybox/fancybox_loading@2x.gif",
        "hash": "273b123496a42ba45c3416adb027cd99745058b0",
        "modified": 1589869059358
      },
      {
        "_id": "public/fancybox/fancybox_overlay.png",
        "hash": "b3a4ee645ba494f52840ef8412015ba0f465dbe0",
        "modified": 1589869059358
      },
      {
        "_id": "public/fancybox/blank.gif",
        "hash": "2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a",
        "modified": 1589869059358
      },
      {
        "_id": "public/fancybox/fancybox_loading.gif",
        "hash": "1a755fb2599f3a313cc6cfdb14df043f8c14a99c",
        "modified": 1589869059359
      },
      {
        "_id": "public/fancybox/fancybox_sprite.png",
        "hash": "17df19f97628e77be09c352bf27425faea248251",
        "modified": 1589869059359
      },
      {
        "_id": "public/fancybox/fancybox_sprite@2x.png",
        "hash": "30c58913f327e28f466a00f4c1ac8001b560aed8",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/alipay.png",
        "hash": "6ec0c618109aac31a212d252a3b85f2975b82b3a",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/coderwall.png",
        "hash": "fa84676c4d654e040e51fd34bfcd9f9348cd5331",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/delicious.png",
        "hash": "9553a5f5189e4a953e04a58a49dbfa74b86b73dd",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/douban.png",
        "hash": "e2ade003ffadd5826ee66ec23901c2d6e8607e4e",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/facebook.png",
        "hash": "d19ad7a0903daf26817afd8753cd97e0cc714f54",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/github.png",
        "hash": "b84d03b32fa388dcbf149296ebd16dce6223d48d",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/favicon.png",
        "hash": "5b4e9c94ff3396db5b074b69c1aa5bb909aba825",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/google.png",
        "hash": "61a21fec7346fa3400b747ac9a201cf3d5bc013d",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/head.jpg",
        "hash": "73f453fef23669fbb0394079f4b955eaef5220ae",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/img-err.png",
        "hash": "23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/img-loading.png",
        "hash": "a9cd5cd11866824f31e3d1c5e23badfeb3f73031",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/linkedin.png",
        "hash": "e203138fb53c257cb214e97f4e30091b9c568d2c",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/instagram.png",
        "hash": "3c148a3882a8d141d7d405be8c4815d0dcb03561",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/mail.png",
        "hash": "fca8199cc77fdbd700a45bf56d091c82f4a67fe7",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/pinboard.png",
        "hash": "0891fbb6d092fa012bf936019923383d84c6aeb0",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/pinterest.png",
        "hash": "9c72917f8779c083157c6ce7a5d62ed4874f0630",
        "modified": 1589869059359
      },
      {
        "_id": "public/img/qq.png",
        "hash": "fd741764c5528fe371f053beac99839a97900eef",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/rss.png",
        "hash": "430fd47340e75214c081abd05cd7410cf7c71b86",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/segmentfault.png",
        "hash": "4483ab273423deb65021111fc8ad9512b69e45b2",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/scrollbar_arrow.png",
        "hash": "d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/twitter.png",
        "hash": "14dbb8e62d056525253bc0de13acd1723da7a934",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/stackoverflow.png",
        "hash": "da5dfe9043055c95e479d49c78cd3b020de608f2",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/wechat.png",
        "hash": "7ca41b6e32ca4dac419225261ab4fee5a88f73a9",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/weibo.png",
        "hash": "280dae3fd38086158b4a1b57edb94c06b1a5014b",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/weixin.png",
        "hash": "92b8df9aba9169c1553c01994bf21a938fa39cb7",
        "modified": 1589869059360
      },
      {
        "_id": "public/img/zhihu.png",
        "hash": "a6d6ef65e9ac82e613a311810391ebb90d9b1c1d",
        "modified": 1589869059360
      },
      {
        "_id": "public/fancybox/helpers/fancybox_buttons.png",
        "hash": "e385b139516c6813dcd64b8fc431c364ceafe5f3",
        "modified": 1589869059360
      },
      {
        "_id": "public/static/api/img/share/icons_0_16.png",
        "hash": "0eec1e81a04664b2032bd389513349e9bd5d5b0f",
        "modified": 1589869059360
      },
      {
        "_id": "public/static/api/img/share/icons_1_16.png",
        "hash": "3793c3265429ab7b830bfaf18322259cd0b4c4ef",
        "modified": 1589869059360
      },
      {
        "_id": "public/static/api/img/share/icons_0_32.png",
        "hash": "c20521634fdacef39631031671528713e6ba6081",
        "modified": 1589869059360
      },
      {
        "_id": "public/static/api/img/share/icons_0_24.png",
        "hash": "a89223f9714c8c4fa169430a327963ca6a1c9a6e",
        "modified": 1589869059360
      },
      {
        "_id": "public/static/api/img/share/icons_1_24.png",
        "hash": "9f1d472095dbe138ef7aff069b1d18cae6ffa942",
        "modified": 1589869059360
      },
      {
        "_id": "public/static/api/img/share/icons_2_16.png",
        "hash": "07340442cb61aabb419dd226f4bfb206a7577f52",
        "modified": 1589869059360
      },
      {
        "_id": "public/static/api/img/share/icons_1_32.png",
        "hash": "09825de5f238c97e4374d545961d6e0d5bbfb3e2",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l0.gif",
        "hash": "738b92632b0a9789a9eb568b8d101eb64f55f6e0",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/icons_2_24.png",
        "hash": "e47fb87c533f2be89f22901f0864d9b5ef83412d",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/icons_2_32.png",
        "hash": "deba62865245a6b5aafa446787d72165c703b943",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l3.gif",
        "hash": "26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l2.gif",
        "hash": "e6a5d6104c226a686d48759e0268e09d762e242e",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l1.gif",
        "hash": "70e1932ca7a622ed3322b683eceb7a590860a55e",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l7.gif",
        "hash": "e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l4.gif",
        "hash": "8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l6.gif",
        "hash": "f4b8e3188f744f13aca46b27b451d55d9e209c48",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/r0.gif",
        "hash": "882f255fbafc0136a3917c1dd40db88879c1b1c1",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/l5.gif",
        "hash": "148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/pop_c.gif",
        "hash": "e8b9ece6ddaa47ccb2c15f2396d1cd3020740603",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/r2.gif",
        "hash": "67c84a67be3b039892e9cb8c7c29ed29813bf60f",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/r3.gif",
        "hash": "ecdd21f1457be54afc96e2d005524eef93d7bf85",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/r1.gif",
        "hash": "96064d132ee2477c0e444c2e18162f9d1dc9e9c2",
        "modified": 1589869059361
      },
      {
        "_id": "public/static/api/img/share/r4.gif",
        "hash": "517435e69a2215a0f003e75a4861154ca963c30e",
        "modified": 1589869059362
      },
      {
        "_id": "public/static/api/img/share/r5.gif",
        "hash": "e61b32d1830390303927bdab21823959f8dc7023",
        "modified": 1589869059362
      },
      {
        "_id": "public/static/api/img/share/r6.gif",
        "hash": "4bc01e08ef0015fddf5b8c7257c094ec584ca3ee",
        "modified": 1589869059362
      },
      {
        "_id": "public/static/api/img/share/r7.gif",
        "hash": "3c596c924910c93cf3e37cc1b2870dbf271151e2",
        "modified": 1589869059362
      },
      {
        "_id": "public/static/api/img/share/r8.gif",
        "hash": "c068ece54a72a3f2428d4f1b5ca7c176f027dd4e",
        "modified": 1589869059362
      },
      {
        "_id": "public/static/api/img/share/sc.png",
        "hash": "e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991",
        "modified": 1589869059362
      },
      {
        "_id": "public/static/api/img/share/selectshare_close.png",
        "hash": "6f3666278268890a153c85fb9f04ac848c442561",
        "modified": 1589869059362
      },
      {
        "_id": "public/static/api/img/share/share-search-icon.png",
        "hash": "0629677a7eb5aa3e8bab3faa310c6d8c467a3287",
        "modified": 1589869059362
      },
      {
        "_id": "public/img/alipayimg.jpg",
        "hash": "3c2cec5d46934da729f89319fad0b6f5b60651c7",
        "modified": 1589869060078
      },
      {
        "_id": "public/background/bg-25.jpg",
        "hash": "7a05a524b70c9acd75c3f16a3b9992e4587995bd",
        "modified": 1589869060079
      },
      {
        "_id": "public/img/wechatimg.jpg",
        "hash": "87687e7dc27eedf20303e505ea539e85ef856436",
        "modified": 1589869060079
      },
      {
        "_id": "public/font-awesome/fonts/fontawesome-webfont.eot",
        "hash": "986eed8dca049714e43eeebcb3932741a4bec76d",
        "modified": 1589869060079
      },
      {
        "_id": "public/font-awesome/fonts/FontAwesome.otf",
        "hash": "42c179eef588854b5ec151bcf6a3f58aa8b79b11",
        "modified": 1589869060079
      },
      {
        "_id": "public/font-awesome/fonts/fontawesome-webfont.woff",
        "hash": "4a313eb93b959cc4154c684b915b0a31ddb68d84",
        "modified": 1589869060079
      },
      {
        "_id": "public/font-awesome/fonts/fontawesome-webfont.woff2",
        "hash": "638c652d623280a58144f93e7b552c66d1667a11",
        "modified": 1589869060079
      },
      {
        "_id": "public/css/default.css",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1589869060091
      },
      {
        "_id": "public/css/loading-style.css",
        "hash": "1f67362d809e85edc9f122db7bc3711af1ed1d8b",
        "modified": 1589869060091
      },
      {
        "_id": "public/css/showshare.css",
        "hash": "3efc4afd0d136fb5dec993e9cd9ce85b9d1cf589",
        "modified": 1589869060091
      },
      {
        "_id": "public/fancybox/jquery.fancybox.css",
        "hash": "b6aa6692c2e5f8bd74d96827b78570f0c5683c20",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/TweenMax.js",
        "hash": "0ba64564a4fde4085fa3971dd53b7d64a41751e1",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/instagram.js",
        "hash": "f19adbcc0dac33536bc6660598059048ec901882",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/clipboard.min.js",
        "hash": "c13b4bb8fee46447284590d2afc0efca0ea3cb7b",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/jquery.lazyload.js",
        "hash": "8e4ad3e17f8e82be311b6b6e87811762e2b2d764",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/main.js",
        "hash": "921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/mobile.js",
        "hash": "d3847e5bcaf39108931724ecb02770c62b10889f",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/pc.js",
        "hash": "ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40",
        "modified": 1589869060091
      },
      {
        "_id": "public/js/plugins.js",
        "hash": "c1cf96b2d852b5803228a34d99014b005623bc06",
        "modified": 1589869060092
      },
      {
        "_id": "public/css/pace/pace-theme-flash.css",
        "hash": "508bce8b59a1fbc1f1443a7c4ab3b026e5517dab",
        "modified": 1589869060092
      },
      {
        "_id": "public/fancybox/helpers/jquery.fancybox-buttons.css",
        "hash": "1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8",
        "modified": 1589869060092
      },
      {
        "_id": "public/fancybox/helpers/jquery.fancybox-media.js",
        "hash": "294420f9ff20f4e3584d212b0c262a00a96ecdb3",
        "modified": 1589869060092
      },
      {
        "_id": "public/fancybox/helpers/jquery.fancybox-buttons.js",
        "hash": "dc3645529a4bf72983a39fa34c1eb9146e082019",
        "modified": 1589869060092
      },
      {
        "_id": "public/fancybox/helpers/jquery.fancybox-thumbs.js",
        "hash": "47da1ae5401c24b5c17cc18e2730780f5c1a7a0c",
        "modified": 1589869060092
      },
      {
        "_id": "public/fancybox/helpers/jquery.fancybox-thumbs.css",
        "hash": "4ac329c16a5277592fc12a37cca3d72ca4ec292f",
        "modified": 1589869060092
      },
      {
        "_id": "public/js/404/jquery.parallaxify-0.0.2.min.js",
        "hash": "b97e2dfcb210b76f7bdd6e1800b26128bf4fad99",
        "modified": 1589869060092
      },
      {
        "_id": "public/static/api/css/select_share.css",
        "hash": "d0259abdb410193cf761e42bffaa51e70327a0cd",
        "modified": 1589869060092
      },
      {
        "_id": "public/static/api/css/share_popup.css",
        "hash": "338ba2b30ef8ce0c84cd36b37d7f8482996291dc",
        "modified": 1589869060092
      },
      {
        "_id": "public/static/api/css/like.css",
        "hash": "2024d58206df01b858c38f07957f928b44e14cb3",
        "modified": 1589869060092
      },
      {
        "_id": "public/static/api/css/imgshare.css",
        "hash": "c3624a2dde649ed28b2e5d1f050fd971fbaf71a0",
        "modified": 1589869060092
      },
      {
        "_id": "public/static/api/css/share_style0_16.css",
        "hash": "090e77e9e6e9b8ee0d73a233cbe46499de935bdd",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style0_24.css",
        "hash": "7d1f9f32b80f91001f4f951aa045180cde22d82e",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style0_32.css",
        "hash": "7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style1_16.css",
        "hash": "aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style2.css",
        "hash": "1ad451187cde8a74843fd398b924ca0ac911e9be",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style1_32.css",
        "hash": "626d67a4c0bb72a152e90d25dbf281c0c35a2140",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style1_24.css",
        "hash": "3ee5f745c863b4f68299fe5dc125f913ca619c07",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style2_16.css",
        "hash": "572c8e856988e463eb865f38d33ba003cc20d083",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style2_24.css",
        "hash": "917d963d3be111064cbb1d122963da91ee3724a0",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style4.css",
        "hash": "0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/share_style2_32.css",
        "hash": "3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/slide_share.css",
        "hash": "3898feaf45559b039f885bee8f9e831f48adb20c",
        "modified": 1589869060093
      },
      {
        "_id": "public/static/api/css/weixin_popup.css",
        "hash": "5e6c5084bfd16051de5776c2e136a5462b08a32c",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/trans/data.js",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/trans/logger.js",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/base/class.js",
        "hash": "ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/anticheat.js",
        "hash": "ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/comm_tools.js",
        "hash": "e651fbb1a85ab9c615ee833f4d042c203ef430bc",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/animate.js",
        "hash": "00b6f74ed82e5a21a9295dd2dc963e892734b7f6",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/pop_base.js",
        "hash": "eae6e120c149a21caa2883c533ccc40bc07fda51",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/partners.js",
        "hash": "a4c275ffb4d3557280211e6bf0573485b397ffd8",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/pop_popup.js",
        "hash": "aface5a8c3f71e9e024bf0df5b361ed8f5452f50",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/pop_dialog.js",
        "hash": "4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/pop_popup_slide.js",
        "hash": "1119fc14abd34ffb8e1f653cd30ca26adaafa3bf",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/conf/define.js",
        "hash": "1393906ec26b7cf711c18e569a64f7d0c1951fc7",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/conf/const.js",
        "hash": "e2269411b129b847eca265fbc73f0d573f2474bb",
        "modified": 1589869060094
      },
      {
        "_id": "public/static/api/js/component/qrcode.js",
        "hash": "2e3cc4cc5545556dd97ab899ff32d3ab7ccee808",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/api_base.js",
        "hash": "cbacd664451f80955c2ff4caccd4b9110062c714",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/combine_api.js",
        "hash": "c45d76df1707b4fd739dae7022dc4a015632a81a",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/image_api.js",
        "hash": "43a93415f2a5dd34760042c2bcd9f4692feecb5d",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/like_api.js",
        "hash": "3526047b7f9f7446b883e2fa5ebcf143526449be",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/likeshare.js",
        "hash": "d088ffe7b6451cedf202280d16e85f75a8c3bfd3",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/share_api.js",
        "hash": "f7b86d0cc063f692a73a174d04e77cbe3c5facc7",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/select_api.js",
        "hash": "bf259a7912ee6124d741dbb5e45cab40bfa45e90",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/share/slide_api.js",
        "hash": "c317e3f7fec13d89178e475f26a689bb94e5aa76",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/start/router.js",
        "hash": "97c195ae0d30dd8c7aac55a0555f082eeed4eee0",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/trans/trans.js",
        "hash": "2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/trans/trans_bdysc.js",
        "hash": "1be632b99fdd67ba5279aa6c56db7d528fd094c3",
        "modified": 1589869060095
      },
      {
        "_id": "public/static/api/js/trans/trans_bdxc.js",
        "hash": "da78025de5717315252d2d33b4252c89b891c71c",
        "modified": 1589869060096
      },
      {
        "_id": "public/static/api/js/trans/trans_weixin.js",
        "hash": "e68e9bc91ee6fbcd64ac788463870f01602a8562",
        "modified": 1589869060096
      },
      {
        "_id": "public/static/api/js/view/image_view.js",
        "hash": "bb66297a5bd2c7dd931b9145f5d4a616876f3373",
        "modified": 1589869060096
      },
      {
        "_id": "public/static/api/js/view/like_view.js",
        "hash": "42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a",
        "modified": 1589869060096
      },
      {
        "_id": "public/static/api/js/view/select_view.js",
        "hash": "2611efec1d31d85609feea0c57e14d3f817a6220",
        "modified": 1589869060096
      },
      {
        "_id": "public/static/api/js/view/share_view.js",
        "hash": "f445ce9cbbcf887da5e248b1cfadc03ab7df76d0",
        "modified": 1589869060096
      },
      {
        "_id": "public/static/api/js/view/view_base.js",
        "hash": "b3fd7dafde05d63af3dfe9e0a59f9367f81402c5",
        "modified": 1589869060096
      },
      {
        "_id": "public/static/api/js/view/slide_view.js",
        "hash": "973ded5cd15eb119e79ffd9326af3a44167b26bd",
        "modified": 1589869060096
      },
      {
        "_id": "public/css/style.css",
        "hash": "e79a2a59df87f1fd4dc5bae568c99e15c0ae891e",
        "modified": 1589869060096
      },
      {
        "_id": "public/fancybox/jquery.fancybox.js",
        "hash": "a82597493d75ea989ca586e09173cff332efe41e",
        "modified": 1589869060096
      },
      {
        "_id": "public/fancybox/jquery.fancybox.pack.js",
        "hash": "9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e",
        "modified": 1589869060096
      },
      {
        "_id": "public/js/pace.js",
        "hash": "b49c10cd65d9488f7338e3c778e55ac6628650f3",
        "modified": 1589869060096
      },
      {
        "_id": "public/js/TweenMax.min.js",
        "hash": "eaa4e4a08400da3f22dedda706ba56cdce5b0b7a",
        "modified": 1589869060097
      },
      {
        "_id": "public/js/embed.js",
        "hash": "8d2d4a812ab639bc02fdd8749d3a39f6b9406c54",
        "modified": 1589869060097
      },
      {
        "_id": "public/font-awesome/css/font-awesome.css",
        "hash": "b488600451227b445414796e9b8550e7c1bd6d29",
        "modified": 1589869060097
      },
      {
        "_id": "public/font-awesome/css/font-awesome.min.css",
        "hash": "12d6861075de8e293265ff6ff03b1f3adcb44c76",
        "modified": 1589869060097
      },
      {
        "_id": "public/js/gitment.browser.js",
        "hash": "6154e6a3bfb402c3ecc9b7889675f1f640926b75",
        "modified": 1589869060097
      },
      {
        "_id": "public/js/404/jquery-2.0.3.min.js",
        "hash": "fbf9c77d0c4e3c34a485980c1e5316b6212160c8",
        "modified": 1589869060097
      },
      {
        "_id": "public/static/api/js/share.js",
        "hash": "5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e",
        "modified": 1589869060097
      },
      {
        "_id": "public/static/api/js/base/tangram.js",
        "hash": "e1952e27f6dc3d6339128cec157acef8cc0a775f",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-1.jpg",
        "hash": "f0617756387d74f99afe0087c7b93a32f3c7096b",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-109.jpg",
        "hash": "6171c1e921c8cc9bdcd7276cf7f0bee5295f4672",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-11.jpg",
        "hash": "d69a0447e91f62977b144737f08620d77037c76a",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-17.jpg",
        "hash": "6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-20.jpg",
        "hash": "9d428ac435198b2a0107102a2e9ae71e53afe364",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-26.jpg",
        "hash": "3730aa317f9d75ca327b34478cd58e72667b04e8",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-27.jpg",
        "hash": "ced50e6e8cad2b0db97445c4e1463d4a62540b9b",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg-3.jpg",
        "hash": "f1347eddd07bdae93ab6bebad8627eddc5baeb44",
        "modified": 1589869060098
      },
      {
        "_id": "public/background/bg.jpg",
        "hash": "f0617756387d74f99afe0087c7b93a32f3c7096b",
        "modified": 1589869060098
      },
      {
        "_id": "public/font-awesome/fonts/fontawesome-webfont.ttf",
        "hash": "6484f1af6b485d5096b71b344e67f4164c33dd1f",
        "modified": 1589869060099
      },
      {
        "_id": "public/background/bg-15.jpg",
        "hash": "ce5760578eb814fe951c56200e81c6f47b6468d4",
        "modified": 1589869060109
      },
      {
        "_id": "public/background/bg-23.jpg",
        "hash": "050937d649be2c02ef8a66a0ffe7d320b236d1b0",
        "modified": 1589869060109
      },
      {
        "_id": "public/background/bg-7.jpg",
        "hash": "acbe0946a47ba16b79f062dbee14c4c9ff9a48da",
        "modified": 1589869060109
      },
      {
        "_id": "public/background/bg-9.jpg",
        "hash": "df731da0fe0de9a05d99d017e747252c990f972d",
        "modified": 1589869060179
      },
      {
        "_id": "public/background/bg-14.jpg",
        "hash": "2fd6ede2bc9de2d26d910ea4e45d28b2350881eb",
        "modified": 1589869060179
      },
      {
        "_id": "public/background/bg-19.jpg",
        "hash": "d77504412d28432643fc61ed9fd9f7c57096bdd9",
        "modified": 1589869060186
      },
      {
        "_id": "public/background/bg-21.jpg",
        "hash": "7c4c6cd5d75115093fa29bba7372fa198f04b0f1",
        "modified": 1589869060186
      },
      {
        "_id": "public/background/bg-22.jpg",
        "hash": "7a055391fa4188d9c22fdc1d34a10b26e2f0826d",
        "modified": 1589869060186
      },
      {
        "_id": "public/background/bg-24.jpg",
        "hash": "796fa5262d7714e8ce9496a2d03864429cfc5b45",
        "modified": 1589869060186
      },
      {
        "_id": "public/background/bg-4.jpg",
        "hash": "da47f889e02241c8b095f852fb7efd89c114599d",
        "modified": 1589869060187
      },
      {
        "_id": "public/background/bg-8.jpg",
        "hash": "dbecc189e28d00fa23e397eb512e039c2ff03c87",
        "modified": 1589869060187
      },
      {
        "_id": "public/background/bg-6.jpg",
        "hash": "1a4f4c8875b2c56e7992000979a7fca7856eec35",
        "modified": 1589869060187
      },
      {
        "_id": "public/font-awesome/fonts/fontawesome-webfont.svg",
        "hash": "b06b5c8f67fd632cdc62a33b62ae4f74194131b3",
        "modified": 1589869060188
      },
      {
        "_id": "public/background/bg-10.jpg",
        "hash": "dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2",
        "modified": 1589869060193
      },
      {
        "_id": "public/background/bg-12.jpg",
        "hash": "2e0815591309863d8130881681cde32ec4bfebf1",
        "modified": 1589869060193
      },
      {
        "_id": "public/img/bg.jpg",
        "hash": "1bcba3c6348e2190a42bff762800bf846cf9239c",
        "modified": 1589869060194
      },
      {
        "_id": "public/background/bg-18.jpg",
        "hash": "4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a",
        "modified": 1589869060194
      },
      {
        "_id": "public/background/bg-13.jpg",
        "hash": "d7237c6014e28c90f53287f48f718d0759af104b",
        "modified": 1589869060202
      },
      {
        "_id": "public/background/bg-111.jpg",
        "hash": "e1631b47fede8da6c03582ceed648668547c4f09",
        "modified": 1589869060202
      },
      {
        "_id": "public/background/bg-16.jpg",
        "hash": "d1a34d0c4b69262169b543922e4aeb4dae997ad8",
        "modified": 1589869060203
      },
      {
        "_id": "public/background/bg-2.jpg",
        "hash": "40a6db13e9c461f80e2c4efee7fb63bbd594e751",
        "modified": 1589869060215
      },
      {
        "_id": "public/background/bg-5.jpg",
        "hash": "2d5da2a209732cce0abf2ca234c0bef0516b65ff",
        "modified": 1589869060223
      },
      {
        "_id": "public/background/bg-112.jpg",
        "hash": "54d04b06878eec5d021b6f257bc44298f953a2b7",
        "modified": 1589869060268
      }
    ],
    "Category": [
      {
        "name": "AndroidInterview",
        "_id": "ckadizj2f000i52j91lk4gx8a"
      },
      {
        "name": "Android开发笔记",
        "_id": "ckadizj2m000m52j94x5y4cg4"
      },
      {
        "name": "Git",
        "_id": "ckadizj2x001852j9x2y4qen9"
      },
      {
        "name": "Java学习笔记",
        "_id": "ckadizj2z001c52j9rc610gc1"
      },
      {
        "name": "Hexo",
        "_id": "ckadizj3w002252j9ta203x7n"
      }
    ],
    "Data": [],
    "Page": [],
    "Post": [
      {
        "title": "Fragment生命周期",
        "date": "2018-03-13T05:47:49.000Z",
        "_content": "整理一份安卓开发很基础的内容,但是很实用,帮助不了解Fragment在Activity里面生命周期的朋友.\nFragment从Android v3.0版本开始引用,已经算的上是很老的组件了.我们都知道安卓有最基本的四大组件:\n`Activity`,`Service`,`ContentProvider`,`broadcastReceiver `.`Fragment`可以称为Android的第五大组件.肯定会有人问为什么第五大组件不是View?**大家可以发现,说的四大组件都有自己的生命周期,而View没有自己的生命周期,所以大家不要把这个概念给混淆了.**\n<!--more-->\n接下来我们就来谈谈Fragment的生命周期.为了方便大家理解跟记忆,我用一张图来说明,Fragment在Activity里面的生命周期是什么样的.如下图:\n\n![图片](https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png)\n",
        "source": "_posts/20180313AndroidInterViewFragment.md",
        "raw": "---\ntitle: Fragment生命周期\ndate: 2018-03-13 13:47:49\ntags:\n- Android\n- fragment\ncategories:\n- AndroidInterview\n---\n整理一份安卓开发很基础的内容,但是很实用,帮助不了解Fragment在Activity里面生命周期的朋友.\nFragment从Android v3.0版本开始引用,已经算的上是很老的组件了.我们都知道安卓有最基本的四大组件:\n`Activity`,`Service`,`ContentProvider`,`broadcastReceiver `.`Fragment`可以称为Android的第五大组件.肯定会有人问为什么第五大组件不是View?**大家可以发现,说的四大组件都有自己的生命周期,而View没有自己的生命周期,所以大家不要把这个概念给混淆了.**\n<!--more-->\n接下来我们就来谈谈Fragment的生命周期.为了方便大家理解跟记忆,我用一张图来说明,Fragment在Activity里面的生命周期是什么样的.如下图:\n\n![图片](https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png)\n",
        "slug": "20180313AndroidInterViewFragment",
        "published": 1,
        "updated": "2020-05-19T02:32:04.674Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj13000052j98srce5wi",
        "content": "<p>整理一份安卓开发很基础的内容,但是很实用,帮助不了解Fragment在Activity里面生命周期的朋友.<br>Fragment从Android v3.0版本开始引用,已经算的上是很老的组件了.我们都知道安卓有最基本的四大组件:<br><code>Activity</code>,<code>Service</code>,<code>ContentProvider</code>,<code>broadcastReceiver</code>.<code>Fragment</code>可以称为Android的第五大组件.肯定会有人问为什么第五大组件不是View?<strong>大家可以发现,说的四大组件都有自己的生命周期,而View没有自己的生命周期,所以大家不要把这个概念给混淆了.</strong><br><a id=\"more\"></a><br>接下来我们就来谈谈Fragment的生命周期.为了方便大家理解跟记忆,我用一张图来说明,Fragment在Activity里面的生命周期是什么样的.如下图:</p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png\" alt=\"图片\"></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>整理一份安卓开发很基础的内容,但是很实用,帮助不了解Fragment在Activity里面生命周期的朋友.<br>Fragment从Android v3.0版本开始引用,已经算的上是很老的组件了.我们都知道安卓有最基本的四大组件:<br><code>Activity</code>,<code>Service</code>,<code>ContentProvider</code>,<code>broadcastReceiver</code>.<code>Fragment</code>可以称为Android的第五大组件.肯定会有人问为什么第五大组件不是View?<strong>大家可以发现,说的四大组件都有自己的生命周期,而View没有自己的生命周期,所以大家不要把这个概念给混淆了.</strong><br>",
        "more": "<br>接下来我们就来谈谈Fragment的生命周期.为了方便大家理解跟记忆,我用一张图来说明,Fragment在Activity里面的生命周期是什么样的.如下图:</p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png\" alt=\"图片\"></p>"
      },
      {
        "title": "StopWorld组织成立",
        "date": "2018-04-03T15:40:40.000Z",
        "_content": "\n[StopWorld](https://github.com/StopWorld)组织在今天成立了,成立的缘由是翔哥提出来要维护一套面试的项目.为啥起这个名字呢?翔哥说JVM有个很牛逼的函数,这个函数就叫StopWorld,听起来很酷炫,有种逆天的感觉,哈哈~\n\n> 回到垃圾回收上，在开始学习GC之前你应该知道一个词：stop-the-world。不管选择哪种GC算法，stop-the-world都是不可避免的。Stop-the-world意味着从应用中停下来并进入到GC执行过程中去。一旦Stop-the-world发生，除了GC所需的线程外，其他线程都将停止工作，中断了的线程直到GC任务结束才继续它们的任务。GC调优通常就是为了改善stop-the-world的时间。\n\n成立这个组织的最初目的是为了维护一套便于我们回顾一些知识的面试题,简单说下我们的项目成员:翔哥,浩哥,鑫鑫\n<!--more-->\n\n目前我们的项目初具规模\n\n![](https://ws3.sinaimg.cn/large/006tKfTcly1fpzwpfxlt9j30rs0eoq53.jpg)\n\n先贴出部分的Android的内容,以后会持续更新\n\n# Android基础\n\n<details>\n<summary>目录</summary>\n\n\n- [1.了解Fragment么,说说Fragmment的生命周期](#1-了解fragment么,说说fragmment的生命周期)\n- [2.安卓的事件分发机制](#2-安卓的事件分发机制)\n- [3.Android重要术语解释](#3-android重要术语解释)\n- [4.Android启动模式](#4-android启动模式)\n- [5.Android IPC:Binder原理](#5-android-ipc-binder原理)\n\n</details>\n\n## 知识点\n\n### 1 了解Fragment么,说说Fragmment的生命周期\n<details>\n<summary>展开查看答案</summary>\n\n一张图概括,详细请看博客链接[Fragment生命周期](http://pvphero.github.io/2018/03/13/20180313AndroidInterViewFragment/)\n![图片](https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png)\n</details>\n\n### 2 安卓的事件分发机制\n<details>\n<summary>展开查看答案</summary>\n\n   - Android事件的基础知识：\n   所有的Touch事件都封装到MotionEvent里面\n   事件处理包括三种情况，分别为：`传递—-dispatchTouchEvent()函数`、`拦截—-\n   onInterceptTouchEvent()函数`、`消费—-onTouchEvent()函数`和`OnTouchListener`\n   事件类型分为`ACTION_DOWN`, `ACTION_UP`, `ACTION_MOVE`, `ACTION_POINTER_DOWN`,\n   `ACTION_POINTER_UP`, `ACTION_CANCEL`等\n   每个事件都是以`ACTION_DOWN`开始`ACTION_UP`结束\n\n   - Android事件传递流程：\n     1. 事件都是从`Activity.dispatchTouchEvent()`开始传递\n     2. 事件由父View传递给子View，ViewGroup可以通过`onInterceptTouchEvent()`方法对事件拦截，\n     停止其向子view传递\n     3. 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，**事件会反向往上传递\n     **,这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会\n     `Activityon.TouchEvent()`函数。\n     4. 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来，也就是说ACTION_DOWN必须\n     返回true，之后的事件才会传递进来OnTouchListener优先于onTouchEvent()对事件进行消费\n\n - 三张效果图辅助理解\n    **View不处理事件流程图（View没有消费事件)**\n\n    ![](https://ws4.sinaimg.cn/large/006tKfTcly1fpzlduduzzj31ga0y8jxd.jpg)\n\n\n    **View处理事件**\n\n    ![](https://ws3.sinaimg.cn/large/006tKfTcly1fpzlek9w6cj31gs0xygrl.jpg)\n\n\n    **事件拦截**\n\n    ![](https://ws1.sinaimg.cn/large/006tKfTcly1fpzlexpyxjj31ge0xkn31.jpg)\n\n\n    > [Android-三张图搞定Touch事件传递机制](http://hanhailong.com/2015/09/24/Android-三张图搞定Touch事件传递机制/)\n\n    </details>\n\n### 3 Android重要术语解释\n\n<details>\n<summary>展开查看详细</summary>\n\n* 1.ActivityManagerServices，简称AMS，服务端对象，负责系统中所有Activity的生命周期\n* 2.ActivityThread，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作\n* 3.ApplicationThread，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n* 4.ApplicationThreadProxy，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。\n* 5.Instrumentation，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。\n* 6.ActivityStack，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。\n* 7.ActivityRecord，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。\n* 8.TaskRecord，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。\n\n</details>\n\n### 4 Android启动模式\n\n<details>\n<summary>展开查看答案</summary>\n\n1. standard:默认标准模式，每启动一个都会创建一个实例\n2. singleTop：栈顶复用，如果在栈顶就调用onNewIntent复用，从onResume()开始\n3. singleTask：栈内复用，本栈内只要用该类型Activity就会调到栈顶复用，从onResume()开始\n4. singleInstance：单例模式，除了3中特性，系统会单独给该Activity创建一个栈\n\n</details>\n\n### 5 Android IPC Binder原理\n\n<details>\n<summary>展开查看答案</summary>\n\n1. 在Activity和Service进行通讯的时候，用到了Binder。\n  1. 当属于同个进程我们可以继承Binder然后在Activity中对Service进行操作\n  2. 当不属于同个进程，那么要用到AIDL让系统给我们创建一个Binder，然后在Activity中对远端的Service进行操作。\n2. 系统给我们生成的Binder：\n  1. Stub类中有:接口方法的id，有该Binder的标识，有asInterface(IBinder)(让我们在Activity中获取实现了Binder的接口，接口的实现在Service里，同进程时候返回Stub否则返回Proxy)，有onTransact()这个方法是在不同进程的时候让Proxy在Activity进行远端调用实现Activity操作Service\n  2. Proxy类是代理，在Activity端，其中有:IBinder mRemote(这就是远端的Binder)，两个接口的实现方法不过是代理最终还是要在远端的onTransact()中进行实际操作。\n3. 哪一端的Binder是副本，该端就可以被另一端进行操作，因为Binder本体在定义的时候可以操作本端的东西。所以可以在Activity端传入本端的Binder，让Service端对其进行操作称为Listener，可以用RemoteCallbackList这个容器来装Listener，防止Listener因为经历过序列化而产生的问题。\n4. 当Activity端向远端进行调用的时候，当前线程会挂起，当方法处理完毕才会唤醒。\n5. 如果一个AIDL就用一个Service太奢侈，所以可以使用Binder池的方式，建立一个AIDL其中的方法是返回IBinder，然后根据方法中传入的参数返回具体的AIDL。\n6. IPC的方式有：Bundle（在Intent启动的时候传入，不过是一次性的），文件共享(对于SharedPreference是特例，因为其在内存中会有缓存)，使用Messenger(其底层用的也是AIDL，同理要操作哪端，就在哪端定义Messenger)，AIDL，ContentProvider(在本进程中继承实现一个ContentProvider，在增删改查方法中调用本进程的SQLite，在其他进程中查询)，Socket\n\n</details>\n\n",
        "source": "_posts/20180403StopWorld.md",
        "raw": "---\ntitle: StopWorld组织成立\ndate: 2018-04-03 23:40:40\ntags:\n- Android\n- Interview\n---\n\n[StopWorld](https://github.com/StopWorld)组织在今天成立了,成立的缘由是翔哥提出来要维护一套面试的项目.为啥起这个名字呢?翔哥说JVM有个很牛逼的函数,这个函数就叫StopWorld,听起来很酷炫,有种逆天的感觉,哈哈~\n\n> 回到垃圾回收上，在开始学习GC之前你应该知道一个词：stop-the-world。不管选择哪种GC算法，stop-the-world都是不可避免的。Stop-the-world意味着从应用中停下来并进入到GC执行过程中去。一旦Stop-the-world发生，除了GC所需的线程外，其他线程都将停止工作，中断了的线程直到GC任务结束才继续它们的任务。GC调优通常就是为了改善stop-the-world的时间。\n\n成立这个组织的最初目的是为了维护一套便于我们回顾一些知识的面试题,简单说下我们的项目成员:翔哥,浩哥,鑫鑫\n<!--more-->\n\n目前我们的项目初具规模\n\n![](https://ws3.sinaimg.cn/large/006tKfTcly1fpzwpfxlt9j30rs0eoq53.jpg)\n\n先贴出部分的Android的内容,以后会持续更新\n\n# Android基础\n\n<details>\n<summary>目录</summary>\n\n\n- [1.了解Fragment么,说说Fragmment的生命周期](#1-了解fragment么,说说fragmment的生命周期)\n- [2.安卓的事件分发机制](#2-安卓的事件分发机制)\n- [3.Android重要术语解释](#3-android重要术语解释)\n- [4.Android启动模式](#4-android启动模式)\n- [5.Android IPC:Binder原理](#5-android-ipc-binder原理)\n\n</details>\n\n## 知识点\n\n### 1 了解Fragment么,说说Fragmment的生命周期\n<details>\n<summary>展开查看答案</summary>\n\n一张图概括,详细请看博客链接[Fragment生命周期](http://pvphero.github.io/2018/03/13/20180313AndroidInterViewFragment/)\n![图片](https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png)\n</details>\n\n### 2 安卓的事件分发机制\n<details>\n<summary>展开查看答案</summary>\n\n   - Android事件的基础知识：\n   所有的Touch事件都封装到MotionEvent里面\n   事件处理包括三种情况，分别为：`传递—-dispatchTouchEvent()函数`、`拦截—-\n   onInterceptTouchEvent()函数`、`消费—-onTouchEvent()函数`和`OnTouchListener`\n   事件类型分为`ACTION_DOWN`, `ACTION_UP`, `ACTION_MOVE`, `ACTION_POINTER_DOWN`,\n   `ACTION_POINTER_UP`, `ACTION_CANCEL`等\n   每个事件都是以`ACTION_DOWN`开始`ACTION_UP`结束\n\n   - Android事件传递流程：\n     1. 事件都是从`Activity.dispatchTouchEvent()`开始传递\n     2. 事件由父View传递给子View，ViewGroup可以通过`onInterceptTouchEvent()`方法对事件拦截，\n     停止其向子view传递\n     3. 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，**事件会反向往上传递\n     **,这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会\n     `Activityon.TouchEvent()`函数。\n     4. 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来，也就是说ACTION_DOWN必须\n     返回true，之后的事件才会传递进来OnTouchListener优先于onTouchEvent()对事件进行消费\n\n - 三张效果图辅助理解\n    **View不处理事件流程图（View没有消费事件)**\n\n    ![](https://ws4.sinaimg.cn/large/006tKfTcly1fpzlduduzzj31ga0y8jxd.jpg)\n\n\n    **View处理事件**\n\n    ![](https://ws3.sinaimg.cn/large/006tKfTcly1fpzlek9w6cj31gs0xygrl.jpg)\n\n\n    **事件拦截**\n\n    ![](https://ws1.sinaimg.cn/large/006tKfTcly1fpzlexpyxjj31ge0xkn31.jpg)\n\n\n    > [Android-三张图搞定Touch事件传递机制](http://hanhailong.com/2015/09/24/Android-三张图搞定Touch事件传递机制/)\n\n    </details>\n\n### 3 Android重要术语解释\n\n<details>\n<summary>展开查看详细</summary>\n\n* 1.ActivityManagerServices，简称AMS，服务端对象，负责系统中所有Activity的生命周期\n* 2.ActivityThread，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作\n* 3.ApplicationThread，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n* 4.ApplicationThreadProxy，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。\n* 5.Instrumentation，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。\n* 6.ActivityStack，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。\n* 7.ActivityRecord，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。\n* 8.TaskRecord，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。\n\n</details>\n\n### 4 Android启动模式\n\n<details>\n<summary>展开查看答案</summary>\n\n1. standard:默认标准模式，每启动一个都会创建一个实例\n2. singleTop：栈顶复用，如果在栈顶就调用onNewIntent复用，从onResume()开始\n3. singleTask：栈内复用，本栈内只要用该类型Activity就会调到栈顶复用，从onResume()开始\n4. singleInstance：单例模式，除了3中特性，系统会单独给该Activity创建一个栈\n\n</details>\n\n### 5 Android IPC Binder原理\n\n<details>\n<summary>展开查看答案</summary>\n\n1. 在Activity和Service进行通讯的时候，用到了Binder。\n  1. 当属于同个进程我们可以继承Binder然后在Activity中对Service进行操作\n  2. 当不属于同个进程，那么要用到AIDL让系统给我们创建一个Binder，然后在Activity中对远端的Service进行操作。\n2. 系统给我们生成的Binder：\n  1. Stub类中有:接口方法的id，有该Binder的标识，有asInterface(IBinder)(让我们在Activity中获取实现了Binder的接口，接口的实现在Service里，同进程时候返回Stub否则返回Proxy)，有onTransact()这个方法是在不同进程的时候让Proxy在Activity进行远端调用实现Activity操作Service\n  2. Proxy类是代理，在Activity端，其中有:IBinder mRemote(这就是远端的Binder)，两个接口的实现方法不过是代理最终还是要在远端的onTransact()中进行实际操作。\n3. 哪一端的Binder是副本，该端就可以被另一端进行操作，因为Binder本体在定义的时候可以操作本端的东西。所以可以在Activity端传入本端的Binder，让Service端对其进行操作称为Listener，可以用RemoteCallbackList这个容器来装Listener，防止Listener因为经历过序列化而产生的问题。\n4. 当Activity端向远端进行调用的时候，当前线程会挂起，当方法处理完毕才会唤醒。\n5. 如果一个AIDL就用一个Service太奢侈，所以可以使用Binder池的方式，建立一个AIDL其中的方法是返回IBinder，然后根据方法中传入的参数返回具体的AIDL。\n6. IPC的方式有：Bundle（在Intent启动的时候传入，不过是一次性的），文件共享(对于SharedPreference是特例，因为其在内存中会有缓存)，使用Messenger(其底层用的也是AIDL，同理要操作哪端，就在哪端定义Messenger)，AIDL，ContentProvider(在本进程中继承实现一个ContentProvider，在增删改查方法中调用本进程的SQLite，在其他进程中查询)，Socket\n\n</details>\n\n",
        "slug": "20180403StopWorld",
        "published": 1,
        "updated": "2020-05-19T02:32:04.674Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj17000152j99n66tlzc",
        "content": "<p><a href=\"https://github.com/StopWorld\" target=\"_blank\" rel=\"noopener\">StopWorld</a>组织在今天成立了,成立的缘由是翔哥提出来要维护一套面试的项目.为啥起这个名字呢?翔哥说JVM有个很牛逼的函数,这个函数就叫StopWorld,听起来很酷炫,有种逆天的感觉,哈哈~</p>\n<blockquote>\n<p>回到垃圾回收上，在开始学习GC之前你应该知道一个词：stop-the-world。不管选择哪种GC算法，stop-the-world都是不可避免的。Stop-the-world意味着从应用中停下来并进入到GC执行过程中去。一旦Stop-the-world发生，除了GC所需的线程外，其他线程都将停止工作，中断了的线程直到GC任务结束才继续它们的任务。GC调优通常就是为了改善stop-the-world的时间。</p>\n</blockquote>\n<p>成立这个组织的最初目的是为了维护一套便于我们回顾一些知识的面试题,简单说下我们的项目成员:翔哥,浩哥,鑫鑫<br><a id=\"more\"></a></p>\n<p>目前我们的项目初具规模</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fpzwpfxlt9j30rs0eoq53.jpg\" alt></p>\n<p>先贴出部分的Android的内容,以后会持续更新</p>\n<h1 id=\"Android基础\"><a href=\"#Android基础\" class=\"headerlink\" title=\"Android基础\"></a>Android基础</h1><details><br><summary>目录</summary><br><br><br>- <a href=\"#1-了解fragment么,说说fragmment的生命周期\">1.了解Fragment么,说说Fragmment的生命周期</a><br>- <a href=\"#2-安卓的事件分发机制\">2.安卓的事件分发机制</a><br>- <a href=\"#3-android重要术语解释\">3.Android重要术语解释</a><br>- <a href=\"#4-android启动模式\">4.Android启动模式</a><br>- <a href=\"#5-android-ipc-binder原理\">5.Android IPC:Binder原理</a><br><br></details>\n\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><h3 id=\"1-了解Fragment么-说说Fragmment的生命周期\"><a href=\"#1-了解Fragment么-说说Fragmment的生命周期\" class=\"headerlink\" title=\"1 了解Fragment么,说说Fragmment的生命周期\"></a>1 了解Fragment么,说说Fragmment的生命周期</h3><details><br><summary>展开查看答案</summary><br><br>一张图概括,详细请看博客链接<a href=\"http://pvphero.github.io/2018/03/13/20180313AndroidInterViewFragment/\">Fragment生命周期</a><br><img src=\"https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png\" alt=\"图片\"><br></details>\n\n<h3 id=\"2-安卓的事件分发机制\"><a href=\"#2-安卓的事件分发机制\" class=\"headerlink\" title=\"2 安卓的事件分发机制\"></a>2 安卓的事件分发机制</h3><details><br><summary>展开查看答案</summary><br><br>   - Android事件的基础知识：<br>   所有的Touch事件都封装到MotionEvent里面<br>   事件处理包括三种情况，分别为：<code>传递—-dispatchTouchEvent()函数</code>、<code>拦截—-\n   onInterceptTouchEvent()函数</code>、<code>消费—-onTouchEvent()函数</code>和<code>OnTouchListener</code><br>   事件类型分为<code>ACTION_DOWN</code>, <code>ACTION_UP</code>, <code>ACTION_MOVE</code>, <code>ACTION_POINTER_DOWN</code>,<br>   <code>ACTION_POINTER_UP</code>, <code>ACTION_CANCEL</code>等<br>   每个事件都是以<code>ACTION_DOWN</code>开始<code>ACTION_UP</code>结束<br><br>   - Android事件传递流程：<br>     1. 事件都是从<code>Activity.dispatchTouchEvent()</code>开始传递<br>     2. 事件由父View传递给子View，ViewGroup可以通过<code>onInterceptTouchEvent()</code>方法对事件拦截，<br>     停止其向子view传递<br>     3. 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，<strong>事件会反向往上传递\n     </strong>,这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会<br>     <code>Activityon.TouchEvent()</code>函数。<br>     4. 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来，也就是说ACTION_DOWN必须<br>     返回true，之后的事件才会传递进来OnTouchListener优先于onTouchEvent()对事件进行消费<br><br> - 三张效果图辅助理解<br>    <strong>View不处理事件流程图（View没有消费事件)</strong><br><br>    <img src=\"https://ws4.sinaimg.cn/large/006tKfTcly1fpzlduduzzj31ga0y8jxd.jpg\" alt><br><br><br>    <strong>View处理事件</strong><br><br>    <img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fpzlek9w6cj31gs0xygrl.jpg\" alt><br><br><br>    <strong>事件拦截</strong><br><br>    <img src=\"https://ws1.sinaimg.cn/large/006tKfTcly1fpzlexpyxjj31ge0xkn31.jpg\" alt><br><br><br>    &gt; <a href=\"http://hanhailong.com/2015/09/24/Android-三张图搞定Touch事件传递机制/\" target=\"_blank\" rel=\"noopener\">Android-三张图搞定Touch事件传递机制</a><br><br>    </details>\n\n<h3 id=\"3-Android重要术语解释\"><a href=\"#3-Android重要术语解释\" class=\"headerlink\" title=\"3 Android重要术语解释\"></a>3 Android重要术语解释</h3><details><br><summary>展开查看详细</summary><br><br><em> 1.ActivityManagerServices，简称AMS，服务端对象，负责系统中所有Activity的生命周期\n</em> 2.ActivityThread，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作<br><em> 3.ApplicationThread，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n</em> 4.ApplicationThreadProxy，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。<br><em> 5.Instrumentation，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。\n</em> 6.ActivityStack，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。<br><em> 7.ActivityRecord，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。\n</em> 8.TaskRecord，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。<br><br></details>\n\n<h3 id=\"4-Android启动模式\"><a href=\"#4-Android启动模式\" class=\"headerlink\" title=\"4 Android启动模式\"></a>4 Android启动模式</h3><details><br><summary>展开查看答案</summary><br><br>1. standard:默认标准模式，每启动一个都会创建一个实例<br>2. singleTop：栈顶复用，如果在栈顶就调用onNewIntent复用，从onResume()开始<br>3. singleTask：栈内复用，本栈内只要用该类型Activity就会调到栈顶复用，从onResume()开始<br>4. singleInstance：单例模式，除了3中特性，系统会单独给该Activity创建一个栈<br><br></details>\n\n<h3 id=\"5-Android-IPC-Binder原理\"><a href=\"#5-Android-IPC-Binder原理\" class=\"headerlink\" title=\"5 Android IPC Binder原理\"></a>5 Android IPC Binder原理</h3><details><br><summary>展开查看答案</summary><br><br>1. 在Activity和Service进行通讯的时候，用到了Binder。<br>  1. 当属于同个进程我们可以继承Binder然后在Activity中对Service进行操作<br>  2. 当不属于同个进程，那么要用到AIDL让系统给我们创建一个Binder，然后在Activity中对远端的Service进行操作。<br>2. 系统给我们生成的Binder：<br>  1. Stub类中有:接口方法的id，有该Binder的标识，有asInterface(IBinder)(让我们在Activity中获取实现了Binder的接口，接口的实现在Service里，同进程时候返回Stub否则返回Proxy)，有onTransact()这个方法是在不同进程的时候让Proxy在Activity进行远端调用实现Activity操作Service<br>  2. Proxy类是代理，在Activity端，其中有:IBinder mRemote(这就是远端的Binder)，两个接口的实现方法不过是代理最终还是要在远端的onTransact()中进行实际操作。<br>3. 哪一端的Binder是副本，该端就可以被另一端进行操作，因为Binder本体在定义的时候可以操作本端的东西。所以可以在Activity端传入本端的Binder，让Service端对其进行操作称为Listener，可以用RemoteCallbackList这个容器来装Listener，防止Listener因为经历过序列化而产生的问题。<br>4. 当Activity端向远端进行调用的时候，当前线程会挂起，当方法处理完毕才会唤醒。<br>5. 如果一个AIDL就用一个Service太奢侈，所以可以使用Binder池的方式，建立一个AIDL其中的方法是返回IBinder，然后根据方法中传入的参数返回具体的AIDL。<br>6. IPC的方式有：Bundle（在Intent启动的时候传入，不过是一次性的），文件共享(对于SharedPreference是特例，因为其在内存中会有缓存)，使用Messenger(其底层用的也是AIDL，同理要操作哪端，就在哪端定义Messenger)，AIDL，ContentProvider(在本进程中继承实现一个ContentProvider，在增删改查方法中调用本进程的SQLite，在其他进程中查询)，Socket<br><br></details>\n\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p><a href=\"https://github.com/StopWorld\" target=\"_blank\" rel=\"noopener\">StopWorld</a>组织在今天成立了,成立的缘由是翔哥提出来要维护一套面试的项目.为啥起这个名字呢?翔哥说JVM有个很牛逼的函数,这个函数就叫StopWorld,听起来很酷炫,有种逆天的感觉,哈哈~</p>\n<blockquote>\n<p>回到垃圾回收上，在开始学习GC之前你应该知道一个词：stop-the-world。不管选择哪种GC算法，stop-the-world都是不可避免的。Stop-the-world意味着从应用中停下来并进入到GC执行过程中去。一旦Stop-the-world发生，除了GC所需的线程外，其他线程都将停止工作，中断了的线程直到GC任务结束才继续它们的任务。GC调优通常就是为了改善stop-the-world的时间。</p>\n</blockquote>\n<p>成立这个组织的最初目的是为了维护一套便于我们回顾一些知识的面试题,简单说下我们的项目成员:翔哥,浩哥,鑫鑫<br>",
        "more": "</p>\n<p>目前我们的项目初具规模</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fpzwpfxlt9j30rs0eoq53.jpg\" alt></p>\n<p>先贴出部分的Android的内容,以后会持续更新</p>\n<h1 id=\"Android基础\"><a href=\"#Android基础\" class=\"headerlink\" title=\"Android基础\"></a>Android基础</h1><details><br><summary>目录</summary><br><br><br>- <a href=\"#1-了解fragment么,说说fragmment的生命周期\">1.了解Fragment么,说说Fragmment的生命周期</a><br>- <a href=\"#2-安卓的事件分发机制\">2.安卓的事件分发机制</a><br>- <a href=\"#3-android重要术语解释\">3.Android重要术语解释</a><br>- <a href=\"#4-android启动模式\">4.Android启动模式</a><br>- <a href=\"#5-android-ipc-binder原理\">5.Android IPC:Binder原理</a><br><br></details>\n\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><h3 id=\"1-了解Fragment么-说说Fragmment的生命周期\"><a href=\"#1-了解Fragment么-说说Fragmment的生命周期\" class=\"headerlink\" title=\"1 了解Fragment么,说说Fragmment的生命周期\"></a>1 了解Fragment么,说说Fragmment的生命周期</h3><details><br><summary>展开查看答案</summary><br><br>一张图概括,详细请看博客链接<a href=\"http://pvphero.github.io/2018/03/13/20180313AndroidInterViewFragment/\">Fragment生命周期</a><br><img src=\"https://dn-coding-net-production-pp.qbox.me/de6215bc-2e4d-43db-bc39-45526fe33a01.png\" alt=\"图片\"><br></details>\n\n<h3 id=\"2-安卓的事件分发机制\"><a href=\"#2-安卓的事件分发机制\" class=\"headerlink\" title=\"2 安卓的事件分发机制\"></a>2 安卓的事件分发机制</h3><details><br><summary>展开查看答案</summary><br><br>   - Android事件的基础知识：<br>   所有的Touch事件都封装到MotionEvent里面<br>   事件处理包括三种情况，分别为：<code>传递—-dispatchTouchEvent()函数</code>、<code>拦截—-\n   onInterceptTouchEvent()函数</code>、<code>消费—-onTouchEvent()函数</code>和<code>OnTouchListener</code><br>   事件类型分为<code>ACTION_DOWN</code>, <code>ACTION_UP</code>, <code>ACTION_MOVE</code>, <code>ACTION_POINTER_DOWN</code>,<br>   <code>ACTION_POINTER_UP</code>, <code>ACTION_CANCEL</code>等<br>   每个事件都是以<code>ACTION_DOWN</code>开始<code>ACTION_UP</code>结束<br><br>   - Android事件传递流程：<br>     1. 事件都是从<code>Activity.dispatchTouchEvent()</code>开始传递<br>     2. 事件由父View传递给子View，ViewGroup可以通过<code>onInterceptTouchEvent()</code>方法对事件拦截，<br>     停止其向子view传递<br>     3. 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，<strong>事件会反向往上传递\n     </strong>,这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会<br>     <code>Activityon.TouchEvent()</code>函数。<br>     4. 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来，也就是说ACTION_DOWN必须<br>     返回true，之后的事件才会传递进来OnTouchListener优先于onTouchEvent()对事件进行消费<br><br> - 三张效果图辅助理解<br>    <strong>View不处理事件流程图（View没有消费事件)</strong><br><br>    <img src=\"https://ws4.sinaimg.cn/large/006tKfTcly1fpzlduduzzj31ga0y8jxd.jpg\" alt><br><br><br>    <strong>View处理事件</strong><br><br>    <img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fpzlek9w6cj31gs0xygrl.jpg\" alt><br><br><br>    <strong>事件拦截</strong><br><br>    <img src=\"https://ws1.sinaimg.cn/large/006tKfTcly1fpzlexpyxjj31ge0xkn31.jpg\" alt><br><br><br>    &gt; <a href=\"http://hanhailong.com/2015/09/24/Android-三张图搞定Touch事件传递机制/\" target=\"_blank\" rel=\"noopener\">Android-三张图搞定Touch事件传递机制</a><br><br>    </details>\n\n<h3 id=\"3-Android重要术语解释\"><a href=\"#3-Android重要术语解释\" class=\"headerlink\" title=\"3 Android重要术语解释\"></a>3 Android重要术语解释</h3><details><br><summary>展开查看详细</summary><br><br><em> 1.ActivityManagerServices，简称AMS，服务端对象，负责系统中所有Activity的生命周期\n</em> 2.ActivityThread，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作<br><em> 3.ApplicationThread，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n</em> 4.ApplicationThreadProxy，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。<br><em> 5.Instrumentation，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。\n</em> 6.ActivityStack，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。<br><em> 7.ActivityRecord，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息。其实就是服务器端的Activity对象的映像。\n</em> 8.TaskRecord，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。<br><br></details>\n\n<h3 id=\"4-Android启动模式\"><a href=\"#4-Android启动模式\" class=\"headerlink\" title=\"4 Android启动模式\"></a>4 Android启动模式</h3><details><br><summary>展开查看答案</summary><br><br>1. standard:默认标准模式，每启动一个都会创建一个实例<br>2. singleTop：栈顶复用，如果在栈顶就调用onNewIntent复用，从onResume()开始<br>3. singleTask：栈内复用，本栈内只要用该类型Activity就会调到栈顶复用，从onResume()开始<br>4. singleInstance：单例模式，除了3中特性，系统会单独给该Activity创建一个栈<br><br></details>\n\n<h3 id=\"5-Android-IPC-Binder原理\"><a href=\"#5-Android-IPC-Binder原理\" class=\"headerlink\" title=\"5 Android IPC Binder原理\"></a>5 Android IPC Binder原理</h3><details><br><summary>展开查看答案</summary><br><br>1. 在Activity和Service进行通讯的时候，用到了Binder。<br>  1. 当属于同个进程我们可以继承Binder然后在Activity中对Service进行操作<br>  2. 当不属于同个进程，那么要用到AIDL让系统给我们创建一个Binder，然后在Activity中对远端的Service进行操作。<br>2. 系统给我们生成的Binder：<br>  1. Stub类中有:接口方法的id，有该Binder的标识，有asInterface(IBinder)(让我们在Activity中获取实现了Binder的接口，接口的实现在Service里，同进程时候返回Stub否则返回Proxy)，有onTransact()这个方法是在不同进程的时候让Proxy在Activity进行远端调用实现Activity操作Service<br>  2. Proxy类是代理，在Activity端，其中有:IBinder mRemote(这就是远端的Binder)，两个接口的实现方法不过是代理最终还是要在远端的onTransact()中进行实际操作。<br>3. 哪一端的Binder是副本，该端就可以被另一端进行操作，因为Binder本体在定义的时候可以操作本端的东西。所以可以在Activity端传入本端的Binder，让Service端对其进行操作称为Listener，可以用RemoteCallbackList这个容器来装Listener，防止Listener因为经历过序列化而产生的问题。<br>4. 当Activity端向远端进行调用的时候，当前线程会挂起，当方法处理完毕才会唤醒。<br>5. 如果一个AIDL就用一个Service太奢侈，所以可以使用Binder池的方式，建立一个AIDL其中的方法是返回IBinder，然后根据方法中传入的参数返回具体的AIDL。<br>6. IPC的方式有：Bundle（在Intent启动的时候传入，不过是一次性的），文件共享(对于SharedPreference是特例，因为其在内存中会有缓存)，使用Messenger(其底层用的也是AIDL，同理要操作哪端，就在哪端定义Messenger)，AIDL，ContentProvider(在本进程中继承实现一个ContentProvider，在增删改查方法中调用本进程的SQLite，在其他进程中查询)，Socket<br><br></details>"
      },
      {
        "title": "由Dialog里面嵌套ListView之后的高度自适应引起的ListView性能优化",
        "date": "2018-03-30T05:15:37.000Z",
        "_content": "先说ListView给高的正确做法.\n**android:layout_height属性：**\n\n> 必须将ListView的布局高度属性设置为非“wrap_content”（可以是“match_parent /  fill_parent  /  400dp等绝对数值”）\n\n<!--more-->\n废话少说先来张bug图填楼\n\n![图片](https://dn-coding-net-production-pp.qbox.me/db684e69-16b3-41af-bd42-fd92506790ce.png)\n<!--more-->\n# 前言\n\n随着RecyclerView的普及,ListView差不多是安卓快要淘汰的控件了,但是我们有时候还是会用到,基本上可以说是前些年最常用的Android控件之一了.抛开我们的主题,我们先来谈谈ListView的一些小小的细节,可能是很多开发者在开发过程中并没有注意到的细节,这些细节设置会影响到我们的App的性能.\n\n- **android:layout_height属性**\n\n我们在使用ListView的时候很可能随手就会写一个`layout_height=”wrap_content”`或者`layout_height=”match_parent”`,非常非常普通,咋一看,我写的没错啊...可是实际上`layout_height=”wrap_content”` **是错误的写法!!!会严重影响程序的性能** 我们先来做一个实验:\nxml布局文件如下\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ListView\n        android:id=\"@+id/list_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        ></ListView>\n</LinearLayout>\n\n```\n\njava部分代码\n![图片](https://dn-coding-net-production-pp.qbox.me/917604eb-c83f-468f-a509-e1adcea53472.png)\n\n运行log\n![图片](https://dn-coding-net-production-pp.qbox.me/19b0ceaa-ffd6-44d6-80a1-3d4034e5ead5.png)\n\n我们会发现getView总共被调用了15次!其中4次是null的,11次为重复调用,ListView的item数目只有3项!!!**太可怕了**\n\n我们试着将ListView的高度属性改为`layout_height=”match_parent”`,然后看看\n![](https://ws4.sinaimg.cn/large/006tNc79ly1fpusaq5hm5j30rs01l0up.jpg)\n我们可以看到`getView()`只被调用了3次!这应该是我们期望的结果!\n\n**原因分析:**\n了解原因前,我们应该先了解View的绘制流程,之前我的博客没有关于View绘制流程的介绍,那么在这边说一下,是一个很重要的知识点.\nView的绘制流程是通过 `onMeasure()`->`onLayout()`->`onDraw()`\n\n`onMeasure()` :主要工作是测量视图的大小.从顶层的父View到子View递归调用measure方法,measure方法又回调onMeasure().\n\n`onLayout`: 主要工作是确定View的位置,进行页面布局.从顶层的父View向子View的递归调用view.layout方法的过程,即父View根据上一步measure子view所得到的布局大小和布局参数,将子view放在合适的位置上\n\n`onDraw()` 主要工作是绘制视图.ViewRoot创建一个Canvas对象,然后调用onDraw()方法.总共6个步骤.1.绘制视图背景,2.保存当前画布的图层(Layer),3.绘制View内容,4.绘制View的子View视图,没有的话就不绘制,5.还原图层,6.绘制滚动条.\n\n了解了View的绘制流程,那么我们回到这个问题上.设置ListView的属性`layout_height=”wrap_content”`,就意味着Listview的高度由子View决定,当在onMeasure()的时候,需要测量子View的高度,那我们来看看Listview的onMeasure()方法.\n``` java\n@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        // Sets up mListPadding\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        int childWidth = 0;\n        int childHeight = 0;\n        int childState = 0;\n\n        mItemCount = mAdapter == null ? 0 : mAdapter.getCount();\n        if (mItemCount > 0 && (widthMode == MeasureSpec.UNSPECIFIED ||\n                heightMode == MeasureSpec.UNSPECIFIED)) {\n            final View child = obtainView(0, mIsScrap);\n\n            measureScrapChild(child, 0, widthMeasureSpec);\n\n            childWidth = child.getMeasuredWidth();\n            childHeight = child.getMeasuredHeight();\n            childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n            if (recycleOnMeasure() && mRecycler.shouldRecycleViewType(\n                    ((LayoutParams) child.getLayoutParams()).viewType)) {\n                mRecycler.addScrapView(child, 0);\n            }\n        }\n\n        if (widthMode == MeasureSpec.UNSPECIFIED) {\n            widthSize = mListPadding.left + mListPadding.right + childWidth +\n                    getVerticalScrollbarWidth();\n        } else {\n            widthSize |= (childState&MEASURED_STATE_MASK);\n        }\n\n        if (heightMode == MeasureSpec.UNSPECIFIED) {\n            heightSize = mListPadding.top + mListPadding.bottom + childHeight +\n                    getVerticalFadingEdgeLength() * 2;\n        }\n\n        if (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n\n        setMeasuredDimension(widthSize , heightSize);\n        mWidthMeasureSpec = widthMeasureSpec;\n    }\n```\n\n其中\n```\nif (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n```\n比较重要\n\n再看`measureHeightOfChildren()`\n```\nfinal int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,\n            final int maxHeight, int disallowPartialChildPosition) {\n\n        ...\n\n        for (i = startPosition; i <= endPosition; ++i) {\n            child = obtainView(i, isScrap);\n\n            measureScrapChild(child, i, widthMeasureSpec);\n            ...\n\n            // Recycle the view before we possibly return from the method\n            if (recyle && recycleBin.shouldRecycleViewType(\n                    ((LayoutParams) child.getLayoutParams()).viewType)) {\n                recycleBin.addScrapView(child, -1);\n            }\n\n            returnedHeight += child.getMeasuredHeight();\n\n            if (returnedHeight >= maxHeight) {\n                ...\n            }\n\n            if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {\n                ...\n            }\n        }\n        return returnedHeight;\n    }\n```\n\n`obtainView(i, isScrap)`是子View的实例\n`measureScrapChild(child, i, widthMeasureSpec);` 测量子View\n`recycleBin.addScrapView(child, -1);`将子View加入缓存,可以用来复用\n`if (returnedHeight >= maxHeight) {return ...;}`如果已经测量的子View的高度大于maxHeight的话就直接return出循环,这样的做法也很好理解,其实是ListView很聪明的一种做法,你可以想想比如说这个屏幕只能画10个Item高度,你有20个Item,那么画出10个就行了,剩下的十个就没必要画了~\n\n我们现在看下`obtainView()`方法\n\n```\nView obtainView(int position, boolean[] isScrap) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"obtainView\");\n\n        isScrap[0] = false;\n\n        // Check whether we have a transient state view. Attempt to re-bind the\n        // data and discard the view if we fail.\n        final View transientView = mRecycler.getTransientStateView(position);\n        if (transientView != null) {\n            final LayoutParams params = (LayoutParams) transientView.getLayoutParams();\n\n            // If the view type hasn't changed, attempt to re-bind the data.\n            if (params.viewType == mAdapter.getItemViewType(position)) {\n                final View updatedView = mAdapter.getView(position, transientView, this);\n\n                // If we failed to re-bind the data, scrap the obtained view.\n                if (updatedView != transientView) {\n                    setItemViewLayoutParams(updatedView, position);\n                    mRecycler.addScrapView(updatedView, position);\n                }\n            }\n\n            // Scrap view implies temporary detachment.\n            isScrap[0] = true;\n            return transientView;\n        }\n\n        final View scrapView = mRecycler.getScrapView(position);\n        final View child = mAdapter.getView(position, scrapView, this);\n        if (scrapView != null) {\n            if (child != scrapView) {\n                // Failed to re-bind the data, return scrap to the heap.\n                mRecycler.addScrapView(scrapView, position);\n            } else {\n                isScrap[0] = true;\n\n                child.dispatchFinishTemporaryDetach();\n            }\n        }\n\n        if (mCacheColorHint != 0) {\n            child.setDrawingCacheBackgroundColor(mCacheColorHint);\n        }\n\n        if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) {\n            child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);\n        }\n\n        setItemViewLayoutParams(child, position);\n\n        if (AccessibilityManager.getInstance(mContext).isEnabled()) {\n            if (mAccessibilityDelegate == null) {\n                mAccessibilityDelegate = new ListItemAccessibilityDelegate();\n            }\n            if (child.getAccessibilityDelegate() == null) {\n                child.setAccessibilityDelegate(mAccessibilityDelegate);\n            }\n        }\n\n        Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n\n        return child;\n    }\n```\n\n\n得到一个视图,它显示的数据与指定的位置。这叫做当我们已经发现的观点不是可供重用的回收站。剩下的唯一的选择是将一个古老的视图或制作一个新的.(这是方法注释的翻译,大致可以理解他的意思)\n\n我们应该关注下以下两行代码:\n```\n...\n  final View scrapView = mRecycler.getScrapView(position);\n  final View child = mAdapter.getView(position, scrapView, this);\n...\n```\n这两行代码的意思就是说先从缓存里面取出来一个废弃的view,然后将当前的位置跟view作为参数传入到getView()方法中.这个废弃的,然后又作为参数的view就是convertView.\n\n\n然后我们总结下刚刚的步骤:\nA、测量第0项的时候，convertView肯定是null的 View scrapView = mRecycler.getScrapView(position)也是空的,所以我们在log上可以看到.\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fpusdjl9loj30iq00qaaa.jpg)\nB、第0项测量结束,这个第0项的View就被加入到复用缓存当中了；\nC、开始测量第1项，这时因为是有第0项的View缓存的，所以getView的参数convertView就是这个第0项的View缓存，然后重复B步骤添加到缓存，只不过这个View缓存还是第0项的View；\nD、继续测量第2项，重复C。\n\n所以前面说到onMeasure方法会导致getView调用，而一个View的onMeasure方法调用时机并不是由自身决定，而是由其父视图来决定。ListView放在FrameLayout和RelativeLayout中其onMeasure方法的调用次数是完全不同的。在RelativeLayout中oMeasure()方法调用会翻倍.\n\n由于onMeasure方法会多次被调用，上述问题中是两次，其实完整的调用顺序是onMeasure - onLayout - onMeasure - onLayout - onDraw。\n\n所以根据上面的结论我们可以得出,如果LitsView的**android:layout_height属性设置为wrap_content**将会引起`getView的多次测量`\n\n# 现象\n如上bug图...\n# 产生的原因\n\n- ListView的高度设置成了android:layout_height属性设置为wrap_content\n\n- ListView的父类是RelativeLayout,RelativiLayout布局会使子布局View的Measure周期翻倍,有兴趣可以看下[三大基础布局性能比较](http://blog.csdn.net/megatronkings/article/details/52270461)\n\n# 解决办法\n根据每个Item的高度,然后再根据Adapter的count来动态算高.\n代码如下:\n```\npublic class SetHeight {\n\n    public void setListViewHeightBasedOnChildren(ListView listView, android.widget.BaseAdapter adapter) {\n\n        if (adapter==null){\n            return;\n        }\n        int totalHeight = 0;\n\n        for (int i = 0; i < adapter.getCount(); i++) { // listAdapter.getCount()返回数据项的数目\n\n            View listItem = adapter.getView(i, null, listView);\n\n            listItem.measure(0, 0); // 计算子项View 的宽高\n\n            totalHeight += listItem.getMeasuredHeight(); // 统计所有子项的总高度\n\n        }\n\n        ViewGroup.LayoutParams params = listView.getLayoutParams();\n\n        params.height = totalHeight\n                + (listView.getDividerHeight() * (adapter.getCount() - 1));\n\n        // listView.getDividerHeight()获取子项间分隔符占用的高度\n\n        // params.height最后得到整个ListView完整显示需要的高度\n\n        listView.setLayoutParams(params);\n\n    }\n\n}\n\n```\n\n\nxml布局,**注意要将ListView的父类设置为LinearLayout**\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\">\n\n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@+id/txt_cancel\"\n        android:orientation=\"vertical\">\n        <View\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"@dimen/y2\"\n            android:background=\"#cccccc\" />\n\n        <ListView\n            android:id=\"@+id/lv_remain_item\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"0dp\"\n            android:cacheColorHint=\"#00000000\"\n            ></ListView>\n\n        <View\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"@dimen/y2\"\n            android:background=\"#cccccc\" />\n\n    </LinearLayout>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center\"\n        android:orientation=\"horizontal\"\n        >\n\n        <TextView\n            android:id=\"@+id/txt_cancel\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"@dimen/y120\"\n            android:layout_alignParentBottom=\"true\"\n            android:gravity=\"center\"\n            android:text=\"cancel\"\n            android:textSize=\"@dimen/x32\" />\n    </LinearLayout>\n</LinearLayout>\n```\n\n然后在Listview使用处,调用该方法.\n```\n userListDialog.getmListView().setAdapter(scaleUserAdapter);\n SetHeight.setListViewHeightBasedOnChildren(userListDialog.getmListView(),scaleUserAdapter);\n```\n\n# 运行结果\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fpusfb8d48j308c0etjsh.jpg)\n\ngetView()调用情况\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fpusgaa5ixj30rs082tl8.jpg)\nGitHub代码地址:[ListViewDialog](https://github.com/pvphero/ListViewDialog),喜欢的话欢迎Start",
        "source": "_posts/20180330AndroidListViewInDialog.md",
        "raw": "---\ntitle: 由Dialog里面嵌套ListView之后的高度自适应引起的ListView性能优化\ndate: 2018-03-30 13:15:37\ntags:\n- Android\n- 性能优化\n- ListView\ncategories:\n- Android开发笔记\n---\n先说ListView给高的正确做法.\n**android:layout_height属性：**\n\n> 必须将ListView的布局高度属性设置为非“wrap_content”（可以是“match_parent /  fill_parent  /  400dp等绝对数值”）\n\n<!--more-->\n废话少说先来张bug图填楼\n\n![图片](https://dn-coding-net-production-pp.qbox.me/db684e69-16b3-41af-bd42-fd92506790ce.png)\n<!--more-->\n# 前言\n\n随着RecyclerView的普及,ListView差不多是安卓快要淘汰的控件了,但是我们有时候还是会用到,基本上可以说是前些年最常用的Android控件之一了.抛开我们的主题,我们先来谈谈ListView的一些小小的细节,可能是很多开发者在开发过程中并没有注意到的细节,这些细节设置会影响到我们的App的性能.\n\n- **android:layout_height属性**\n\n我们在使用ListView的时候很可能随手就会写一个`layout_height=”wrap_content”`或者`layout_height=”match_parent”`,非常非常普通,咋一看,我写的没错啊...可是实际上`layout_height=”wrap_content”` **是错误的写法!!!会严重影响程序的性能** 我们先来做一个实验:\nxml布局文件如下\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ListView\n        android:id=\"@+id/list_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        ></ListView>\n</LinearLayout>\n\n```\n\njava部分代码\n![图片](https://dn-coding-net-production-pp.qbox.me/917604eb-c83f-468f-a509-e1adcea53472.png)\n\n运行log\n![图片](https://dn-coding-net-production-pp.qbox.me/19b0ceaa-ffd6-44d6-80a1-3d4034e5ead5.png)\n\n我们会发现getView总共被调用了15次!其中4次是null的,11次为重复调用,ListView的item数目只有3项!!!**太可怕了**\n\n我们试着将ListView的高度属性改为`layout_height=”match_parent”`,然后看看\n![](https://ws4.sinaimg.cn/large/006tNc79ly1fpusaq5hm5j30rs01l0up.jpg)\n我们可以看到`getView()`只被调用了3次!这应该是我们期望的结果!\n\n**原因分析:**\n了解原因前,我们应该先了解View的绘制流程,之前我的博客没有关于View绘制流程的介绍,那么在这边说一下,是一个很重要的知识点.\nView的绘制流程是通过 `onMeasure()`->`onLayout()`->`onDraw()`\n\n`onMeasure()` :主要工作是测量视图的大小.从顶层的父View到子View递归调用measure方法,measure方法又回调onMeasure().\n\n`onLayout`: 主要工作是确定View的位置,进行页面布局.从顶层的父View向子View的递归调用view.layout方法的过程,即父View根据上一步measure子view所得到的布局大小和布局参数,将子view放在合适的位置上\n\n`onDraw()` 主要工作是绘制视图.ViewRoot创建一个Canvas对象,然后调用onDraw()方法.总共6个步骤.1.绘制视图背景,2.保存当前画布的图层(Layer),3.绘制View内容,4.绘制View的子View视图,没有的话就不绘制,5.还原图层,6.绘制滚动条.\n\n了解了View的绘制流程,那么我们回到这个问题上.设置ListView的属性`layout_height=”wrap_content”`,就意味着Listview的高度由子View决定,当在onMeasure()的时候,需要测量子View的高度,那我们来看看Listview的onMeasure()方法.\n``` java\n@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        // Sets up mListPadding\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n        int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        int childWidth = 0;\n        int childHeight = 0;\n        int childState = 0;\n\n        mItemCount = mAdapter == null ? 0 : mAdapter.getCount();\n        if (mItemCount > 0 && (widthMode == MeasureSpec.UNSPECIFIED ||\n                heightMode == MeasureSpec.UNSPECIFIED)) {\n            final View child = obtainView(0, mIsScrap);\n\n            measureScrapChild(child, 0, widthMeasureSpec);\n\n            childWidth = child.getMeasuredWidth();\n            childHeight = child.getMeasuredHeight();\n            childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n            if (recycleOnMeasure() && mRecycler.shouldRecycleViewType(\n                    ((LayoutParams) child.getLayoutParams()).viewType)) {\n                mRecycler.addScrapView(child, 0);\n            }\n        }\n\n        if (widthMode == MeasureSpec.UNSPECIFIED) {\n            widthSize = mListPadding.left + mListPadding.right + childWidth +\n                    getVerticalScrollbarWidth();\n        } else {\n            widthSize |= (childState&MEASURED_STATE_MASK);\n        }\n\n        if (heightMode == MeasureSpec.UNSPECIFIED) {\n            heightSize = mListPadding.top + mListPadding.bottom + childHeight +\n                    getVerticalFadingEdgeLength() * 2;\n        }\n\n        if (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n\n        setMeasuredDimension(widthSize , heightSize);\n        mWidthMeasureSpec = widthMeasureSpec;\n    }\n```\n\n其中\n```\nif (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n```\n比较重要\n\n再看`measureHeightOfChildren()`\n```\nfinal int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,\n            final int maxHeight, int disallowPartialChildPosition) {\n\n        ...\n\n        for (i = startPosition; i <= endPosition; ++i) {\n            child = obtainView(i, isScrap);\n\n            measureScrapChild(child, i, widthMeasureSpec);\n            ...\n\n            // Recycle the view before we possibly return from the method\n            if (recyle && recycleBin.shouldRecycleViewType(\n                    ((LayoutParams) child.getLayoutParams()).viewType)) {\n                recycleBin.addScrapView(child, -1);\n            }\n\n            returnedHeight += child.getMeasuredHeight();\n\n            if (returnedHeight >= maxHeight) {\n                ...\n            }\n\n            if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {\n                ...\n            }\n        }\n        return returnedHeight;\n    }\n```\n\n`obtainView(i, isScrap)`是子View的实例\n`measureScrapChild(child, i, widthMeasureSpec);` 测量子View\n`recycleBin.addScrapView(child, -1);`将子View加入缓存,可以用来复用\n`if (returnedHeight >= maxHeight) {return ...;}`如果已经测量的子View的高度大于maxHeight的话就直接return出循环,这样的做法也很好理解,其实是ListView很聪明的一种做法,你可以想想比如说这个屏幕只能画10个Item高度,你有20个Item,那么画出10个就行了,剩下的十个就没必要画了~\n\n我们现在看下`obtainView()`方法\n\n```\nView obtainView(int position, boolean[] isScrap) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"obtainView\");\n\n        isScrap[0] = false;\n\n        // Check whether we have a transient state view. Attempt to re-bind the\n        // data and discard the view if we fail.\n        final View transientView = mRecycler.getTransientStateView(position);\n        if (transientView != null) {\n            final LayoutParams params = (LayoutParams) transientView.getLayoutParams();\n\n            // If the view type hasn't changed, attempt to re-bind the data.\n            if (params.viewType == mAdapter.getItemViewType(position)) {\n                final View updatedView = mAdapter.getView(position, transientView, this);\n\n                // If we failed to re-bind the data, scrap the obtained view.\n                if (updatedView != transientView) {\n                    setItemViewLayoutParams(updatedView, position);\n                    mRecycler.addScrapView(updatedView, position);\n                }\n            }\n\n            // Scrap view implies temporary detachment.\n            isScrap[0] = true;\n            return transientView;\n        }\n\n        final View scrapView = mRecycler.getScrapView(position);\n        final View child = mAdapter.getView(position, scrapView, this);\n        if (scrapView != null) {\n            if (child != scrapView) {\n                // Failed to re-bind the data, return scrap to the heap.\n                mRecycler.addScrapView(scrapView, position);\n            } else {\n                isScrap[0] = true;\n\n                child.dispatchFinishTemporaryDetach();\n            }\n        }\n\n        if (mCacheColorHint != 0) {\n            child.setDrawingCacheBackgroundColor(mCacheColorHint);\n        }\n\n        if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) {\n            child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);\n        }\n\n        setItemViewLayoutParams(child, position);\n\n        if (AccessibilityManager.getInstance(mContext).isEnabled()) {\n            if (mAccessibilityDelegate == null) {\n                mAccessibilityDelegate = new ListItemAccessibilityDelegate();\n            }\n            if (child.getAccessibilityDelegate() == null) {\n                child.setAccessibilityDelegate(mAccessibilityDelegate);\n            }\n        }\n\n        Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n\n        return child;\n    }\n```\n\n\n得到一个视图,它显示的数据与指定的位置。这叫做当我们已经发现的观点不是可供重用的回收站。剩下的唯一的选择是将一个古老的视图或制作一个新的.(这是方法注释的翻译,大致可以理解他的意思)\n\n我们应该关注下以下两行代码:\n```\n...\n  final View scrapView = mRecycler.getScrapView(position);\n  final View child = mAdapter.getView(position, scrapView, this);\n...\n```\n这两行代码的意思就是说先从缓存里面取出来一个废弃的view,然后将当前的位置跟view作为参数传入到getView()方法中.这个废弃的,然后又作为参数的view就是convertView.\n\n\n然后我们总结下刚刚的步骤:\nA、测量第0项的时候，convertView肯定是null的 View scrapView = mRecycler.getScrapView(position)也是空的,所以我们在log上可以看到.\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fpusdjl9loj30iq00qaaa.jpg)\nB、第0项测量结束,这个第0项的View就被加入到复用缓存当中了；\nC、开始测量第1项，这时因为是有第0项的View缓存的，所以getView的参数convertView就是这个第0项的View缓存，然后重复B步骤添加到缓存，只不过这个View缓存还是第0项的View；\nD、继续测量第2项，重复C。\n\n所以前面说到onMeasure方法会导致getView调用，而一个View的onMeasure方法调用时机并不是由自身决定，而是由其父视图来决定。ListView放在FrameLayout和RelativeLayout中其onMeasure方法的调用次数是完全不同的。在RelativeLayout中oMeasure()方法调用会翻倍.\n\n由于onMeasure方法会多次被调用，上述问题中是两次，其实完整的调用顺序是onMeasure - onLayout - onMeasure - onLayout - onDraw。\n\n所以根据上面的结论我们可以得出,如果LitsView的**android:layout_height属性设置为wrap_content**将会引起`getView的多次测量`\n\n# 现象\n如上bug图...\n# 产生的原因\n\n- ListView的高度设置成了android:layout_height属性设置为wrap_content\n\n- ListView的父类是RelativeLayout,RelativiLayout布局会使子布局View的Measure周期翻倍,有兴趣可以看下[三大基础布局性能比较](http://blog.csdn.net/megatronkings/article/details/52270461)\n\n# 解决办法\n根据每个Item的高度,然后再根据Adapter的count来动态算高.\n代码如下:\n```\npublic class SetHeight {\n\n    public void setListViewHeightBasedOnChildren(ListView listView, android.widget.BaseAdapter adapter) {\n\n        if (adapter==null){\n            return;\n        }\n        int totalHeight = 0;\n\n        for (int i = 0; i < adapter.getCount(); i++) { // listAdapter.getCount()返回数据项的数目\n\n            View listItem = adapter.getView(i, null, listView);\n\n            listItem.measure(0, 0); // 计算子项View 的宽高\n\n            totalHeight += listItem.getMeasuredHeight(); // 统计所有子项的总高度\n\n        }\n\n        ViewGroup.LayoutParams params = listView.getLayoutParams();\n\n        params.height = totalHeight\n                + (listView.getDividerHeight() * (adapter.getCount() - 1));\n\n        // listView.getDividerHeight()获取子项间分隔符占用的高度\n\n        // params.height最后得到整个ListView完整显示需要的高度\n\n        listView.setLayoutParams(params);\n\n    }\n\n}\n\n```\n\n\nxml布局,**注意要将ListView的父类设置为LinearLayout**\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\">\n\n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@+id/txt_cancel\"\n        android:orientation=\"vertical\">\n        <View\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"@dimen/y2\"\n            android:background=\"#cccccc\" />\n\n        <ListView\n            android:id=\"@+id/lv_remain_item\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"0dp\"\n            android:cacheColorHint=\"#00000000\"\n            ></ListView>\n\n        <View\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"@dimen/y2\"\n            android:background=\"#cccccc\" />\n\n    </LinearLayout>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center\"\n        android:orientation=\"horizontal\"\n        >\n\n        <TextView\n            android:id=\"@+id/txt_cancel\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"@dimen/y120\"\n            android:layout_alignParentBottom=\"true\"\n            android:gravity=\"center\"\n            android:text=\"cancel\"\n            android:textSize=\"@dimen/x32\" />\n    </LinearLayout>\n</LinearLayout>\n```\n\n然后在Listview使用处,调用该方法.\n```\n userListDialog.getmListView().setAdapter(scaleUserAdapter);\n SetHeight.setListViewHeightBasedOnChildren(userListDialog.getmListView(),scaleUserAdapter);\n```\n\n# 运行结果\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fpusfb8d48j308c0etjsh.jpg)\n\ngetView()调用情况\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fpusgaa5ixj30rs082tl8.jpg)\nGitHub代码地址:[ListViewDialog](https://github.com/pvphero/ListViewDialog),喜欢的话欢迎Start",
        "slug": "20180330AndroidListViewInDialog",
        "published": 1,
        "updated": "2020-05-19T02:32:04.674Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj18000252j9smo2h9d8",
        "content": "<p>先说ListView给高的正确做法.<br><strong>android:layout_height属性：</strong></p>\n<blockquote>\n<p>必须将ListView的布局高度属性设置为非“wrap_content”（可以是“match_parent /  fill_parent  /  400dp等绝对数值”）</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>废话少说先来张bug图填楼</p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/db684e69-16b3-41af-bd42-fd92506790ce.png\" alt=\"图片\"><br><!--more--></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>随着RecyclerView的普及,ListView差不多是安卓快要淘汰的控件了,但是我们有时候还是会用到,基本上可以说是前些年最常用的Android控件之一了.抛开我们的主题,我们先来谈谈ListView的一些小小的细节,可能是很多开发者在开发过程中并没有注意到的细节,这些细节设置会影响到我们的App的性能.</p>\n<ul>\n<li><strong>android:layout_height属性</strong></li>\n</ul>\n<p>我们在使用ListView的时候很可能随手就会写一个<code>layout_height=”wrap_content”</code>或者<code>layout_height=”match_parent”</code>,非常非常普通,咋一看,我写的没错啊…可是实际上<code>layout_height=”wrap_content”</code> <strong>是错误的写法!!!会严重影响程序的性能</strong> 我们先来做一个实验:<br>xml布局文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ListView</span><br><span class=\"line\">        android:id=&quot;@+id/list_view&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        &gt;&lt;/ListView&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>java部分代码<br><img src=\"https://dn-coding-net-production-pp.qbox.me/917604eb-c83f-468f-a509-e1adcea53472.png\" alt=\"图片\"></p>\n<p>运行log<br><img src=\"https://dn-coding-net-production-pp.qbox.me/19b0ceaa-ffd6-44d6-80a1-3d4034e5ead5.png\" alt=\"图片\"></p>\n<p>我们会发现getView总共被调用了15次!其中4次是null的,11次为重复调用,ListView的item数目只有3项!!!<strong>太可怕了</strong></p>\n<p>我们试着将ListView的高度属性改为<code>layout_height=”match_parent”</code>,然后看看<br><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fpusaq5hm5j30rs01l0up.jpg\" alt><br>我们可以看到<code>getView()</code>只被调用了3次!这应该是我们期望的结果!</p>\n<p><strong>原因分析:</strong><br>了解原因前,我们应该先了解View的绘制流程,之前我的博客没有关于View绘制流程的介绍,那么在这边说一下,是一个很重要的知识点.<br>View的绘制流程是通过 <code>onMeasure()</code>-&gt;<code>onLayout()</code>-&gt;<code>onDraw()</code></p>\n<p><code>onMeasure()</code> :主要工作是测量视图的大小.从顶层的父View到子View递归调用measure方法,measure方法又回调onMeasure().</p>\n<p><code>onLayout</code>: 主要工作是确定View的位置,进行页面布局.从顶层的父View向子View的递归调用view.layout方法的过程,即父View根据上一步measure子view所得到的布局大小和布局参数,将子view放在合适的位置上</p>\n<p><code>onDraw()</code> 主要工作是绘制视图.ViewRoot创建一个Canvas对象,然后调用onDraw()方法.总共6个步骤.1.绘制视图背景,2.保存当前画布的图层(Layer),3.绘制View内容,4.绘制View的子View视图,没有的话就不绘制,5.还原图层,6.绘制滚动条.</p>\n<p>了解了View的绘制流程,那么我们回到这个问题上.设置ListView的属性<code>layout_height=”wrap_content”</code>,就意味着Listview的高度由子View决定,当在onMeasure()的时候,需要测量子View的高度,那我们来看看Listview的onMeasure()方法.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Sets up mListPadding</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> childWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        mItemCount = mAdapter == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : mAdapter.getCount();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mItemCount &gt; <span class=\"number\">0</span> &amp;&amp; (widthMode == MeasureSpec.UNSPECIFIED ||</span><br><span class=\"line\">                heightMode == MeasureSpec.UNSPECIFIED)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = obtainView(<span class=\"number\">0</span>, mIsScrap);</span><br><span class=\"line\"></span><br><span class=\"line\">            measureScrapChild(child, <span class=\"number\">0</span>, widthMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">            childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">            childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (recycleOnMeasure() &amp;&amp; mRecycler.shouldRecycleViewType(</span><br><span class=\"line\">                    ((LayoutParams) child.getLayoutParams()).viewType)) &#123;</span><br><span class=\"line\">                mRecycler.addScrapView(child, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (widthMode == MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">            widthSize = mListPadding.left + mListPadding.right + childWidth +</span><br><span class=\"line\">                    getVerticalScrollbarWidth();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            widthSize |= (childState&amp;MEASURED_STATE_MASK);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heightMode == MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">            heightSize = mListPadding.top + mListPadding.bottom + childHeight +</span><br><span class=\"line\">                    getVerticalFadingEdgeLength() * <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></span><br><span class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setMeasuredDimension(widthSize , heightSize);</span><br><span class=\"line\">        mWidthMeasureSpec = widthMeasureSpec;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            // TODO: after first layout we should maybe start at the first visible position, not 0</span><br><span class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>比较重要</p>\n<p>再看<code>measureHeightOfChildren()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,</span><br><span class=\"line\">            final int maxHeight, int disallowPartialChildPosition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        for (i = startPosition; i &lt;= endPosition; ++i) &#123;</span><br><span class=\"line\">            child = obtainView(i, isScrap);</span><br><span class=\"line\"></span><br><span class=\"line\">            measureScrapChild(child, i, widthMeasureSpec);</span><br><span class=\"line\">            ...</span><br><span class=\"line\"></span><br><span class=\"line\">            // Recycle the view before we possibly return from the method</span><br><span class=\"line\">            if (recyle &amp;&amp; recycleBin.shouldRecycleViewType(</span><br><span class=\"line\">                    ((LayoutParams) child.getLayoutParams()).viewType)) &#123;</span><br><span class=\"line\">                recycleBin.addScrapView(child, -1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            returnedHeight += child.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (returnedHeight &gt;= maxHeight) &#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if ((disallowPartialChildPosition &gt;= 0) &amp;&amp; (i &gt;= disallowPartialChildPosition)) &#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return returnedHeight;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>obtainView(i, isScrap)</code>是子View的实例<br><code>measureScrapChild(child, i, widthMeasureSpec);</code> 测量子View<br><code>recycleBin.addScrapView(child, -1);</code>将子View加入缓存,可以用来复用<br><code>if (returnedHeight &gt;= maxHeight) {return ...;}</code>如果已经测量的子View的高度大于maxHeight的话就直接return出循环,这样的做法也很好理解,其实是ListView很聪明的一种做法,你可以想想比如说这个屏幕只能画10个Item高度,你有20个Item,那么画出10个就行了,剩下的十个就没必要画了~</p>\n<p>我们现在看下<code>obtainView()</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View obtainView(int position, boolean[] isScrap) &#123;</span><br><span class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, &quot;obtainView&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        isScrap[0] = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Check whether we have a transient state view. Attempt to re-bind the</span><br><span class=\"line\">        // data and discard the view if we fail.</span><br><span class=\"line\">        final View transientView = mRecycler.getTransientStateView(position);</span><br><span class=\"line\">        if (transientView != null) &#123;</span><br><span class=\"line\">            final LayoutParams params = (LayoutParams) transientView.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            // If the view type hasn&apos;t changed, attempt to re-bind the data.</span><br><span class=\"line\">            if (params.viewType == mAdapter.getItemViewType(position)) &#123;</span><br><span class=\"line\">                final View updatedView = mAdapter.getView(position, transientView, this);</span><br><span class=\"line\"></span><br><span class=\"line\">                // If we failed to re-bind the data, scrap the obtained view.</span><br><span class=\"line\">                if (updatedView != transientView) &#123;</span><br><span class=\"line\">                    setItemViewLayoutParams(updatedView, position);</span><br><span class=\"line\">                    mRecycler.addScrapView(updatedView, position);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // Scrap view implies temporary detachment.</span><br><span class=\"line\">            isScrap[0] = true;</span><br><span class=\"line\">            return transientView;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        final View scrapView = mRecycler.getScrapView(position);</span><br><span class=\"line\">        final View child = mAdapter.getView(position, scrapView, this);</span><br><span class=\"line\">        if (scrapView != null) &#123;</span><br><span class=\"line\">            if (child != scrapView) &#123;</span><br><span class=\"line\">                // Failed to re-bind the data, return scrap to the heap.</span><br><span class=\"line\">                mRecycler.addScrapView(scrapView, position);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                isScrap[0] = true;</span><br><span class=\"line\"></span><br><span class=\"line\">                child.dispatchFinishTemporaryDetach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (mCacheColorHint != 0) &#123;</span><br><span class=\"line\">            child.setDrawingCacheBackgroundColor(mCacheColorHint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) &#123;</span><br><span class=\"line\">            child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setItemViewLayoutParams(child, position);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (AccessibilityManager.getInstance(mContext).isEnabled()) &#123;</span><br><span class=\"line\">            if (mAccessibilityDelegate == null) &#123;</span><br><span class=\"line\">                mAccessibilityDelegate = new ListItemAccessibilityDelegate();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (child.getAccessibilityDelegate() == null) &#123;</span><br><span class=\"line\">                child.setAccessibilityDelegate(mAccessibilityDelegate);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class=\"line\"></span><br><span class=\"line\">        return child;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>得到一个视图,它显示的数据与指定的位置。这叫做当我们已经发现的观点不是可供重用的回收站。剩下的唯一的选择是将一个古老的视图或制作一个新的.(这是方法注释的翻译,大致可以理解他的意思)</p>\n<p>我们应该关注下以下两行代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  final View scrapView = mRecycler.getScrapView(position);</span><br><span class=\"line\">  final View child = mAdapter.getView(position, scrapView, this);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>这两行代码的意思就是说先从缓存里面取出来一个废弃的view,然后将当前的位置跟view作为参数传入到getView()方法中.这个废弃的,然后又作为参数的view就是convertView.</p>\n<p>然后我们总结下刚刚的步骤:<br>A、测量第0项的时候，convertView肯定是null的 View scrapView = mRecycler.getScrapView(position)也是空的,所以我们在log上可以看到.<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fpusdjl9loj30iq00qaaa.jpg\" alt><br>B、第0项测量结束,这个第0项的View就被加入到复用缓存当中了；<br>C、开始测量第1项，这时因为是有第0项的View缓存的，所以getView的参数convertView就是这个第0项的View缓存，然后重复B步骤添加到缓存，只不过这个View缓存还是第0项的View；<br>D、继续测量第2项，重复C。</p>\n<p>所以前面说到onMeasure方法会导致getView调用，而一个View的onMeasure方法调用时机并不是由自身决定，而是由其父视图来决定。ListView放在FrameLayout和RelativeLayout中其onMeasure方法的调用次数是完全不同的。在RelativeLayout中oMeasure()方法调用会翻倍.</p>\n<p>由于onMeasure方法会多次被调用，上述问题中是两次，其实完整的调用顺序是onMeasure - onLayout - onMeasure - onLayout - onDraw。</p>\n<p>所以根据上面的结论我们可以得出,如果LitsView的<strong>android:layout_height属性设置为wrap_content</strong>将会引起<code>getView的多次测量</code></p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>如上bug图…</p>\n<h1 id=\"产生的原因\"><a href=\"#产生的原因\" class=\"headerlink\" title=\"产生的原因\"></a>产生的原因</h1><ul>\n<li><p>ListView的高度设置成了android:layout_height属性设置为wrap_content</p>\n</li>\n<li><p>ListView的父类是RelativeLayout,RelativiLayout布局会使子布局View的Measure周期翻倍,有兴趣可以看下<a href=\"http://blog.csdn.net/megatronkings/article/details/52270461\" target=\"_blank\" rel=\"noopener\">三大基础布局性能比较</a></p>\n</li>\n</ul>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>根据每个Item的高度,然后再根据Adapter的count来动态算高.<br>代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SetHeight &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setListViewHeightBasedOnChildren(ListView listView, android.widget.BaseAdapter adapter) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (adapter==null)&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int totalHeight = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; adapter.getCount(); i++) &#123; // listAdapter.getCount()返回数据项的数目</span><br><span class=\"line\"></span><br><span class=\"line\">            View listItem = adapter.getView(i, null, listView);</span><br><span class=\"line\"></span><br><span class=\"line\">            listItem.measure(0, 0); // 计算子项View 的宽高</span><br><span class=\"line\"></span><br><span class=\"line\">            totalHeight += listItem.getMeasuredHeight(); // 统计所有子项的总高度</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ViewGroup.LayoutParams params = listView.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">        params.height = totalHeight</span><br><span class=\"line\">                + (listView.getDividerHeight() * (adapter.getCount() - 1));</span><br><span class=\"line\"></span><br><span class=\"line\">        // listView.getDividerHeight()获取子项间分隔符占用的高度</span><br><span class=\"line\"></span><br><span class=\"line\">        // params.height最后得到整个ListView完整显示需要的高度</span><br><span class=\"line\"></span><br><span class=\"line\">        listView.setLayoutParams(params);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>xml布局,<strong>注意要将ListView的父类设置为LinearLayout</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_above=&quot;@+id/txt_cancel&quot;</span><br><span class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class=\"line\">        &lt;View</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/y2&quot;</span><br><span class=\"line\">            android:background=&quot;#cccccc&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;ListView</span><br><span class=\"line\">            android:id=&quot;@+id/lv_remain_item&quot;</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;0dp&quot;</span><br><span class=\"line\">            android:cacheColorHint=&quot;#00000000&quot;</span><br><span class=\"line\">            &gt;&lt;/ListView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;View</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/y2&quot;</span><br><span class=\"line\">            android:background=&quot;#cccccc&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:gravity=&quot;center&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:id=&quot;@+id/txt_cancel&quot;</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/y120&quot;</span><br><span class=\"line\">            android:layout_alignParentBottom=&quot;true&quot;</span><br><span class=\"line\">            android:gravity=&quot;center&quot;</span><br><span class=\"line\">            android:text=&quot;cancel&quot;</span><br><span class=\"line\">            android:textSize=&quot;@dimen/x32&quot; /&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后在Listview使用处,调用该方法.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userListDialog.getmListView().setAdapter(scaleUserAdapter);</span><br><span class=\"line\">SetHeight.setListViewHeightBasedOnChildren(userListDialog.getmListView(),scaleUserAdapter);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h1><p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fpusfb8d48j308c0etjsh.jpg\" alt></p>\n<p>getView()调用情况<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fpusgaa5ixj30rs082tl8.jpg\" alt><br>GitHub代码地址:<a href=\"https://github.com/pvphero/ListViewDialog\" target=\"_blank\" rel=\"noopener\">ListViewDialog</a>,喜欢的话欢迎Start</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>先说ListView给高的正确做法.<br><strong>android:layout_height属性：</strong></p>\n<blockquote>\n<p>必须将ListView的布局高度属性设置为非“wrap_content”（可以是“match_parent /  fill_parent  /  400dp等绝对数值”）</p>\n</blockquote>",
        "more": "<p>废话少说先来张bug图填楼</p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/db684e69-16b3-41af-bd42-fd92506790ce.png\" alt=\"图片\"><br><!--more--></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>随着RecyclerView的普及,ListView差不多是安卓快要淘汰的控件了,但是我们有时候还是会用到,基本上可以说是前些年最常用的Android控件之一了.抛开我们的主题,我们先来谈谈ListView的一些小小的细节,可能是很多开发者在开发过程中并没有注意到的细节,这些细节设置会影响到我们的App的性能.</p>\n<ul>\n<li><strong>android:layout_height属性</strong></li>\n</ul>\n<p>我们在使用ListView的时候很可能随手就会写一个<code>layout_height=”wrap_content”</code>或者<code>layout_height=”match_parent”</code>,非常非常普通,咋一看,我写的没错啊…可是实际上<code>layout_height=”wrap_content”</code> <strong>是错误的写法!!!会严重影响程序的性能</strong> 我们先来做一个实验:<br>xml布局文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ListView</span><br><span class=\"line\">        android:id=&quot;@+id/list_view&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        &gt;&lt;/ListView&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>java部分代码<br><img src=\"https://dn-coding-net-production-pp.qbox.me/917604eb-c83f-468f-a509-e1adcea53472.png\" alt=\"图片\"></p>\n<p>运行log<br><img src=\"https://dn-coding-net-production-pp.qbox.me/19b0ceaa-ffd6-44d6-80a1-3d4034e5ead5.png\" alt=\"图片\"></p>\n<p>我们会发现getView总共被调用了15次!其中4次是null的,11次为重复调用,ListView的item数目只有3项!!!<strong>太可怕了</strong></p>\n<p>我们试着将ListView的高度属性改为<code>layout_height=”match_parent”</code>,然后看看<br><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fpusaq5hm5j30rs01l0up.jpg\" alt><br>我们可以看到<code>getView()</code>只被调用了3次!这应该是我们期望的结果!</p>\n<p><strong>原因分析:</strong><br>了解原因前,我们应该先了解View的绘制流程,之前我的博客没有关于View绘制流程的介绍,那么在这边说一下,是一个很重要的知识点.<br>View的绘制流程是通过 <code>onMeasure()</code>-&gt;<code>onLayout()</code>-&gt;<code>onDraw()</code></p>\n<p><code>onMeasure()</code> :主要工作是测量视图的大小.从顶层的父View到子View递归调用measure方法,measure方法又回调onMeasure().</p>\n<p><code>onLayout</code>: 主要工作是确定View的位置,进行页面布局.从顶层的父View向子View的递归调用view.layout方法的过程,即父View根据上一步measure子view所得到的布局大小和布局参数,将子view放在合适的位置上</p>\n<p><code>onDraw()</code> 主要工作是绘制视图.ViewRoot创建一个Canvas对象,然后调用onDraw()方法.总共6个步骤.1.绘制视图背景,2.保存当前画布的图层(Layer),3.绘制View内容,4.绘制View的子View视图,没有的话就不绘制,5.还原图层,6.绘制滚动条.</p>\n<p>了解了View的绘制流程,那么我们回到这个问题上.设置ListView的属性<code>layout_height=”wrap_content”</code>,就意味着Listview的高度由子View决定,当在onMeasure()的时候,需要测量子View的高度,那我们来看看Listview的onMeasure()方法.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Sets up mListPadding</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> childWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        mItemCount = mAdapter == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : mAdapter.getCount();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mItemCount &gt; <span class=\"number\">0</span> &amp;&amp; (widthMode == MeasureSpec.UNSPECIFIED ||</span><br><span class=\"line\">                heightMode == MeasureSpec.UNSPECIFIED)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = obtainView(<span class=\"number\">0</span>, mIsScrap);</span><br><span class=\"line\"></span><br><span class=\"line\">            measureScrapChild(child, <span class=\"number\">0</span>, widthMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">            childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">            childHeight = child.getMeasuredHeight();</span><br><span class=\"line\">            childState = combineMeasuredStates(childState, child.getMeasuredState());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (recycleOnMeasure() &amp;&amp; mRecycler.shouldRecycleViewType(</span><br><span class=\"line\">                    ((LayoutParams) child.getLayoutParams()).viewType)) &#123;</span><br><span class=\"line\">                mRecycler.addScrapView(child, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (widthMode == MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">            widthSize = mListPadding.left + mListPadding.right + childWidth +</span><br><span class=\"line\">                    getVerticalScrollbarWidth();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            widthSize |= (childState&amp;MEASURED_STATE_MASK);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heightMode == MeasureSpec.UNSPECIFIED) &#123;</span><br><span class=\"line\">            heightSize = mListPadding.top + mListPadding.bottom + childHeight +</span><br><span class=\"line\">                    getVerticalFadingEdgeLength() * <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></span><br><span class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setMeasuredDimension(widthSize , heightSize);</span><br><span class=\"line\">        mWidthMeasureSpec = widthMeasureSpec;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            // TODO: after first layout we should maybe start at the first visible position, not 0</span><br><span class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>比较重要</p>\n<p>再看<code>measureHeightOfChildren()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,</span><br><span class=\"line\">            final int maxHeight, int disallowPartialChildPosition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        for (i = startPosition; i &lt;= endPosition; ++i) &#123;</span><br><span class=\"line\">            child = obtainView(i, isScrap);</span><br><span class=\"line\"></span><br><span class=\"line\">            measureScrapChild(child, i, widthMeasureSpec);</span><br><span class=\"line\">            ...</span><br><span class=\"line\"></span><br><span class=\"line\">            // Recycle the view before we possibly return from the method</span><br><span class=\"line\">            if (recyle &amp;&amp; recycleBin.shouldRecycleViewType(</span><br><span class=\"line\">                    ((LayoutParams) child.getLayoutParams()).viewType)) &#123;</span><br><span class=\"line\">                recycleBin.addScrapView(child, -1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            returnedHeight += child.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (returnedHeight &gt;= maxHeight) &#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if ((disallowPartialChildPosition &gt;= 0) &amp;&amp; (i &gt;= disallowPartialChildPosition)) &#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return returnedHeight;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>obtainView(i, isScrap)</code>是子View的实例<br><code>measureScrapChild(child, i, widthMeasureSpec);</code> 测量子View<br><code>recycleBin.addScrapView(child, -1);</code>将子View加入缓存,可以用来复用<br><code>if (returnedHeight &gt;= maxHeight) {return ...;}</code>如果已经测量的子View的高度大于maxHeight的话就直接return出循环,这样的做法也很好理解,其实是ListView很聪明的一种做法,你可以想想比如说这个屏幕只能画10个Item高度,你有20个Item,那么画出10个就行了,剩下的十个就没必要画了~</p>\n<p>我们现在看下<code>obtainView()</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View obtainView(int position, boolean[] isScrap) &#123;</span><br><span class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, &quot;obtainView&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        isScrap[0] = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Check whether we have a transient state view. Attempt to re-bind the</span><br><span class=\"line\">        // data and discard the view if we fail.</span><br><span class=\"line\">        final View transientView = mRecycler.getTransientStateView(position);</span><br><span class=\"line\">        if (transientView != null) &#123;</span><br><span class=\"line\">            final LayoutParams params = (LayoutParams) transientView.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">            // If the view type hasn&apos;t changed, attempt to re-bind the data.</span><br><span class=\"line\">            if (params.viewType == mAdapter.getItemViewType(position)) &#123;</span><br><span class=\"line\">                final View updatedView = mAdapter.getView(position, transientView, this);</span><br><span class=\"line\"></span><br><span class=\"line\">                // If we failed to re-bind the data, scrap the obtained view.</span><br><span class=\"line\">                if (updatedView != transientView) &#123;</span><br><span class=\"line\">                    setItemViewLayoutParams(updatedView, position);</span><br><span class=\"line\">                    mRecycler.addScrapView(updatedView, position);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // Scrap view implies temporary detachment.</span><br><span class=\"line\">            isScrap[0] = true;</span><br><span class=\"line\">            return transientView;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        final View scrapView = mRecycler.getScrapView(position);</span><br><span class=\"line\">        final View child = mAdapter.getView(position, scrapView, this);</span><br><span class=\"line\">        if (scrapView != null) &#123;</span><br><span class=\"line\">            if (child != scrapView) &#123;</span><br><span class=\"line\">                // Failed to re-bind the data, return scrap to the heap.</span><br><span class=\"line\">                mRecycler.addScrapView(scrapView, position);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                isScrap[0] = true;</span><br><span class=\"line\"></span><br><span class=\"line\">                child.dispatchFinishTemporaryDetach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (mCacheColorHint != 0) &#123;</span><br><span class=\"line\">            child.setDrawingCacheBackgroundColor(mCacheColorHint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) &#123;</span><br><span class=\"line\">            child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setItemViewLayoutParams(child, position);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (AccessibilityManager.getInstance(mContext).isEnabled()) &#123;</span><br><span class=\"line\">            if (mAccessibilityDelegate == null) &#123;</span><br><span class=\"line\">                mAccessibilityDelegate = new ListItemAccessibilityDelegate();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (child.getAccessibilityDelegate() == null) &#123;</span><br><span class=\"line\">                child.setAccessibilityDelegate(mAccessibilityDelegate);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class=\"line\"></span><br><span class=\"line\">        return child;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>得到一个视图,它显示的数据与指定的位置。这叫做当我们已经发现的观点不是可供重用的回收站。剩下的唯一的选择是将一个古老的视图或制作一个新的.(这是方法注释的翻译,大致可以理解他的意思)</p>\n<p>我们应该关注下以下两行代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  final View scrapView = mRecycler.getScrapView(position);</span><br><span class=\"line\">  final View child = mAdapter.getView(position, scrapView, this);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>这两行代码的意思就是说先从缓存里面取出来一个废弃的view,然后将当前的位置跟view作为参数传入到getView()方法中.这个废弃的,然后又作为参数的view就是convertView.</p>\n<p>然后我们总结下刚刚的步骤:<br>A、测量第0项的时候，convertView肯定是null的 View scrapView = mRecycler.getScrapView(position)也是空的,所以我们在log上可以看到.<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fpusdjl9loj30iq00qaaa.jpg\" alt><br>B、第0项测量结束,这个第0项的View就被加入到复用缓存当中了；<br>C、开始测量第1项，这时因为是有第0项的View缓存的，所以getView的参数convertView就是这个第0项的View缓存，然后重复B步骤添加到缓存，只不过这个View缓存还是第0项的View；<br>D、继续测量第2项，重复C。</p>\n<p>所以前面说到onMeasure方法会导致getView调用，而一个View的onMeasure方法调用时机并不是由自身决定，而是由其父视图来决定。ListView放在FrameLayout和RelativeLayout中其onMeasure方法的调用次数是完全不同的。在RelativeLayout中oMeasure()方法调用会翻倍.</p>\n<p>由于onMeasure方法会多次被调用，上述问题中是两次，其实完整的调用顺序是onMeasure - onLayout - onMeasure - onLayout - onDraw。</p>\n<p>所以根据上面的结论我们可以得出,如果LitsView的<strong>android:layout_height属性设置为wrap_content</strong>将会引起<code>getView的多次测量</code></p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>如上bug图…</p>\n<h1 id=\"产生的原因\"><a href=\"#产生的原因\" class=\"headerlink\" title=\"产生的原因\"></a>产生的原因</h1><ul>\n<li><p>ListView的高度设置成了android:layout_height属性设置为wrap_content</p>\n</li>\n<li><p>ListView的父类是RelativeLayout,RelativiLayout布局会使子布局View的Measure周期翻倍,有兴趣可以看下<a href=\"http://blog.csdn.net/megatronkings/article/details/52270461\" target=\"_blank\" rel=\"noopener\">三大基础布局性能比较</a></p>\n</li>\n</ul>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>根据每个Item的高度,然后再根据Adapter的count来动态算高.<br>代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SetHeight &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setListViewHeightBasedOnChildren(ListView listView, android.widget.BaseAdapter adapter) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (adapter==null)&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int totalHeight = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; adapter.getCount(); i++) &#123; // listAdapter.getCount()返回数据项的数目</span><br><span class=\"line\"></span><br><span class=\"line\">            View listItem = adapter.getView(i, null, listView);</span><br><span class=\"line\"></span><br><span class=\"line\">            listItem.measure(0, 0); // 计算子项View 的宽高</span><br><span class=\"line\"></span><br><span class=\"line\">            totalHeight += listItem.getMeasuredHeight(); // 统计所有子项的总高度</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ViewGroup.LayoutParams params = listView.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">        params.height = totalHeight</span><br><span class=\"line\">                + (listView.getDividerHeight() * (adapter.getCount() - 1));</span><br><span class=\"line\"></span><br><span class=\"line\">        // listView.getDividerHeight()获取子项间分隔符占用的高度</span><br><span class=\"line\"></span><br><span class=\"line\">        // params.height最后得到整个ListView完整显示需要的高度</span><br><span class=\"line\"></span><br><span class=\"line\">        listView.setLayoutParams(params);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>xml布局,<strong>注意要将ListView的父类设置为LinearLayout</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_above=&quot;@+id/txt_cancel&quot;</span><br><span class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class=\"line\">        &lt;View</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/y2&quot;</span><br><span class=\"line\">            android:background=&quot;#cccccc&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;ListView</span><br><span class=\"line\">            android:id=&quot;@+id/lv_remain_item&quot;</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;0dp&quot;</span><br><span class=\"line\">            android:cacheColorHint=&quot;#00000000&quot;</span><br><span class=\"line\">            &gt;&lt;/ListView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;View</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/y2&quot;</span><br><span class=\"line\">            android:background=&quot;#cccccc&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:gravity=&quot;center&quot;</span><br><span class=\"line\">        android:orientation=&quot;horizontal&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:id=&quot;@+id/txt_cancel&quot;</span><br><span class=\"line\">            android:layout_width=&quot;fill_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;@dimen/y120&quot;</span><br><span class=\"line\">            android:layout_alignParentBottom=&quot;true&quot;</span><br><span class=\"line\">            android:gravity=&quot;center&quot;</span><br><span class=\"line\">            android:text=&quot;cancel&quot;</span><br><span class=\"line\">            android:textSize=&quot;@dimen/x32&quot; /&gt;</span><br><span class=\"line\">    &lt;/LinearLayout&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后在Listview使用处,调用该方法.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userListDialog.getmListView().setAdapter(scaleUserAdapter);</span><br><span class=\"line\">SetHeight.setListViewHeightBasedOnChildren(userListDialog.getmListView(),scaleUserAdapter);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h1><p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fpusfb8d48j308c0etjsh.jpg\" alt></p>\n<p>getView()调用情况<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fpusgaa5ixj30rs082tl8.jpg\" alt><br>GitHub代码地址:<a href=\"https://github.com/pvphero/ListViewDialog\" target=\"_blank\" rel=\"noopener\">ListViewDialog</a>,喜欢的话欢迎Start</p>"
      },
      {
        "title": "AndroidStudio利用ADB WIFI调试程序",
        "date": "2018-04-13T10:41:18.000Z",
        "_content": "\n# 前言\n手机的USB口被占用,想调试手机简直要崩溃.还好现在AndroidStudio支持WIFI调试,记录下WIFI调试程序的步骤.\n\n<!--more-->\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fqb7808s37j308c0b53zh.jpg)\n\n# 步骤\n\n- 首先打开手机的USB调试选项,并通过USB连接手机\n\n- 打开Terminal,输入`adb tcpip 5555`\n\n如果没有出现错误则会出现`restarting in TCP mode port: 5555`则说明是正确的.\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fqb7dk65n6j30gr0143ym.jpg)\n\n- 再输入`adb connect <手机的WLAN IP>:5555` 如果回显`connected to <手机的WLAN IP>:5555` 则说明连接成功.\n\n- 断开USB连接\n\n我们在Logcat中可以看到调试信息了\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fqb7oy5y4lj30s80ggqa9.jpg)\n\n\n如果要切回USB模式,输入\n```\n$ adb usb\n```\n\n回显`restarting in USB mode`,说明切换成功.\n\n\n",
        "source": "_posts/20180413UseWifiToDebugApp.md",
        "raw": "---\ntitle: AndroidStudio利用ADB WIFI调试程序\ndate: 2018-04-13 18:41:18\ntags:\n- Android\n- Debug\ncategories:\n- Android开发笔记\n---\n\n# 前言\n手机的USB口被占用,想调试手机简直要崩溃.还好现在AndroidStudio支持WIFI调试,记录下WIFI调试程序的步骤.\n\n<!--more-->\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fqb7808s37j308c0b53zh.jpg)\n\n# 步骤\n\n- 首先打开手机的USB调试选项,并通过USB连接手机\n\n- 打开Terminal,输入`adb tcpip 5555`\n\n如果没有出现错误则会出现`restarting in TCP mode port: 5555`则说明是正确的.\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fqb7dk65n6j30gr0143ym.jpg)\n\n- 再输入`adb connect <手机的WLAN IP>:5555` 如果回显`connected to <手机的WLAN IP>:5555` 则说明连接成功.\n\n- 断开USB连接\n\n我们在Logcat中可以看到调试信息了\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fqb7oy5y4lj30s80ggqa9.jpg)\n\n\n如果要切回USB模式,输入\n```\n$ adb usb\n```\n\n回显`restarting in USB mode`,说明切换成功.\n\n\n",
        "slug": "20180413UseWifiToDebugApp",
        "published": 1,
        "updated": "2020-05-19T02:32:04.675Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj19000352j9x3tdqdia",
        "content": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>手机的USB口被占用,想调试手机简直要崩溃.还好现在AndroidStudio支持WIFI调试,记录下WIFI调试程序的步骤.</p>\n<a id=\"more\"></a>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fqb7808s37j308c0b53zh.jpg\" alt></p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li><p>首先打开手机的USB调试选项,并通过USB连接手机</p>\n</li>\n<li><p>打开Terminal,输入<code>adb tcpip 5555</code></p>\n</li>\n</ul>\n<p>如果没有出现错误则会出现<code>restarting in TCP mode port: 5555</code>则说明是正确的.</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fqb7dk65n6j30gr0143ym.jpg\" alt></p>\n<ul>\n<li><p>再输入<code>adb connect &lt;手机的WLAN IP&gt;:5555</code> 如果回显<code>connected to &lt;手机的WLAN IP&gt;:5555</code> 则说明连接成功.</p>\n</li>\n<li><p>断开USB连接</p>\n</li>\n</ul>\n<p>我们在Logcat中可以看到调试信息了<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fqb7oy5y4lj30s80ggqa9.jpg\" alt></p>\n<p>如果要切回USB模式,输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb usb</span><br></pre></td></tr></table></figure></p>\n<p>回显<code>restarting in USB mode</code>,说明切换成功.</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>手机的USB口被占用,想调试手机简直要崩溃.还好现在AndroidStudio支持WIFI调试,记录下WIFI调试程序的步骤.</p>",
        "more": "<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fqb7808s37j308c0b53zh.jpg\" alt></p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ul>\n<li><p>首先打开手机的USB调试选项,并通过USB连接手机</p>\n</li>\n<li><p>打开Terminal,输入<code>adb tcpip 5555</code></p>\n</li>\n</ul>\n<p>如果没有出现错误则会出现<code>restarting in TCP mode port: 5555</code>则说明是正确的.</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fqb7dk65n6j30gr0143ym.jpg\" alt></p>\n<ul>\n<li><p>再输入<code>adb connect &lt;手机的WLAN IP&gt;:5555</code> 如果回显<code>connected to &lt;手机的WLAN IP&gt;:5555</code> 则说明连接成功.</p>\n</li>\n<li><p>断开USB连接</p>\n</li>\n</ul>\n<p>我们在Logcat中可以看到调试信息了<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fqb7oy5y4lj30s80ggqa9.jpg\" alt></p>\n<p>如果要切回USB模式,输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb usb</span><br></pre></td></tr></table></figure></p>\n<p>回显<code>restarting in USB mode</code>,说明切换成功.</p>"
      },
      {
        "title": "Android使用ToolBar+DrawerLayout+NavigationView实现侧滑抽屉效果",
        "date": "2018-07-04T05:18:18.000Z",
        "_content": "\n\n# 学习目的\n- 学会使用`DrawerLayout`\n- 学会使用`NavigationView`  \n- 学会使用ToolBar+DrawerLayout+NavigationView实现侧滑抽屉效果\n- 学会实现Toolbar在顶部以及Toolbar被遮挡的两种效果\n\n<!--more-->\n\n# 效果展示\n侧滑控件我们在开发的过程中经常用到,废话不多说,先上图:\n\n![](http://paynnyvep.bkt.clouddn.com/15312917953318.gif)\n\n\n# 实现过程\n如果要实现上图的展示效果,需要先创建个BaseActivit类,这个类里面包含Toolbar的初始化,然后再创建DrawerLayout相关的Activity\n## 创建BaseActivity及相关XML文件\n- `activity_base.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@color/colorPrimary\"\n            app:contentInsetStartWithNavigation=\"0dp\"\n            android:theme=\"@style/ToolBarStyle\"\n            app:titleTextColor=\"@color/white\">\n\n        </android.support.v7.widget.Toolbar>\n\n        <FrameLayout\n            android:id=\"@+id/frameLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        </FrameLayout>\n    </LinearLayout>\n\n</LinearLayout>  \n```\n\n- `BaseActivity`\n\n\n```java\npackage com.vv.drawerlayout.ui.base;\n\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.FrameLayout;\n\nimport com.vv.drawerlayout.R;\n\nimport butterknife.ButterKnife;\n\n/**\n * @author ShenZhenWei\n * @date 2018/7/4\n */\npublic abstract class BaseActivity extends AppCompatActivity {\n    protected Toolbar mToolbar;\n    protected FrameLayout mContainerLayout;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_base);\n\n        mToolbar = findViewById(R.id.toolbar);\n        mContainerLayout = findViewById(R.id.frameLayout);\n        boolean isToobar = initToolbar();\n        if (isToobar) {\n            setSupportActionBar(mToolbar);\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n            mToolbar.setNavigationOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    onNavigationClick();\n                }\n            });\n        } else {\n            mToolbar.setVisibility(View.GONE);\n        }\n\n        initContent(getLayoutId());\n    }\n\n    private void initContent(int layoutId) {\n        if (layoutId != 0) {\n            View contentView = LayoutInflater.from(this).inflate(layoutId, mContainerLayout, false);\n            mContainerLayout.addView(contentView);\n            ButterKnife.bind(this);\n            initViews();\n        }\n    }\n\n\n    /**\n     * 初始化布局\n     */\n    protected abstract void initViews();\n\n    /**\n     * 获取布局控件\n     *\n     * @return\n     */\n    protected abstract int getLayoutId();\n\n    private void onNavigationClick() {\n        finish();\n    }\n\n    /**\n     * 初始化Toolbar\n     *\n     * @return\n     */\n    protected abstract boolean initToolbar();\n}\n\n```\n\n## 创建DrawerLayout相关的Activity以及相关的XML文件\n\n- `activity_main.xml`  \n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.MainActivity\">\n\n    <android.support.design.widget.NavigationView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_view\"\n        android:layout_gravity=\"left|start\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:menu=\"@menu/navigation_menu\">\n\n    </android.support.design.widget.NavigationView>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n- `header_layout.xml`\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"200dp\"\n    android:gravity=\"center\"\n    android:background=\"@color/_0091ea\"\n    android:orientation=\"vertical\"\n    >\n    <ImageView\n        android:id=\"@+id/img_avatar\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@mipmap/ic_launcher_round\" />\n\n    <TextView\n        android:id=\"@+id/tv_name\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"10dp\"\n        android:textColor=\"@color/white\"\n        android:text=\"\" />\n\n</LinearLayout>\n```\n\n- `navigation_menu.xml`\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <item\n        android:id=\"@+id/menu_favorite_article\"\n        android:icon=\"@drawable/ic_favorite_gray_24dp\"\n        android:title=\"@string/favorite_article\"\n        app:showAsAction=\"ifRoom\" />\n    <item\n        android:id=\"@+id/menu_about\"\n        android:icon=\"@drawable/ic_about_us_gray_24dp\"\n        android:title=\"@string/about_us\"\n        app:showAsAction=\"ifRoom\" />\n    <item\n        android:id=\"@+id/menu_exit\"\n        android:icon=\"@drawable/ic_exit_to_app_gray_24dp\"\n        android:title=\"@string/exit\"\n        app:showAsAction=\"ifRoom\"\n        />\n\n</menu>\n```\n\n- 如果使用Toolbar,那么需要把系统的主题换成没有ActionBar的主题,修改`style.xml`文件\n\n\n```xml\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme.Base\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n    <style name=\"AppTheme\" parent=\"AppTheme.Base\"></style>\n\n\n    <style name=\"ToolBarStyle\" parent=\"@style/BaseToolBarStyle\"></style>\n\n</resources>\n\n```\n\n- `MainActivity`实现\n\n\n```java\npackage com.vv.drawerlayout.ui;\n\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.NavigationView;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.view.MenuItem;\n\nimport com.vv.drawerlayout.R;\nimport com.vv.drawerlayout.ui.base.BaseActivity;\n\nimport butterknife.Bind;\n\n/**\n * @author ShenZhenWei\n */\npublic class MainActivity extends BaseActivity {\n\n    @Bind(R.id.navigation_view)\n    NavigationView mNavigationView;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ActionBarDrawerToggle mToggle = new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,\n                R.string.navigation_drawer_open,\n                R.string.navigation_drawer_close);\n        mToggle.syncState();\n        mDrawerLayout.addDrawerListener(mToggle);\n        mNavigationView.setItemIconTintList(null);\n        mNavigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                return false;\n            }\n        });\n    }\n\n    @Override\n    protected void initViews() {\n\n    }\n\n    @Override\n    protected int getLayoutId() {\n        return R.layout.activity_main;\n    }\n\n    @Override\n    protected boolean initToolbar() {\n        mToolbar.setTitle(R.string.home);\n        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);\n        return true;\n    }\n\n\n}\n\n```\n\n- 运行查看效果\n\n# 优化\n\n但是现在我们发现侧边栏是没有选中状态的,如效果图所示,\n\n\n![15307558160904_2](http://paynnyvep.bkt.clouddn.com/15307558160904_2.gif)\n\n我们怎么才能是左边的导航栏有选择状态呢?\n\n## 给左边的导航栏加上选中效果\n\n* 首先在布局文件中,`NavigationView`的控件的`meun`中注明一个behavior \n\n\n```xml\n    <group\n        android:checkableBehavior=\"single\">\n        <item\n            android:title=\"@string/home\">\n\n        </item>\n    </group>\n```\n\n```xml\n    android:checkableBehavior=\"single\"\n```\n\n**表示每一项都是单选,如果不标明的话,NavigationView不会有选中效果.**\n\n* 在Java文件中增加监听器\n\n```java\nmNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);\n```\n\n```java\nNavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = new NavigationView.OnNavigationItemSelectedListener() {\n        @Override\n        public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n            switch (item.getItemId()) {\n                case R.id.menu_favorite_article:\n                    break;\n                case R.id.menu_about:\n                    break;\n                case R.id.menu_exit:\n                    break;\n                case R.id.menu_home:\n                    break;\n                default:\n                    break;\n            }\n            //关闭侧边栏\n            mDrawerLayout.closeDrawers();\n            return true;\n        }\n    };\n```\n\n* 运行效果\n\n![device-2018-07-05-103705](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-103705.png)![15307584630889_2](http://paynnyvep.bkt.clouddn.com/15307584630889_2-1.gif)\n\n##  改变图标的颜色\n\n我们给刚刚增加的`NavigationView`的控件的`meun`的Item增加一个`icon`\n\n```xml\n    <group\n        android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/menu_home\"\n            android:icon=\"@mipmap/ic_launcher\"\n            android:title=\"@string/home\">\n\n        </item>\n    </group>\n```\n\nok看下现在的效果:\n\n![device-2018-07-05-105127](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-105127-1.png)\n\n5我们发现`首页` 旁边的图标变成了黑色.这并不是我们想要的.\n\n我们怎么去更改Icon的颜色呢,有两种方法:\n\n* 在NavigationView的布局xml文件里增加`app:itemIconTint=\"@color/xxx\"`属性,可以设置Icon的图片颜色为统一的一种颜色\n\n`activity_main.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.MainActivity\">\n\n    <android.support.design.widget.NavigationView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_view\"\n        android:layout_gravity=\"left|start\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:menu=\"@menu/navigation_menu\"\n        app:itemIconTint=\"@color/_0091ea\">\n\n    </android.support.design.widget.NavigationView>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n运行效果如下:\n\n![device-2018-07-05-110042](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110042.png)\n\n我们可以看到所有的Icon的图片颜色全部换成了统一的蓝色.但是首页旁边的Icon仍不是我们想要的图标颜色.这就得需要第二种方法了.\n\n* 我们如果想让Icon显示本省的颜色,就得在java文件里面调用以下方法:\n\n```java\nmNavigationView.setItemIconTintList(null);\n```\n\n`MainActivity`\n\n```java\npackage com.vv.drawerlayout.ui;\n\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.NavigationView;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.view.MenuItem;\n\nimport com.vv.drawerlayout.R;\nimport com.vv.drawerlayout.ui.base.BaseActivity;\n\nimport butterknife.Bind;\n\n/**\n * @author ShenZhenWei\n */\npublic class MainActivity extends BaseActivity {\n\n    @Bind(R.id.navigation_view)\n    NavigationView mNavigationView;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ActionBarDrawerToggle mToggle = new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,\n                R.string.navigation_drawer_open,\n                R.string.navigation_drawer_close);\n        mToggle.syncState();\n        mDrawerLayout.addDrawerListener(mToggle);\n        mNavigationView.setItemIconTintList(null);\n        mNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);\n    }\n\n    @Override\n    protected void initViews() {\n\n    }\n\n    @Override\n    protected int getLayoutId() {\n        return R.layout.activity_main;\n    }\n\n    @Override\n    protected boolean initToolbar() {\n        mToolbar.setTitle(R.string.home);\n        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);\n        return true;\n    }\n\n\n    NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = new NavigationView.OnNavigationItemSelectedListener() {\n        @Override\n        public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n            switch (item.getItemId()) {\n                case R.id.menu_favorite_article:\n                    break;\n                case R.id.menu_about:\n                    break;\n                case R.id.menu_exit:\n                    break;\n                case R.id.menu_home:\n                    break;\n                default:\n                    break;\n            }\n            //关闭侧边栏\n            mDrawerLayout.closeDrawers();\n            return true;\n        }\n    };\n\n}\n\n```\n\n运行效果:\n\n![device-2018-07-05-110546](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110546.png)\n\n可以看到,这个效果就是我们想要的~\n\n## 改变Item的背景,改变Item的TextColor\n\n* 如果要改变Item的背景,我们需要用到`NavigationView`的`.app:itemBackground=\"\"`方法\n* 如果要改变Item的TextColor,我们需要用到`NavigationView`的`app:itemTextColor=\"\"`方法\n\n`activity_main.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.MainActivity\">\n\n    <android.support.design.widget.NavigationView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_view\"\n        android:layout_gravity=\"left|start\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:menu=\"@menu/navigation_menu\"\n        app:itemBackground=\"@color/_0091ea\"\n        app:itemTextColor=\"@color/white\"\n        app:itemIconTint=\"@color/_0091ea\">\n\n    </android.support.design.widget.NavigationView>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n效果如下:\n\n![device-2018-07-05-111309](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111309.png)\n\n\n## 给Item之间增加分割线\n\n我们只需要在以上基础上增加一个group_id即可.即:讲menu先放入到group组中,然后再给这个group赋上id的值,就能实现分割线效果.\n\n`navigation_menu.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    >\n\n    <item\n        android:id=\"@+id/menu_favorite_article\"\n        android:icon=\"@drawable/ic_favorite_gray_24dp\"\n        android:title=\"@string/favorite_article\"\n        app:showAsAction=\"ifRoom\"\n        app:itemIconTint=\"@color/_0091ea\"/>\n    <item\n        android:id=\"@+id/menu_about\"\n        android:icon=\"@drawable/ic_about_us_gray_24dp\"\n        android:title=\"@string/about_us\"\n        app:showAsAction=\"ifRoom\" />\n    <item\n        android:id=\"@+id/menu_exit\"\n        android:icon=\"@drawable/ic_exit_to_app_gray_24dp\"\n        android:title=\"@string/exit\"\n        app:showAsAction=\"ifRoom\"\n        />\n\n    <group\n        android:id=\"@+id/group_home\"\n        android:checkableBehavior=\"single\"\n        >\n        <item\n            android:id=\"@+id/menu_home\"\n            android:icon=\"@mipmap/ic_launcher_round\"\n\n            android:title=\"@string/home\">\n\n        </item>\n    </group>\n</menu>\n```\n\n运行效果\n\n![device-2018-07-05-111851](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111851.png)\n\n\n## 怎么实现Toolbar被遮挡的侧滑抽屉效果\n我们常见的应用,像网易云音乐,QQ等都是Toolbar被遮挡的侧滑效果.\n\n![device-2018-07-05-113031-1](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113031-1.png)![device-2018-07-05-113158-1](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113158-1.png)\n\n我们实现这种效果就得让`DrawerLayout`包含在`Toolbar`外面\n\n`activity_drawer_layout.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <android.support.design.widget.AppBarLayout\n            android:id=\"@+id/appBarLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                app:popupTheme=\"@style/AppTheme.PopupOverlay\" />\n\n        </android.support.design.widget.AppBarLayout>\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:text=\"@string/home\"\n                android:gravity=\"center\"/>\n        </LinearLayout>\n\n    </LinearLayout>\n\n\n    <android.support.design.widget.NavigationView\n        android:id=\"@+id/navigation_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        android:fitsSystemWindows=\"true\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:itemIconTint=\"@color/colorAccent\"\n        app:menu=\"@menu/navigation_menu\">\n\n    </android.support.design.widget.NavigationView>\n</android.support.v4.widget.DrawerLayout>\n```\n\n\n```java\npackage com.vv.drawerlayout.ui;\n\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.NavigationView;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.MenuItem;\n\nimport com.vv.drawerlayout.R;\n\nimport butterknife.Bind;\nimport butterknife.ButterKnife;\n\n/**\n * @author ShenZhenWei\n * @date 2018/7/5\n */\npublic class DrawerLayoutActivity extends AppCompatActivity {\n    @Bind(R.id.toolbar)\n    Toolbar mToolbar;\n    @Bind(R.id.navigation_view)\n    NavigationView mNavigationView;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n\n    private ActionBarDrawerToggle mToggle;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_drawer_layout);\n        ButterKnife.bind(this);\n        //设置Toolbar\n        setToolbar();\n\n        //设置DrawerToggle 开关\n        setDrawerToggle();\n\n        //设置监听器\n        setListener();\n    }\n\n    private void setListener() {\n        mNavigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        });\n    }\n\n    private void setDrawerToggle() {\n        mToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,\n                R.string.navigation_drawer_open,\n                R.string.navigation_drawer_close);\n        mDrawerLayout.addDrawerListener(mToggle);\n        //同步DrawerLayout的状态\n        mToggle.syncState();\n    }\n\n    private void setToolbar() {\n        setSupportActionBar(mToolbar);\n        // 显示Home的图标\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n    }\n}\n\n```\n\n**注意:**\n`setSupportActionBar(mToolbar);`一定要写在`mDrawerLayout.addDrawerListener(mToggle);`\n之前,否则将无法响应Home页面上的Icon点击事件.\n\n运行效果:\n\n![15308425514883_2](http://paynnyvep.bkt.clouddn.com/15308425514883_2.gif)\n\n# 代码\n\n为了方便,代码已经上传[GitHub](https://github.com/pvphero/DrawerLayoutDemo),敬请下载~\n\n",
        "source": "_posts/20180704AndroidUseDrawerLayout.md",
        "raw": "---\ntitle: Android使用ToolBar+DrawerLayout+NavigationView实现侧滑抽屉效果\ndate: 2018-07-04 13:18:18\ntags:\n- Android\n- UI\ncategories:\n- Android开发笔记\n---\n\n\n# 学习目的\n- 学会使用`DrawerLayout`\n- 学会使用`NavigationView`  \n- 学会使用ToolBar+DrawerLayout+NavigationView实现侧滑抽屉效果\n- 学会实现Toolbar在顶部以及Toolbar被遮挡的两种效果\n\n<!--more-->\n\n# 效果展示\n侧滑控件我们在开发的过程中经常用到,废话不多说,先上图:\n\n![](http://paynnyvep.bkt.clouddn.com/15312917953318.gif)\n\n\n# 实现过程\n如果要实现上图的展示效果,需要先创建个BaseActivit类,这个类里面包含Toolbar的初始化,然后再创建DrawerLayout相关的Activity\n## 创建BaseActivity及相关XML文件\n- `activity_base.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@color/colorPrimary\"\n            app:contentInsetStartWithNavigation=\"0dp\"\n            android:theme=\"@style/ToolBarStyle\"\n            app:titleTextColor=\"@color/white\">\n\n        </android.support.v7.widget.Toolbar>\n\n        <FrameLayout\n            android:id=\"@+id/frameLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        </FrameLayout>\n    </LinearLayout>\n\n</LinearLayout>  \n```\n\n- `BaseActivity`\n\n\n```java\npackage com.vv.drawerlayout.ui.base;\n\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.FrameLayout;\n\nimport com.vv.drawerlayout.R;\n\nimport butterknife.ButterKnife;\n\n/**\n * @author ShenZhenWei\n * @date 2018/7/4\n */\npublic abstract class BaseActivity extends AppCompatActivity {\n    protected Toolbar mToolbar;\n    protected FrameLayout mContainerLayout;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_base);\n\n        mToolbar = findViewById(R.id.toolbar);\n        mContainerLayout = findViewById(R.id.frameLayout);\n        boolean isToobar = initToolbar();\n        if (isToobar) {\n            setSupportActionBar(mToolbar);\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n            mToolbar.setNavigationOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    onNavigationClick();\n                }\n            });\n        } else {\n            mToolbar.setVisibility(View.GONE);\n        }\n\n        initContent(getLayoutId());\n    }\n\n    private void initContent(int layoutId) {\n        if (layoutId != 0) {\n            View contentView = LayoutInflater.from(this).inflate(layoutId, mContainerLayout, false);\n            mContainerLayout.addView(contentView);\n            ButterKnife.bind(this);\n            initViews();\n        }\n    }\n\n\n    /**\n     * 初始化布局\n     */\n    protected abstract void initViews();\n\n    /**\n     * 获取布局控件\n     *\n     * @return\n     */\n    protected abstract int getLayoutId();\n\n    private void onNavigationClick() {\n        finish();\n    }\n\n    /**\n     * 初始化Toolbar\n     *\n     * @return\n     */\n    protected abstract boolean initToolbar();\n}\n\n```\n\n## 创建DrawerLayout相关的Activity以及相关的XML文件\n\n- `activity_main.xml`  \n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.MainActivity\">\n\n    <android.support.design.widget.NavigationView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_view\"\n        android:layout_gravity=\"left|start\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:menu=\"@menu/navigation_menu\">\n\n    </android.support.design.widget.NavigationView>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n- `header_layout.xml`\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"200dp\"\n    android:gravity=\"center\"\n    android:background=\"@color/_0091ea\"\n    android:orientation=\"vertical\"\n    >\n    <ImageView\n        android:id=\"@+id/img_avatar\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:src=\"@mipmap/ic_launcher_round\" />\n\n    <TextView\n        android:id=\"@+id/tv_name\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"10dp\"\n        android:textColor=\"@color/white\"\n        android:text=\"\" />\n\n</LinearLayout>\n```\n\n- `navigation_menu.xml`\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <item\n        android:id=\"@+id/menu_favorite_article\"\n        android:icon=\"@drawable/ic_favorite_gray_24dp\"\n        android:title=\"@string/favorite_article\"\n        app:showAsAction=\"ifRoom\" />\n    <item\n        android:id=\"@+id/menu_about\"\n        android:icon=\"@drawable/ic_about_us_gray_24dp\"\n        android:title=\"@string/about_us\"\n        app:showAsAction=\"ifRoom\" />\n    <item\n        android:id=\"@+id/menu_exit\"\n        android:icon=\"@drawable/ic_exit_to_app_gray_24dp\"\n        android:title=\"@string/exit\"\n        app:showAsAction=\"ifRoom\"\n        />\n\n</menu>\n```\n\n- 如果使用Toolbar,那么需要把系统的主题换成没有ActionBar的主题,修改`style.xml`文件\n\n\n```xml\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme.Base\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n    <style name=\"AppTheme\" parent=\"AppTheme.Base\"></style>\n\n\n    <style name=\"ToolBarStyle\" parent=\"@style/BaseToolBarStyle\"></style>\n\n</resources>\n\n```\n\n- `MainActivity`实现\n\n\n```java\npackage com.vv.drawerlayout.ui;\n\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.NavigationView;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.view.MenuItem;\n\nimport com.vv.drawerlayout.R;\nimport com.vv.drawerlayout.ui.base.BaseActivity;\n\nimport butterknife.Bind;\n\n/**\n * @author ShenZhenWei\n */\npublic class MainActivity extends BaseActivity {\n\n    @Bind(R.id.navigation_view)\n    NavigationView mNavigationView;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ActionBarDrawerToggle mToggle = new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,\n                R.string.navigation_drawer_open,\n                R.string.navigation_drawer_close);\n        mToggle.syncState();\n        mDrawerLayout.addDrawerListener(mToggle);\n        mNavigationView.setItemIconTintList(null);\n        mNavigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                return false;\n            }\n        });\n    }\n\n    @Override\n    protected void initViews() {\n\n    }\n\n    @Override\n    protected int getLayoutId() {\n        return R.layout.activity_main;\n    }\n\n    @Override\n    protected boolean initToolbar() {\n        mToolbar.setTitle(R.string.home);\n        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);\n        return true;\n    }\n\n\n}\n\n```\n\n- 运行查看效果\n\n# 优化\n\n但是现在我们发现侧边栏是没有选中状态的,如效果图所示,\n\n\n![15307558160904_2](http://paynnyvep.bkt.clouddn.com/15307558160904_2.gif)\n\n我们怎么才能是左边的导航栏有选择状态呢?\n\n## 给左边的导航栏加上选中效果\n\n* 首先在布局文件中,`NavigationView`的控件的`meun`中注明一个behavior \n\n\n```xml\n    <group\n        android:checkableBehavior=\"single\">\n        <item\n            android:title=\"@string/home\">\n\n        </item>\n    </group>\n```\n\n```xml\n    android:checkableBehavior=\"single\"\n```\n\n**表示每一项都是单选,如果不标明的话,NavigationView不会有选中效果.**\n\n* 在Java文件中增加监听器\n\n```java\nmNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);\n```\n\n```java\nNavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = new NavigationView.OnNavigationItemSelectedListener() {\n        @Override\n        public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n            switch (item.getItemId()) {\n                case R.id.menu_favorite_article:\n                    break;\n                case R.id.menu_about:\n                    break;\n                case R.id.menu_exit:\n                    break;\n                case R.id.menu_home:\n                    break;\n                default:\n                    break;\n            }\n            //关闭侧边栏\n            mDrawerLayout.closeDrawers();\n            return true;\n        }\n    };\n```\n\n* 运行效果\n\n![device-2018-07-05-103705](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-103705.png)![15307584630889_2](http://paynnyvep.bkt.clouddn.com/15307584630889_2-1.gif)\n\n##  改变图标的颜色\n\n我们给刚刚增加的`NavigationView`的控件的`meun`的Item增加一个`icon`\n\n```xml\n    <group\n        android:checkableBehavior=\"single\">\n        <item\n            android:id=\"@+id/menu_home\"\n            android:icon=\"@mipmap/ic_launcher\"\n            android:title=\"@string/home\">\n\n        </item>\n    </group>\n```\n\nok看下现在的效果:\n\n![device-2018-07-05-105127](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-105127-1.png)\n\n5我们发现`首页` 旁边的图标变成了黑色.这并不是我们想要的.\n\n我们怎么去更改Icon的颜色呢,有两种方法:\n\n* 在NavigationView的布局xml文件里增加`app:itemIconTint=\"@color/xxx\"`属性,可以设置Icon的图片颜色为统一的一种颜色\n\n`activity_main.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.MainActivity\">\n\n    <android.support.design.widget.NavigationView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_view\"\n        android:layout_gravity=\"left|start\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:menu=\"@menu/navigation_menu\"\n        app:itemIconTint=\"@color/_0091ea\">\n\n    </android.support.design.widget.NavigationView>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n运行效果如下:\n\n![device-2018-07-05-110042](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110042.png)\n\n我们可以看到所有的Icon的图片颜色全部换成了统一的蓝色.但是首页旁边的Icon仍不是我们想要的图标颜色.这就得需要第二种方法了.\n\n* 我们如果想让Icon显示本省的颜色,就得在java文件里面调用以下方法:\n\n```java\nmNavigationView.setItemIconTintList(null);\n```\n\n`MainActivity`\n\n```java\npackage com.vv.drawerlayout.ui;\n\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.NavigationView;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.view.MenuItem;\n\nimport com.vv.drawerlayout.R;\nimport com.vv.drawerlayout.ui.base.BaseActivity;\n\nimport butterknife.Bind;\n\n/**\n * @author ShenZhenWei\n */\npublic class MainActivity extends BaseActivity {\n\n    @Bind(R.id.navigation_view)\n    NavigationView mNavigationView;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ActionBarDrawerToggle mToggle = new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,\n                R.string.navigation_drawer_open,\n                R.string.navigation_drawer_close);\n        mToggle.syncState();\n        mDrawerLayout.addDrawerListener(mToggle);\n        mNavigationView.setItemIconTintList(null);\n        mNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);\n    }\n\n    @Override\n    protected void initViews() {\n\n    }\n\n    @Override\n    protected int getLayoutId() {\n        return R.layout.activity_main;\n    }\n\n    @Override\n    protected boolean initToolbar() {\n        mToolbar.setTitle(R.string.home);\n        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);\n        return true;\n    }\n\n\n    NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = new NavigationView.OnNavigationItemSelectedListener() {\n        @Override\n        public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n            switch (item.getItemId()) {\n                case R.id.menu_favorite_article:\n                    break;\n                case R.id.menu_about:\n                    break;\n                case R.id.menu_exit:\n                    break;\n                case R.id.menu_home:\n                    break;\n                default:\n                    break;\n            }\n            //关闭侧边栏\n            mDrawerLayout.closeDrawers();\n            return true;\n        }\n    };\n\n}\n\n```\n\n运行效果:\n\n![device-2018-07-05-110546](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110546.png)\n\n可以看到,这个效果就是我们想要的~\n\n## 改变Item的背景,改变Item的TextColor\n\n* 如果要改变Item的背景,我们需要用到`NavigationView`的`.app:itemBackground=\"\"`方法\n* 如果要改变Item的TextColor,我们需要用到`NavigationView`的`app:itemTextColor=\"\"`方法\n\n`activity_main.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.MainActivity\">\n\n    <android.support.design.widget.NavigationView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_view\"\n        android:layout_gravity=\"left|start\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:menu=\"@menu/navigation_menu\"\n        app:itemBackground=\"@color/_0091ea\"\n        app:itemTextColor=\"@color/white\"\n        app:itemIconTint=\"@color/_0091ea\">\n\n    </android.support.design.widget.NavigationView>\n\n</android.support.v4.widget.DrawerLayout>\n```\n\n效果如下:\n\n![device-2018-07-05-111309](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111309.png)\n\n\n## 给Item之间增加分割线\n\n我们只需要在以上基础上增加一个group_id即可.即:讲menu先放入到group组中,然后再给这个group赋上id的值,就能实现分割线效果.\n\n`navigation_menu.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    >\n\n    <item\n        android:id=\"@+id/menu_favorite_article\"\n        android:icon=\"@drawable/ic_favorite_gray_24dp\"\n        android:title=\"@string/favorite_article\"\n        app:showAsAction=\"ifRoom\"\n        app:itemIconTint=\"@color/_0091ea\"/>\n    <item\n        android:id=\"@+id/menu_about\"\n        android:icon=\"@drawable/ic_about_us_gray_24dp\"\n        android:title=\"@string/about_us\"\n        app:showAsAction=\"ifRoom\" />\n    <item\n        android:id=\"@+id/menu_exit\"\n        android:icon=\"@drawable/ic_exit_to_app_gray_24dp\"\n        android:title=\"@string/exit\"\n        app:showAsAction=\"ifRoom\"\n        />\n\n    <group\n        android:id=\"@+id/group_home\"\n        android:checkableBehavior=\"single\"\n        >\n        <item\n            android:id=\"@+id/menu_home\"\n            android:icon=\"@mipmap/ic_launcher_round\"\n\n            android:title=\"@string/home\">\n\n        </item>\n    </group>\n</menu>\n```\n\n运行效果\n\n![device-2018-07-05-111851](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111851.png)\n\n\n## 怎么实现Toolbar被遮挡的侧滑抽屉效果\n我们常见的应用,像网易云音乐,QQ等都是Toolbar被遮挡的侧滑效果.\n\n![device-2018-07-05-113031-1](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113031-1.png)![device-2018-07-05-113158-1](http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113158-1.png)\n\n我们实现这种效果就得让`DrawerLayout`包含在`Toolbar`外面\n\n`activity_drawer_layout.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <android.support.design.widget.AppBarLayout\n            android:id=\"@+id/appBarLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                app:popupTheme=\"@style/AppTheme.PopupOverlay\" />\n\n        </android.support.design.widget.AppBarLayout>\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:text=\"@string/home\"\n                android:gravity=\"center\"/>\n        </LinearLayout>\n\n    </LinearLayout>\n\n\n    <android.support.design.widget.NavigationView\n        android:id=\"@+id/navigation_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        android:fitsSystemWindows=\"true\"\n        app:headerLayout=\"@layout/header_layout\"\n        app:itemIconTint=\"@color/colorAccent\"\n        app:menu=\"@menu/navigation_menu\">\n\n    </android.support.design.widget.NavigationView>\n</android.support.v4.widget.DrawerLayout>\n```\n\n\n```java\npackage com.vv.drawerlayout.ui;\n\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.design.widget.NavigationView;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.MenuItem;\n\nimport com.vv.drawerlayout.R;\n\nimport butterknife.Bind;\nimport butterknife.ButterKnife;\n\n/**\n * @author ShenZhenWei\n * @date 2018/7/5\n */\npublic class DrawerLayoutActivity extends AppCompatActivity {\n    @Bind(R.id.toolbar)\n    Toolbar mToolbar;\n    @Bind(R.id.navigation_view)\n    NavigationView mNavigationView;\n    @Bind(R.id.drawer_layout)\n    DrawerLayout mDrawerLayout;\n\n    private ActionBarDrawerToggle mToggle;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_drawer_layout);\n        ButterKnife.bind(this);\n        //设置Toolbar\n        setToolbar();\n\n        //设置DrawerToggle 开关\n        setDrawerToggle();\n\n        //设置监听器\n        setListener();\n    }\n\n    private void setListener() {\n        mNavigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                mDrawerLayout.closeDrawers();\n                return true;\n            }\n        });\n    }\n\n    private void setDrawerToggle() {\n        mToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,\n                R.string.navigation_drawer_open,\n                R.string.navigation_drawer_close);\n        mDrawerLayout.addDrawerListener(mToggle);\n        //同步DrawerLayout的状态\n        mToggle.syncState();\n    }\n\n    private void setToolbar() {\n        setSupportActionBar(mToolbar);\n        // 显示Home的图标\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n    }\n}\n\n```\n\n**注意:**\n`setSupportActionBar(mToolbar);`一定要写在`mDrawerLayout.addDrawerListener(mToggle);`\n之前,否则将无法响应Home页面上的Icon点击事件.\n\n运行效果:\n\n![15308425514883_2](http://paynnyvep.bkt.clouddn.com/15308425514883_2.gif)\n\n# 代码\n\n为了方便,代码已经上传[GitHub](https://github.com/pvphero/DrawerLayoutDemo),敬请下载~\n\n",
        "slug": "20180704AndroidUseDrawerLayout",
        "published": 1,
        "updated": "2020-05-19T02:32:04.675Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1a000452j90htmmb85",
        "content": "<h1 id=\"学习目的\"><a href=\"#学习目的\" class=\"headerlink\" title=\"学习目的\"></a>学习目的</h1><ul>\n<li>学会使用<code>DrawerLayout</code></li>\n<li>学会使用<code>NavigationView</code>  </li>\n<li>学会使用ToolBar+DrawerLayout+NavigationView实现侧滑抽屉效果</li>\n<li>学会实现Toolbar在顶部以及Toolbar被遮挡的两种效果</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p>侧滑控件我们在开发的过程中经常用到,废话不多说,先上图:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/15312917953318.gif\" alt></p>\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><p>如果要实现上图的展示效果,需要先创建个BaseActivit类,这个类里面包含Toolbar的初始化,然后再创建DrawerLayout相关的Activity</p>\n<h2 id=\"创建BaseActivity及相关XML文件\"><a href=\"#创建BaseActivity及相关XML文件\" class=\"headerlink\" title=\"创建BaseActivity及相关XML文件\"></a>创建BaseActivity及相关XML文件</h2><ul>\n<li><code>activity_base.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:contentInsetStartWithNavigation</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ToolBarStyle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:titleTextColor</span>=<span class=\"string\">\"@color/white\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/frameLayout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>BaseActivity</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui.base;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.FrameLayout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.ButterKnife;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Toolbar mToolbar;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> FrameLayout mContainerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_base);</span><br><span class=\"line\"></span><br><span class=\"line\">        mToolbar = findViewById(R.id.toolbar);</span><br><span class=\"line\">        mContainerLayout = findViewById(R.id.frameLayout);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isToobar = initToolbar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isToobar) &#123;</span><br><span class=\"line\">            setSupportActionBar(mToolbar);</span><br><span class=\"line\">            getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            mToolbar.setNavigationOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                    onNavigationClick();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mToolbar.setVisibility(View.GONE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        initContent(getLayoutId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initContent</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (layoutId != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            View contentView = LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(layoutId, mContainerLayout, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            mContainerLayout.addView(contentView);</span><br><span class=\"line\">            ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            initViews();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化布局</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取布局控件</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onNavigationClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">initToolbar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建DrawerLayout相关的Activity以及相关的XML文件\"><a href=\"#创建DrawerLayout相关的Activity以及相关的XML文件\" class=\"headerlink\" title=\"创建DrawerLayout相关的Activity以及相关的XML文件\"></a>创建DrawerLayout相关的Activity以及相关的XML文件</h2><ul>\n<li><code>activity_main.xml</code>  </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".ui.MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left|start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>header_layout.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/_0091ea\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/img_avatar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@mipmap/ic_launcher_round\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tv_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>navigation_menu.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_favorite_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_about\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_about_us_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/about_us\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_exit_to_app_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果使用Toolbar,那么需要把系统的主题换成没有ActionBar的主题,修改<code>style.xml</code>文件</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme.Base\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"AppTheme.Base\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ToolBarStyle\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@style/BaseToolBarStyle\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>MainActivity</code>实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.NavigationView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.ui.base.BaseActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.Bind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation_view)</span><br><span class=\"line\">    NavigationView mNavigationView;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</span><br><span class=\"line\">    DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        ActionBarDrawerToggle mToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span>,mDrawerLayout,mToolbar,</span><br><span class=\"line\">                R.string.navigation_drawer_open,</span><br><span class=\"line\">                R.string.navigation_drawer_close);</span><br><span class=\"line\">        mToggle.syncState();</span><br><span class=\"line\">        mDrawerLayout.addDrawerListener(mToggle);</span><br><span class=\"line\">        mNavigationView.setItemIconTintList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        mNavigationView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.activity_main;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">initToolbar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mToolbar.setTitle(R.string.home);</span><br><span class=\"line\">        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行查看效果</li>\n</ul>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><p>但是现在我们发现侧边栏是没有选中状态的,如效果图所示,</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/15307558160904_2.gif\" alt=\"15307558160904_2\"></p>\n<p>我们怎么才能是左边的导航栏有选择状态呢?</p>\n<h2 id=\"给左边的导航栏加上选中效果\"><a href=\"#给左边的导航栏加上选中效果\" class=\"headerlink\" title=\"给左边的导航栏加上选中效果\"></a>给左边的导航栏加上选中效果</h2><ul>\n<li>首先在布局文件中,<code>NavigationView</code>的控件的<code>meun</code>中注明一个behavior </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">group</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:checkableBehavior=\"single\"</span><br></pre></td></tr></table></figure>\n<p><strong>表示每一项都是单选,如果不标明的话,NavigationView不会有选中效果.</strong></p>\n<ul>\n<li>在Java文件中增加监听器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_favorite_article:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_about:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_exit:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_home:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//关闭侧边栏</span></span><br><span class=\"line\">            mDrawerLayout.closeDrawers();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行效果</li>\n</ul>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-103705.png\" alt=\"device-2018-07-05-103705\"><img src=\"http://paynnyvep.bkt.clouddn.com/15307584630889_2-1.gif\" alt=\"15307584630889_2\"></p>\n<h2 id=\"改变图标的颜色\"><a href=\"#改变图标的颜色\" class=\"headerlink\" title=\"改变图标的颜色\"></a>改变图标的颜色</h2><p>我们给刚刚增加的<code>NavigationView</code>的控件的<code>meun</code>的Item增加一个<code>icon</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">group</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>ok看下现在的效果:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-105127-1.png\" alt=\"device-2018-07-05-105127\"></p>\n<p>5我们发现<code>首页</code> 旁边的图标变成了黑色.这并不是我们想要的.</p>\n<p>我们怎么去更改Icon的颜色呢,有两种方法:</p>\n<ul>\n<li>在NavigationView的布局xml文件里增加<code>app:itemIconTint=&quot;@color/xxx&quot;</code>属性,可以设置Icon的图片颜色为统一的一种颜色</li>\n</ul>\n<p><code>activity_main.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".ui.MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left|start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/_0091ea\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行效果如下:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110042.png\" alt=\"device-2018-07-05-110042\"></p>\n<p>我们可以看到所有的Icon的图片颜色全部换成了统一的蓝色.但是首页旁边的Icon仍不是我们想要的图标颜色.这就得需要第二种方法了.</p>\n<ul>\n<li>我们如果想让Icon显示本省的颜色,就得在java文件里面调用以下方法:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mNavigationView.setItemIconTintList(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n<p><code>MainActivity</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.NavigationView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.ui.base.BaseActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.Bind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation_view)</span><br><span class=\"line\">    NavigationView mNavigationView;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</span><br><span class=\"line\">    DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        ActionBarDrawerToggle mToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span>,mDrawerLayout,mToolbar,</span><br><span class=\"line\">                R.string.navigation_drawer_open,</span><br><span class=\"line\">                R.string.navigation_drawer_close);</span><br><span class=\"line\">        mToggle.syncState();</span><br><span class=\"line\">        mDrawerLayout.addDrawerListener(mToggle);</span><br><span class=\"line\">        mNavigationView.setItemIconTintList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        mNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.activity_main;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">initToolbar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mToolbar.setTitle(R.string.home);</span><br><span class=\"line\">        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_favorite_article:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_about:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_exit:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_home:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//关闭侧边栏</span></span><br><span class=\"line\">            mDrawerLayout.closeDrawers();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行效果:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110546.png\" alt=\"device-2018-07-05-110546\"></p>\n<p>可以看到,这个效果就是我们想要的~</p>\n<h2 id=\"改变Item的背景-改变Item的TextColor\"><a href=\"#改变Item的背景-改变Item的TextColor\" class=\"headerlink\" title=\"改变Item的背景,改变Item的TextColor\"></a>改变Item的背景,改变Item的TextColor</h2><ul>\n<li>如果要改变Item的背景,我们需要用到<code>NavigationView</code>的<code>.app:itemBackground=&quot;&quot;</code>方法</li>\n<li>如果要改变Item的TextColor,我们需要用到<code>NavigationView</code>的<code>app:itemTextColor=&quot;&quot;</code>方法</li>\n</ul>\n<p><code>activity_main.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".ui.MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left|start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemBackground</span>=<span class=\"string\">\"@color/_0091ea\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemTextColor</span>=<span class=\"string\">\"@color/white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/_0091ea\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111309.png\" alt=\"device-2018-07-05-111309\"></p>\n<h2 id=\"给Item之间增加分割线\"><a href=\"#给Item之间增加分割线\" class=\"headerlink\" title=\"给Item之间增加分割线\"></a>给Item之间增加分割线</h2><p>我们只需要在以上基础上增加一个group_id即可.即:讲menu先放入到group组中,然后再给这个group赋上id的值,就能实现分割线效果.</p>\n<p><code>navigation_menu.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_favorite_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/_0091ea\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_about\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_about_us_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/about_us\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_exit_to_app_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/group_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher_round\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行效果</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111851.png\" alt=\"device-2018-07-05-111851\"></p>\n<h2 id=\"怎么实现Toolbar被遮挡的侧滑抽屉效果\"><a href=\"#怎么实现Toolbar被遮挡的侧滑抽屉效果\" class=\"headerlink\" title=\"怎么实现Toolbar被遮挡的侧滑抽屉效果\"></a>怎么实现Toolbar被遮挡的侧滑抽屉效果</h2><p>我们常见的应用,像网易云音乐,QQ等都是Toolbar被遮挡的侧滑效果.</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113031-1.png\" alt=\"device-2018-07-05-113031-1\"><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113158-1.png\" alt=\"device-2018-07-05-113158-1\"></p>\n<p>我们实现这种效果就得让<code>DrawerLayout</code>包含在<code>Toolbar</code>外面</p>\n<p><code>activity_drawer_layout.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appBarLayout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.AppBarOverlay\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/AppTheme.PopupOverlay\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/colorAccent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.NavigationView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.Bind;</span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.ButterKnife;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawerLayoutActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.toolbar)</span><br><span class=\"line\">    Toolbar mToolbar;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation_view)</span><br><span class=\"line\">    NavigationView mNavigationView;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</span><br><span class=\"line\">    DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActionBarDrawerToggle mToggle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_drawer_layout);</span><br><span class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置Toolbar</span></span><br><span class=\"line\">        setToolbar();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置DrawerToggle 开关</span></span><br><span class=\"line\">        setDrawerToggle();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置监听器</span></span><br><span class=\"line\">        setListener();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mNavigationView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">                mDrawerLayout.closeDrawers();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setDrawerToggle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mToggle=<span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span>,mDrawerLayout,mToolbar,</span><br><span class=\"line\">                R.string.navigation_drawer_open,</span><br><span class=\"line\">                R.string.navigation_drawer_close);</span><br><span class=\"line\">        mDrawerLayout.addDrawerListener(mToggle);</span><br><span class=\"line\">        <span class=\"comment\">//同步DrawerLayout的状态</span></span><br><span class=\"line\">        mToggle.syncState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setToolbar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        setSupportActionBar(mToolbar);</span><br><span class=\"line\">        <span class=\"comment\">// 显示Home的图标</span></span><br><span class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong><br><code>setSupportActionBar(mToolbar);</code>一定要写在<code>mDrawerLayout.addDrawerListener(mToggle);</code><br>之前,否则将无法响应Home页面上的Icon点击事件.</p>\n<p>运行效果:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/15308425514883_2.gif\" alt=\"15308425514883_2\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>为了方便,代码已经上传<a href=\"https://github.com/pvphero/DrawerLayoutDemo\" target=\"_blank\" rel=\"noopener\">GitHub</a>,敬请下载~</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"学习目的\"><a href=\"#学习目的\" class=\"headerlink\" title=\"学习目的\"></a>学习目的</h1><ul>\n<li>学会使用<code>DrawerLayout</code></li>\n<li>学会使用<code>NavigationView</code>  </li>\n<li>学会使用ToolBar+DrawerLayout+NavigationView实现侧滑抽屉效果</li>\n<li>学会实现Toolbar在顶部以及Toolbar被遮挡的两种效果</li>\n</ul>",
        "more": "<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p>侧滑控件我们在开发的过程中经常用到,废话不多说,先上图:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/15312917953318.gif\" alt></p>\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><p>如果要实现上图的展示效果,需要先创建个BaseActivit类,这个类里面包含Toolbar的初始化,然后再创建DrawerLayout相关的Activity</p>\n<h2 id=\"创建BaseActivity及相关XML文件\"><a href=\"#创建BaseActivity及相关XML文件\" class=\"headerlink\" title=\"创建BaseActivity及相关XML文件\"></a>创建BaseActivity及相关XML文件</h2><ul>\n<li><code>activity_base.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:contentInsetStartWithNavigation</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ToolBarStyle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:titleTextColor</span>=<span class=\"string\">\"@color/white\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/frameLayout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>BaseActivity</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui.base;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.FrameLayout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.ButterKnife;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Toolbar mToolbar;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> FrameLayout mContainerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_base);</span><br><span class=\"line\"></span><br><span class=\"line\">        mToolbar = findViewById(R.id.toolbar);</span><br><span class=\"line\">        mContainerLayout = findViewById(R.id.frameLayout);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isToobar = initToolbar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isToobar) &#123;</span><br><span class=\"line\">            setSupportActionBar(mToolbar);</span><br><span class=\"line\">            getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            mToolbar.setNavigationOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                    onNavigationClick();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mToolbar.setVisibility(View.GONE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        initContent(getLayoutId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initContent</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (layoutId != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            View contentView = LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(layoutId, mContainerLayout, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            mContainerLayout.addView(contentView);</span><br><span class=\"line\">            ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            initViews();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化布局</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取布局控件</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onNavigationClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">initToolbar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建DrawerLayout相关的Activity以及相关的XML文件\"><a href=\"#创建DrawerLayout相关的Activity以及相关的XML文件\" class=\"headerlink\" title=\"创建DrawerLayout相关的Activity以及相关的XML文件\"></a>创建DrawerLayout相关的Activity以及相关的XML文件</h2><ul>\n<li><code>activity_main.xml</code>  </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".ui.MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left|start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>header_layout.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/_0091ea\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/img_avatar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@mipmap/ic_launcher_round\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tv_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>navigation_menu.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_favorite_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_about\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_about_us_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/about_us\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_exit_to_app_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果使用Toolbar,那么需要把系统的主题换成没有ActionBar的主题,修改<code>style.xml</code>文件</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme.Base\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"AppTheme.Base\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ToolBarStyle\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@style/BaseToolBarStyle\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>MainActivity</code>实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.NavigationView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.ui.base.BaseActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.Bind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation_view)</span><br><span class=\"line\">    NavigationView mNavigationView;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</span><br><span class=\"line\">    DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        ActionBarDrawerToggle mToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span>,mDrawerLayout,mToolbar,</span><br><span class=\"line\">                R.string.navigation_drawer_open,</span><br><span class=\"line\">                R.string.navigation_drawer_close);</span><br><span class=\"line\">        mToggle.syncState();</span><br><span class=\"line\">        mDrawerLayout.addDrawerListener(mToggle);</span><br><span class=\"line\">        mNavigationView.setItemIconTintList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        mNavigationView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.activity_main;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">initToolbar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mToolbar.setTitle(R.string.home);</span><br><span class=\"line\">        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行查看效果</li>\n</ul>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><p>但是现在我们发现侧边栏是没有选中状态的,如效果图所示,</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/15307558160904_2.gif\" alt=\"15307558160904_2\"></p>\n<p>我们怎么才能是左边的导航栏有选择状态呢?</p>\n<h2 id=\"给左边的导航栏加上选中效果\"><a href=\"#给左边的导航栏加上选中效果\" class=\"headerlink\" title=\"给左边的导航栏加上选中效果\"></a>给左边的导航栏加上选中效果</h2><ul>\n<li>首先在布局文件中,<code>NavigationView</code>的控件的<code>meun</code>中注明一个behavior </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">group</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:checkableBehavior=\"single\"</span><br></pre></td></tr></table></figure>\n<p><strong>表示每一项都是单选,如果不标明的话,NavigationView不会有选中效果.</strong></p>\n<ul>\n<li>在Java文件中增加监听器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_favorite_article:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_about:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_exit:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_home:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//关闭侧边栏</span></span><br><span class=\"line\">            mDrawerLayout.closeDrawers();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行效果</li>\n</ul>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-103705.png\" alt=\"device-2018-07-05-103705\"><img src=\"http://paynnyvep.bkt.clouddn.com/15307584630889_2-1.gif\" alt=\"15307584630889_2\"></p>\n<h2 id=\"改变图标的颜色\"><a href=\"#改变图标的颜色\" class=\"headerlink\" title=\"改变图标的颜色\"></a>改变图标的颜色</h2><p>我们给刚刚增加的<code>NavigationView</code>的控件的<code>meun</code>的Item增加一个<code>icon</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">group</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>ok看下现在的效果:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-105127-1.png\" alt=\"device-2018-07-05-105127\"></p>\n<p>5我们发现<code>首页</code> 旁边的图标变成了黑色.这并不是我们想要的.</p>\n<p>我们怎么去更改Icon的颜色呢,有两种方法:</p>\n<ul>\n<li>在NavigationView的布局xml文件里增加<code>app:itemIconTint=&quot;@color/xxx&quot;</code>属性,可以设置Icon的图片颜色为统一的一种颜色</li>\n</ul>\n<p><code>activity_main.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".ui.MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left|start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/_0091ea\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行效果如下:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110042.png\" alt=\"device-2018-07-05-110042\"></p>\n<p>我们可以看到所有的Icon的图片颜色全部换成了统一的蓝色.但是首页旁边的Icon仍不是我们想要的图标颜色.这就得需要第二种方法了.</p>\n<ul>\n<li>我们如果想让Icon显示本省的颜色,就得在java文件里面调用以下方法:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mNavigationView.setItemIconTintList(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n<p><code>MainActivity</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.NavigationView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.ui.base.BaseActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.Bind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation_view)</span><br><span class=\"line\">    NavigationView mNavigationView;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</span><br><span class=\"line\">    DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        ActionBarDrawerToggle mToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span>,mDrawerLayout,mToolbar,</span><br><span class=\"line\">                R.string.navigation_drawer_open,</span><br><span class=\"line\">                R.string.navigation_drawer_close);</span><br><span class=\"line\">        mToggle.syncState();</span><br><span class=\"line\">        mDrawerLayout.addDrawerListener(mToggle);</span><br><span class=\"line\">        mNavigationView.setItemIconTintList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        mNavigationView.setNavigationItemSelectedListener(onNavigationItemSelectedListener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.activity_main;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">initToolbar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mToolbar.setTitle(R.string.home);</span><br><span class=\"line\">        mToolbar.setNavigationIcon(R.drawable.ic_menu_black_24dp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener = <span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_favorite_article:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_about:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_exit:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.menu_home:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//关闭侧边栏</span></span><br><span class=\"line\">            mDrawerLayout.closeDrawers();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行效果:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-110546.png\" alt=\"device-2018-07-05-110546\"></p>\n<p>可以看到,这个效果就是我们想要的~</p>\n<h2 id=\"改变Item的背景-改变Item的TextColor\"><a href=\"#改变Item的背景-改变Item的TextColor\" class=\"headerlink\" title=\"改变Item的背景,改变Item的TextColor\"></a>改变Item的背景,改变Item的TextColor</h2><ul>\n<li>如果要改变Item的背景,我们需要用到<code>NavigationView</code>的<code>.app:itemBackground=&quot;&quot;</code>方法</li>\n<li>如果要改变Item的TextColor,我们需要用到<code>NavigationView</code>的<code>app:itemTextColor=&quot;&quot;</code>方法</li>\n</ul>\n<p><code>activity_main.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".ui.MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"left|start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemBackground</span>=<span class=\"string\">\"@color/_0091ea\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemTextColor</span>=<span class=\"string\">\"@color/white\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/_0091ea\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111309.png\" alt=\"device-2018-07-05-111309\"></p>\n<h2 id=\"给Item之间增加分割线\"><a href=\"#给Item之间增加分割线\" class=\"headerlink\" title=\"给Item之间增加分割线\"></a>给Item之间增加分割线</h2><p>我们只需要在以上基础上增加一个group_id即可.即:讲menu先放入到group组中,然后再给这个group赋上id的值,就能实现分割线效果.</p>\n<p><code>navigation_menu.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_favorite_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/favorite_article\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/_0091ea\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_about\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_about_us_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/about_us\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_exit_to_app_gray_24dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/exit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/group_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher_round\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行效果</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-111851.png\" alt=\"device-2018-07-05-111851\"></p>\n<h2 id=\"怎么实现Toolbar被遮挡的侧滑抽屉效果\"><a href=\"#怎么实现Toolbar被遮挡的侧滑抽屉效果\" class=\"headerlink\" title=\"怎么实现Toolbar被遮挡的侧滑抽屉效果\"></a>怎么实现Toolbar被遮挡的侧滑抽屉效果</h2><p>我们常见的应用,像网易云音乐,QQ等都是Toolbar被遮挡的侧滑效果.</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113031-1.png\" alt=\"device-2018-07-05-113031-1\"><img src=\"http://paynnyvep.bkt.clouddn.com/1device-2018-07-05-113158-1.png\" alt=\"device-2018-07-05-113158-1\"></p>\n<p>我们实现这种效果就得让<code>DrawerLayout</code>包含在<code>Toolbar</code>外面</p>\n<p><code>activity_drawer_layout.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.DrawerLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appBarLayout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.AppBarOverlay\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/AppTheme.PopupOverlay\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/header_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:itemIconTint</span>=<span class=\"string\">\"@color/colorAccent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/navigation_menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.NavigationView</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.vv.drawerlayout.ui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.NavigationView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vv.drawerlayout.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.Bind;</span><br><span class=\"line\"><span class=\"keyword\">import</span> butterknife.ButterKnife;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> ShenZhenWei</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/5</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrawerLayoutActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.toolbar)</span><br><span class=\"line\">    Toolbar mToolbar;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.navigation_view)</span><br><span class=\"line\">    NavigationView mNavigationView;</span><br><span class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.drawer_layout)</span><br><span class=\"line\">    DrawerLayout mDrawerLayout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ActionBarDrawerToggle mToggle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_drawer_layout);</span><br><span class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置Toolbar</span></span><br><span class=\"line\">        setToolbar();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置DrawerToggle 开关</span></span><br><span class=\"line\">        setDrawerToggle();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置监听器</span></span><br><span class=\"line\">        setListener();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mNavigationView.setNavigationItemSelectedListener(<span class=\"keyword\">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onNavigationItemSelected</span><span class=\"params\">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">                mDrawerLayout.closeDrawers();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setDrawerToggle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mToggle=<span class=\"keyword\">new</span> ActionBarDrawerToggle(<span class=\"keyword\">this</span>,mDrawerLayout,mToolbar,</span><br><span class=\"line\">                R.string.navigation_drawer_open,</span><br><span class=\"line\">                R.string.navigation_drawer_close);</span><br><span class=\"line\">        mDrawerLayout.addDrawerListener(mToggle);</span><br><span class=\"line\">        <span class=\"comment\">//同步DrawerLayout的状态</span></span><br><span class=\"line\">        mToggle.syncState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setToolbar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        setSupportActionBar(mToolbar);</span><br><span class=\"line\">        <span class=\"comment\">// 显示Home的图标</span></span><br><span class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong><br><code>setSupportActionBar(mToolbar);</code>一定要写在<code>mDrawerLayout.addDrawerListener(mToggle);</code><br>之前,否则将无法响应Home页面上的Icon点击事件.</p>\n<p>运行效果:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/15308425514883_2.gif\" alt=\"15308425514883_2\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>为了方便,代码已经上传<a href=\"https://github.com/pvphero/DrawerLayoutDemo\" target=\"_blank\" rel=\"noopener\">GitHub</a>,敬请下载~</p>"
      },
      {
        "title": "SuperEditText 用法说明",
        "date": "2018-11-27T09:37:41.000Z",
        "_content": "\n# SuperEditText使用说明\n\n控件地址：https://github.com/pvphero/SuperEditText\n\n## 1.控件的功能\n\n- EditText一键清除功能\n- TextInputEditText下方提示语可以显示隐藏  \n- 清除按钮可以显示隐藏\n- EditText 错误提示\n- Layout错误提示\n- 失去焦点时，提示的文字消失；获得焦点时，提示的文字显示\n\n<!--more-->\n\n## 2.控件用法说明\n\n- XML代码\n\n```xml\n<com.vv.superedittextlib.FloatingEditTextLayout\n        android:id=\"@+id/edittext_layout_error\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Layout显示错误\"\n        android:imeOptions=\"actionDone\"\n        android:inputType=\"textCapWords|textEmailAddress\"\n        android:maxLength=\"100\"\n        android:maxLines=\"2\"\n        android:paddingRight=\"10dp\"\n        android:textAllCaps=\"true\"\n        android:textColor=\"?colorPrimary\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"italic\"\n        app:hintAnimationEnabled=\"true\"\n        app:hintTextAppearance=\"@style/HintTextAppearance\"\n        app:suet_clearButton=\"true\"\n        app:suet_floatingLabelText=\"超过10个字，提示跟清楚按钮会消失，Layout显示错误\"\n        app:suet_floatingLabelTextColor=\"?colorPrimary\"\n        app:suet_isSafeInputText=\"true\">\n\n    </com.vv.superedittextlib.FloatingEditTextLayout>\n```\n\n- Java代码\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private FloatingEditTextLayout editTextLayoutError, editTextLayoutCase;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        editTextLayoutError = findViewById(R.id.edittext_layout_error);\n        editTextLayoutCase = findViewById(R.id.edittext_layout_case);\n\n\n        editTextLayoutError.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                if (s.length() > 10) {\n                    editTextLayoutError.setError(null);\n                    editTextLayoutError.hideFloatTextView();\n                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(false);\n                    editTextLayoutError.setLayoutError(null);\n                } else {\n                    editTextLayoutError.setLayoutError(\"身份证号码错误!\");\n                    editTextLayoutError.showFloatTextView();\n                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(true);\n                }\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\n            }\n        });\n\n        editTextLayoutCase.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                if (s.length() < 10) {\n                    editTextLayoutCase.setError(\"位数错误\");\n                } else {\n                    editTextLayoutCase.setError(null);\n                }\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\n            }\n        });\n\n    }\n}\n```\n\n- 运行效果\n\n![图片](https://dn-coding-net-production-pp.codehub.cn/b8b95d88-bc13-497a-a565-048415b45e83.png)\n\n\n## 3.控件说明\n\n### 3.1 控件组成\n\n`FloatingEditTextLayout`是一个组合控件，该控件继承自 `TextInputLayout`,内部集成了`ClearEditText` 和 `TextView`\n\n- `ClearEditText` 是用来代替 `TextInputEditText`,并实现一键清除功能的EditText  \n- `TextView` 该控件是用来实现中间的提示字\n\n### 3.2 控件公共方法说明\n\n\n1. **FloatingEditTextLayout.getText()**\n    \n    获取editText的Text\n2. **FloatingEditTextLayout.setText()**\n\n   设置editText的Text\n3. **FloatingEditTextLayout.setError(@Nullable CharSequence errorText)**\n\n   设置editText的error\n4. **FloatingEditTextLayout.setLayoutError(@Nullable CharSequence errorText)**\n\n   设置Layout的Error\n5. **FloatingEditTextLayout.setHint(@StringRes int hintRes)**\n\n   设置Hint\n6. **FloatingEditTextLayout.addTextChangedListener(TextWatcher textWatcher)**\n\n   监听editText的TextChange\n7. **FloatingEditTextLayout.removeTextChangedListener(TextWatcher textWatcher)**\n\n   移除editText textChange的监听事件\n8. **FloatingEditTextLayout.getEditText()**\n\n   获取EditText\n9. **FloatingEditTextLayout.isFloatingLabelAlwaysShown()**\n\n   判断是否要一直显示提示的字\n   \n10. **FloatingEditTextLayout.setFloatingLabelAlwaysShown()**\n\n    设置提示的字是否一直显示\n11. **FloatingEditTextLayout.hideFloatTextView()**\n\n    隐藏提示的字\n12. **FloatingEditTextLayout.showFloatTextView()**\n\n    显示提示的字\n13. **FloatingEditTextLayout.getFloatLableText()**\n\n    获取提示的字\n14. **FloatingEditTextLayout.setFloatLableText(String floatLableText)**\n\n    设置提示的字\n15. **FloatingEditTextLayout.setEnabled(boolean enabled)**\n\n    设置enable，如果enable=false则隐藏提示的字，如果enable=true则显示提示的字\n16. **ClearEditText.setOnFocusChangeListener()** \n\n    ClearEditText设置焦点的监听事件\n17. **ClearEditText.isShowClearButton()** \n\n    判断是否显示ClearButton\n18. **ClearEditText.setShowClearButton(boolean showClearButton)** \n\n    设置ClearButton是否显示\n19. **ClearEditText.getIconSize()**\n\n    获取Icon的大小\n20. **ClearEditText.setIconSize(int iconSize)**\n\n    设置Inco的大小\n\n\n\n## License\n\n    Copyright 2018 pvphero\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n",
        "source": "_posts/20181127SuperEditTextUsage.md",
        "raw": "\n---\ntitle: SuperEditText 用法说明\ndate: 2018-11-27 17:37:41\ntags:\n- Android\n- 自定义控件\ncategories:\n- Android开发笔记\n---\n\n# SuperEditText使用说明\n\n控件地址：https://github.com/pvphero/SuperEditText\n\n## 1.控件的功能\n\n- EditText一键清除功能\n- TextInputEditText下方提示语可以显示隐藏  \n- 清除按钮可以显示隐藏\n- EditText 错误提示\n- Layout错误提示\n- 失去焦点时，提示的文字消失；获得焦点时，提示的文字显示\n\n<!--more-->\n\n## 2.控件用法说明\n\n- XML代码\n\n```xml\n<com.vv.superedittextlib.FloatingEditTextLayout\n        android:id=\"@+id/edittext_layout_error\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Layout显示错误\"\n        android:imeOptions=\"actionDone\"\n        android:inputType=\"textCapWords|textEmailAddress\"\n        android:maxLength=\"100\"\n        android:maxLines=\"2\"\n        android:paddingRight=\"10dp\"\n        android:textAllCaps=\"true\"\n        android:textColor=\"?colorPrimary\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"italic\"\n        app:hintAnimationEnabled=\"true\"\n        app:hintTextAppearance=\"@style/HintTextAppearance\"\n        app:suet_clearButton=\"true\"\n        app:suet_floatingLabelText=\"超过10个字，提示跟清楚按钮会消失，Layout显示错误\"\n        app:suet_floatingLabelTextColor=\"?colorPrimary\"\n        app:suet_isSafeInputText=\"true\">\n\n    </com.vv.superedittextlib.FloatingEditTextLayout>\n```\n\n- Java代码\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private FloatingEditTextLayout editTextLayoutError, editTextLayoutCase;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        editTextLayoutError = findViewById(R.id.edittext_layout_error);\n        editTextLayoutCase = findViewById(R.id.edittext_layout_case);\n\n\n        editTextLayoutError.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                if (s.length() > 10) {\n                    editTextLayoutError.setError(null);\n                    editTextLayoutError.hideFloatTextView();\n                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(false);\n                    editTextLayoutError.setLayoutError(null);\n                } else {\n                    editTextLayoutError.setLayoutError(\"身份证号码错误!\");\n                    editTextLayoutError.showFloatTextView();\n                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(true);\n                }\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\n            }\n        });\n\n        editTextLayoutCase.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                if (s.length() < 10) {\n                    editTextLayoutCase.setError(\"位数错误\");\n                } else {\n                    editTextLayoutCase.setError(null);\n                }\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\n            }\n        });\n\n    }\n}\n```\n\n- 运行效果\n\n![图片](https://dn-coding-net-production-pp.codehub.cn/b8b95d88-bc13-497a-a565-048415b45e83.png)\n\n\n## 3.控件说明\n\n### 3.1 控件组成\n\n`FloatingEditTextLayout`是一个组合控件，该控件继承自 `TextInputLayout`,内部集成了`ClearEditText` 和 `TextView`\n\n- `ClearEditText` 是用来代替 `TextInputEditText`,并实现一键清除功能的EditText  \n- `TextView` 该控件是用来实现中间的提示字\n\n### 3.2 控件公共方法说明\n\n\n1. **FloatingEditTextLayout.getText()**\n    \n    获取editText的Text\n2. **FloatingEditTextLayout.setText()**\n\n   设置editText的Text\n3. **FloatingEditTextLayout.setError(@Nullable CharSequence errorText)**\n\n   设置editText的error\n4. **FloatingEditTextLayout.setLayoutError(@Nullable CharSequence errorText)**\n\n   设置Layout的Error\n5. **FloatingEditTextLayout.setHint(@StringRes int hintRes)**\n\n   设置Hint\n6. **FloatingEditTextLayout.addTextChangedListener(TextWatcher textWatcher)**\n\n   监听editText的TextChange\n7. **FloatingEditTextLayout.removeTextChangedListener(TextWatcher textWatcher)**\n\n   移除editText textChange的监听事件\n8. **FloatingEditTextLayout.getEditText()**\n\n   获取EditText\n9. **FloatingEditTextLayout.isFloatingLabelAlwaysShown()**\n\n   判断是否要一直显示提示的字\n   \n10. **FloatingEditTextLayout.setFloatingLabelAlwaysShown()**\n\n    设置提示的字是否一直显示\n11. **FloatingEditTextLayout.hideFloatTextView()**\n\n    隐藏提示的字\n12. **FloatingEditTextLayout.showFloatTextView()**\n\n    显示提示的字\n13. **FloatingEditTextLayout.getFloatLableText()**\n\n    获取提示的字\n14. **FloatingEditTextLayout.setFloatLableText(String floatLableText)**\n\n    设置提示的字\n15. **FloatingEditTextLayout.setEnabled(boolean enabled)**\n\n    设置enable，如果enable=false则隐藏提示的字，如果enable=true则显示提示的字\n16. **ClearEditText.setOnFocusChangeListener()** \n\n    ClearEditText设置焦点的监听事件\n17. **ClearEditText.isShowClearButton()** \n\n    判断是否显示ClearButton\n18. **ClearEditText.setShowClearButton(boolean showClearButton)** \n\n    设置ClearButton是否显示\n19. **ClearEditText.getIconSize()**\n\n    获取Icon的大小\n20. **ClearEditText.setIconSize(int iconSize)**\n\n    设置Inco的大小\n\n\n\n## License\n\n    Copyright 2018 pvphero\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n",
        "slug": "20181127SuperEditTextUsage",
        "published": 1,
        "updated": "2020-05-19T02:32:04.675Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1b000552j9wgjbg25s",
        "content": "<h1 id=\"SuperEditText使用说明\"><a href=\"#SuperEditText使用说明\" class=\"headerlink\" title=\"SuperEditText使用说明\"></a>SuperEditText使用说明</h1><p>控件地址：<a href=\"https://github.com/pvphero/SuperEditText\" target=\"_blank\" rel=\"noopener\">https://github.com/pvphero/SuperEditText</a></p>\n<h2 id=\"1-控件的功能\"><a href=\"#1-控件的功能\" class=\"headerlink\" title=\"1.控件的功能\"></a>1.控件的功能</h2><ul>\n<li>EditText一键清除功能</li>\n<li>TextInputEditText下方提示语可以显示隐藏  </li>\n<li>清除按钮可以显示隐藏</li>\n<li>EditText 错误提示</li>\n<li>Layout错误提示</li>\n<li>失去焦点时，提示的文字消失；获得焦点时，提示的文字显示</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"2-控件用法说明\"><a href=\"#2-控件用法说明\" class=\"headerlink\" title=\"2.控件用法说明\"></a>2.控件用法说明</h2><ul>\n<li>XML代码</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.vv.superedittextlib.FloatingEditTextLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edittext_layout_error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"16dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:hint</span>=<span class=\"string\">\"Layout显示错误\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeOptions</span>=<span class=\"string\">\"actionDone\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textCapWords|textEmailAddress\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:maxLines</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textAllCaps</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"?colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"18sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"italic\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:hintAnimationEnabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:hintTextAppearance</span>=<span class=\"string\">\"@style/HintTextAppearance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_clearButton</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_floatingLabelText</span>=<span class=\"string\">\"超过10个字，提示跟清楚按钮会消失，Layout显示错误\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_floatingLabelTextColor</span>=<span class=\"string\">\"?colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_isSafeInputText</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">com.vv.superedittextlib.FloatingEditTextLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Java代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FloatingEditTextLayout editTextLayoutError, editTextLayoutCase;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        editTextLayoutError = findViewById(R.id.edittext_layout_error);</span><br><span class=\"line\">        editTextLayoutCase = findViewById(R.id.edittext_layout_case);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        editTextLayoutError.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                    editTextLayoutError.setError(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    editTextLayoutError.hideFloatTextView();</span><br><span class=\"line\">                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    editTextLayoutError.setLayoutError(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    editTextLayoutError.setLayoutError(<span class=\"string\">\"身份证号码错误!\"</span>);</span><br><span class=\"line\">                    editTextLayoutError.showFloatTextView();</span><br><span class=\"line\">                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        editTextLayoutCase.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.length() &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                    editTextLayoutCase.setError(<span class=\"string\">\"位数错误\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    editTextLayoutCase.setError(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行效果</li>\n</ul>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/b8b95d88-bc13-497a-a565-048415b45e83.png\" alt=\"图片\"></p>\n<h2 id=\"3-控件说明\"><a href=\"#3-控件说明\" class=\"headerlink\" title=\"3.控件说明\"></a>3.控件说明</h2><h3 id=\"3-1-控件组成\"><a href=\"#3-1-控件组成\" class=\"headerlink\" title=\"3.1 控件组成\"></a>3.1 控件组成</h3><p><code>FloatingEditTextLayout</code>是一个组合控件，该控件继承自 <code>TextInputLayout</code>,内部集成了<code>ClearEditText</code> 和 <code>TextView</code></p>\n<ul>\n<li><code>ClearEditText</code> 是用来代替 <code>TextInputEditText</code>,并实现一键清除功能的EditText  </li>\n<li><code>TextView</code> 该控件是用来实现中间的提示字</li>\n</ul>\n<h3 id=\"3-2-控件公共方法说明\"><a href=\"#3-2-控件公共方法说明\" class=\"headerlink\" title=\"3.2 控件公共方法说明\"></a>3.2 控件公共方法说明</h3><ol>\n<li><p><strong>FloatingEditTextLayout.getText()</strong></p>\n<p> 获取editText的Text</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setText()</strong></p>\n<p>设置editText的Text</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setError(@Nullable CharSequence errorText)</strong></p>\n<p>设置editText的error</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setLayoutError(@Nullable CharSequence errorText)</strong></p>\n<p>设置Layout的Error</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setHint(@StringRes int hintRes)</strong></p>\n<p>设置Hint</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.addTextChangedListener(TextWatcher textWatcher)</strong></p>\n<p>监听editText的TextChange</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.removeTextChangedListener(TextWatcher textWatcher)</strong></p>\n<p>移除editText textChange的监听事件</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.getEditText()</strong></p>\n<p>获取EditText</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.isFloatingLabelAlwaysShown()</strong></p>\n<p>判断是否要一直显示提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setFloatingLabelAlwaysShown()</strong></p>\n<p>设置提示的字是否一直显示</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.hideFloatTextView()</strong></p>\n<p>隐藏提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.showFloatTextView()</strong></p>\n<p>显示提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.getFloatLableText()</strong></p>\n<p>获取提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setFloatLableText(String floatLableText)</strong></p>\n<p>设置提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setEnabled(boolean enabled)</strong></p>\n<p>设置enable，如果enable=false则隐藏提示的字，如果enable=true则显示提示的字</p>\n</li>\n<li><p><strong>ClearEditText.setOnFocusChangeListener()</strong> </p>\n<p>ClearEditText设置焦点的监听事件</p>\n</li>\n<li><p><strong>ClearEditText.isShowClearButton()</strong> </p>\n<p>判断是否显示ClearButton</p>\n</li>\n<li><p><strong>ClearEditText.setShowClearButton(boolean showClearButton)</strong> </p>\n<p>设置ClearButton是否显示</p>\n</li>\n<li><p><strong>ClearEditText.getIconSize()</strong></p>\n<p>获取Icon的大小</p>\n</li>\n<li><p><strong>ClearEditText.setIconSize(int iconSize)</strong></p>\n<p>设置Inco的大小</p>\n</li>\n</ol>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code>Copyright 2018 pvphero\n\nLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"SuperEditText使用说明\"><a href=\"#SuperEditText使用说明\" class=\"headerlink\" title=\"SuperEditText使用说明\"></a>SuperEditText使用说明</h1><p>控件地址：<a href=\"https://github.com/pvphero/SuperEditText\" target=\"_blank\" rel=\"noopener\">https://github.com/pvphero/SuperEditText</a></p>\n<h2 id=\"1-控件的功能\"><a href=\"#1-控件的功能\" class=\"headerlink\" title=\"1.控件的功能\"></a>1.控件的功能</h2><ul>\n<li>EditText一键清除功能</li>\n<li>TextInputEditText下方提示语可以显示隐藏  </li>\n<li>清除按钮可以显示隐藏</li>\n<li>EditText 错误提示</li>\n<li>Layout错误提示</li>\n<li>失去焦点时，提示的文字消失；获得焦点时，提示的文字显示</li>\n</ul>",
        "more": "<h2 id=\"2-控件用法说明\"><a href=\"#2-控件用法说明\" class=\"headerlink\" title=\"2.控件用法说明\"></a>2.控件用法说明</h2><ul>\n<li>XML代码</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.vv.superedittextlib.FloatingEditTextLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edittext_layout_error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"16dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:hint</span>=<span class=\"string\">\"Layout显示错误\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeOptions</span>=<span class=\"string\">\"actionDone\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textCapWords|textEmailAddress\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:maxLines</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textAllCaps</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"?colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"18sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"italic\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:hintAnimationEnabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:hintTextAppearance</span>=<span class=\"string\">\"@style/HintTextAppearance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_clearButton</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_floatingLabelText</span>=<span class=\"string\">\"超过10个字，提示跟清楚按钮会消失，Layout显示错误\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_floatingLabelTextColor</span>=<span class=\"string\">\"?colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:suet_isSafeInputText</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">com.vv.superedittextlib.FloatingEditTextLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Java代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FloatingEditTextLayout editTextLayoutError, editTextLayoutCase;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        editTextLayoutError = findViewById(R.id.edittext_layout_error);</span><br><span class=\"line\">        editTextLayoutCase = findViewById(R.id.edittext_layout_case);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        editTextLayoutError.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                    editTextLayoutError.setError(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    editTextLayoutError.hideFloatTextView();</span><br><span class=\"line\">                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    editTextLayoutError.setLayoutError(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    editTextLayoutError.setLayoutError(<span class=\"string\">\"身份证号码错误!\"</span>);</span><br><span class=\"line\">                    editTextLayoutError.showFloatTextView();</span><br><span class=\"line\">                    ((ClearEditText) editTextLayoutError.getEditText()).setShowClearButton(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        editTextLayoutCase.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.length() &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                    editTextLayoutCase.setError(<span class=\"string\">\"位数错误\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    editTextLayoutCase.setError(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行效果</li>\n</ul>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/b8b95d88-bc13-497a-a565-048415b45e83.png\" alt=\"图片\"></p>\n<h2 id=\"3-控件说明\"><a href=\"#3-控件说明\" class=\"headerlink\" title=\"3.控件说明\"></a>3.控件说明</h2><h3 id=\"3-1-控件组成\"><a href=\"#3-1-控件组成\" class=\"headerlink\" title=\"3.1 控件组成\"></a>3.1 控件组成</h3><p><code>FloatingEditTextLayout</code>是一个组合控件，该控件继承自 <code>TextInputLayout</code>,内部集成了<code>ClearEditText</code> 和 <code>TextView</code></p>\n<ul>\n<li><code>ClearEditText</code> 是用来代替 <code>TextInputEditText</code>,并实现一键清除功能的EditText  </li>\n<li><code>TextView</code> 该控件是用来实现中间的提示字</li>\n</ul>\n<h3 id=\"3-2-控件公共方法说明\"><a href=\"#3-2-控件公共方法说明\" class=\"headerlink\" title=\"3.2 控件公共方法说明\"></a>3.2 控件公共方法说明</h3><ol>\n<li><p><strong>FloatingEditTextLayout.getText()</strong></p>\n<p> 获取editText的Text</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setText()</strong></p>\n<p>设置editText的Text</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setError(@Nullable CharSequence errorText)</strong></p>\n<p>设置editText的error</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setLayoutError(@Nullable CharSequence errorText)</strong></p>\n<p>设置Layout的Error</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setHint(@StringRes int hintRes)</strong></p>\n<p>设置Hint</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.addTextChangedListener(TextWatcher textWatcher)</strong></p>\n<p>监听editText的TextChange</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.removeTextChangedListener(TextWatcher textWatcher)</strong></p>\n<p>移除editText textChange的监听事件</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.getEditText()</strong></p>\n<p>获取EditText</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.isFloatingLabelAlwaysShown()</strong></p>\n<p>判断是否要一直显示提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setFloatingLabelAlwaysShown()</strong></p>\n<p>设置提示的字是否一直显示</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.hideFloatTextView()</strong></p>\n<p>隐藏提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.showFloatTextView()</strong></p>\n<p>显示提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.getFloatLableText()</strong></p>\n<p>获取提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setFloatLableText(String floatLableText)</strong></p>\n<p>设置提示的字</p>\n</li>\n<li><p><strong>FloatingEditTextLayout.setEnabled(boolean enabled)</strong></p>\n<p>设置enable，如果enable=false则隐藏提示的字，如果enable=true则显示提示的字</p>\n</li>\n<li><p><strong>ClearEditText.setOnFocusChangeListener()</strong> </p>\n<p>ClearEditText设置焦点的监听事件</p>\n</li>\n<li><p><strong>ClearEditText.isShowClearButton()</strong> </p>\n<p>判断是否显示ClearButton</p>\n</li>\n<li><p><strong>ClearEditText.setShowClearButton(boolean showClearButton)</strong> </p>\n<p>设置ClearButton是否显示</p>\n</li>\n<li><p><strong>ClearEditText.getIconSize()</strong></p>\n<p>获取Icon的大小</p>\n</li>\n<li><p><strong>ClearEditText.setIconSize(int iconSize)</strong></p>\n<p>设置Inco的大小</p>\n</li>\n</ol>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code>Copyright 2018 pvphero\n\nLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"
      },
      {
        "title": "使用ZXing实现扫描多个条形码页面",
        "date": "2019-01-03T09:08:54.000Z",
        "_content": "\n# 1.前言\n\nZXing是google官方推出的跨平台的基于Java实现处理扫面二维码或者条形码的库。支持很多格式，一维条码支持UPC-A，UPC-E，EAN-8，Code 39，Code 93等格式，二维条码支持QR Code，Data Matrix，PDF 417，MaxiCode等格式。\n\n我们通常使用ZXing扫描的时候都是一个一个的去扫，但是用户的实际操作环境却不尽然。比如说下图：\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg)\n\n<!--more-->\n\n# 2.解决方案\n\nZXing中有一个类`GenericMultipleBarcodeReader`\n\n看下这个类的源码：\n\n```java\npublic final class GenericMultipleBarcodeReader implements MultipleBarcodeReader {\n\n  private static final int MIN_DIMENSION_TO_RECUR = 100;\n  private static final int MAX_DEPTH = 4;\n\n  private final Reader delegate;\n\n  public GenericMultipleBarcodeReader(Reader delegate) {\n    this.delegate = delegate;\n  }\n\n  @Override\n  public Result[] decodeMultiple(BinaryBitmap image) throws NotFoundException {\n    return decodeMultiple(image, null);\n  }\n\n  @Override\n  public Result[] decodeMultiple(BinaryBitmap image, Map<DecodeHintType,?> hints)\n      throws NotFoundException {\n    List<Result> results = new ArrayList<>();\n    doDecodeMultiple(image, hints, results, 0, 0, 0);\n    if (results.isEmpty()) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    return results.toArray(new Result[results.size()]);\n  }\n\n  private void doDecodeMultiple(BinaryBitmap image,\n                                Map<DecodeHintType,?> hints,\n                                List<Result> results,\n                                int xOffset,\n                                int yOffset,\n                                int currentDepth) {\n    if (currentDepth > MAX_DEPTH) {\n      return;\n    }\n\n    Result result;\n    try {\n      result = delegate.decode(image, hints);\n    } catch (ReaderException ignored) {\n      return;\n    }\n    boolean alreadyFound = false;\n    for (Result existingResult : results) {\n      if (existingResult.getText().equals(result.getText())) {\n        alreadyFound = true;\n        break;\n      }\n    }\n    if (!alreadyFound) {\n      results.add(translateResultPoints(result, xOffset, yOffset));\n    }\n    ResultPoint[] resultPoints = result.getResultPoints();\n    if (resultPoints == null || resultPoints.length == 0) {\n      return;\n    }\n    int width = image.getWidth();\n    int height = image.getHeight();\n    float minX = width;\n    float minY = height;\n    float maxX = 0.0f;\n    float maxY = 0.0f;\n    for (ResultPoint point : resultPoints) {\n      if (point == null) {\n        continue;\n      }\n      float x = point.getX();\n      float y = point.getY();\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n      if (x > maxX) {\n        maxX = x;\n      }\n      if (y > maxY) {\n        maxY = y;\n      }\n    }\n\n    // Decode left of barcode\n    if (minX > MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop(0, 0, (int) minX, height),\n                       hints, results,\n                       xOffset, yOffset,\n                       currentDepth + 1);\n    }\n    // Decode above barcode\n    if (minY > MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop(0, 0, width, (int) minY),\n                       hints, results,\n                       xOffset, yOffset,\n                       currentDepth + 1);\n    }\n    // Decode right of barcode\n    if (maxX < width - MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop((int) maxX, 0, width - (int) maxX, height),\n                       hints, results,\n                       xOffset + (int) maxX, yOffset,\n                       currentDepth + 1);\n    }\n    // Decode below barcode\n    if (maxY < height - MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop(0, (int) maxY, width, height - (int) maxY),\n                       hints, results,\n                       xOffset, yOffset + (int) maxY,\n                       currentDepth + 1);\n    }\n  }\n\n  private static Result translateResultPoints(Result result, int xOffset, int yOffset) {\n    ResultPoint[] oldResultPoints = result.getResultPoints();\n    if (oldResultPoints == null) {\n      return result;\n    }\n    ResultPoint[] newResultPoints = new ResultPoint[oldResultPoints.length];\n    for (int i = 0; i < oldResultPoints.length; i++) {\n      ResultPoint oldPoint = oldResultPoints[i];\n      if (oldPoint != null) {\n        newResultPoints[i] = new ResultPoint(oldPoint.getX() + xOffset, oldPoint.getY() + yOffset);\n      }\n    }\n    Result newResult = new Result(result.getText(),\n                                  result.getRawBytes(),\n                                  result.getNumBits(),\n                                  newResultPoints,\n                                  result.getBarcodeFormat(),\n                                  result.getTimestamp());\n    newResult.putAllMetadata(result.getResultMetadata());\n    return newResult;\n  }\n\n}\n```\n\n![](https://ws4.sinaimg.cn/large/006tNc79ly1fyu9y8z0lrj30kx0jpjuy.jpg)\n\n可以看到`GenericMultipleBarcodeReader`中`decodeMultiple`返回 `Result[]`,所以我们可以根据这个类实现条形码的多个返回。\n\n# 3.实现过程\n\n## 3.1 gradle引入ZXing包\n\n```java\nimplementation('com.journeyapps:zxing-android-embedded:3.6.0') { transitive = false }\n    implementation 'com.google.zxing:core:3.3.2'\n```\n\n## 3.2 调用ZXing的扫描页面\n\n```java\nIntentIntegrator intentIntegrator = new IntentIntegrator(MainActivity.this);\n                intentIntegrator\n                        .setPrompt(\"\")\n                        .setBeepEnabled(false)\n                        .setBarcodeImageEnabled(true)\n                        .setDesiredBarcodeFormats(IntentIntegrator.CODE_128)\n                        .initiateScan();\n```\n\n这里将`setBarcodeImageEnabled(true)`设置成true，就可以在activity的回调里面获取到扫描的二维码的路径。\n\n## 3.3 在`onActivityResult`中处理\n\n```java\n@Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);\n        LogUtils.i(TAG,result.toString());\n\n\n        Bitmap bMap = BitmapFactory.decodeFile(result.getBarcodeImagePath());\n\n        int[] data2 = new int[bMap.getWidth() * bMap.getHeight()];\n        bMap.getPixels(data2, 0, bMap.getWidth(), 0, 0, bMap.getWidth(), bMap.getHeight());\n        RGBLuminanceSource rgbLuminanceSource = new RGBLuminanceSource(bMap.getWidth(),bMap.getHeight(),data2);\n\n        LuminanceSource source = rgbLuminanceSource;\n        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));\n        Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>    ();\n        hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);\n        MultiFormatReader mreader = new MultiFormatReader();\n        GenericMultipleBarcodeReader multireader = new GenericMultipleBarcodeReader(mreader);\n        try {\n            Result[] result2 = multireader.decodeMultiple(bitmap,hints);\n            if(result != null){\n                for(Result kp : result2)\n                {\n                    System.out.println(kp.toString());\n                    LogUtils.i(TAG,kp.toString());\n                }\n            }\n\n        } catch (NotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n```\n\n# 4.运行效果\n\n在log中我们可以看到扫描的结果\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fyu9z0ls83j30sy0he420.jpg)\n\n# 5.结论\n\n我们可以通过`GenericMultipleBarcodeReader`来实现扫面多个条形码，但是效果可能不是很稳定，这个识别的效果跟相机扫描出来的图片有关，先记下来，以后再好好优化下。\n\n\n\n\n\n\n",
        "source": "_posts/20190103UseZXingScanCodes.md",
        "raw": "---\ntitle: 使用ZXing实现扫描多个条形码页面\ndate: 2019-01-03 17:08:54\ntags:\n- Android\ncategories:\n- Android开发笔记\n---\n\n# 1.前言\n\nZXing是google官方推出的跨平台的基于Java实现处理扫面二维码或者条形码的库。支持很多格式，一维条码支持UPC-A，UPC-E，EAN-8，Code 39，Code 93等格式，二维条码支持QR Code，Data Matrix，PDF 417，MaxiCode等格式。\n\n我们通常使用ZXing扫描的时候都是一个一个的去扫，但是用户的实际操作环境却不尽然。比如说下图：\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg)\n\n<!--more-->\n\n# 2.解决方案\n\nZXing中有一个类`GenericMultipleBarcodeReader`\n\n看下这个类的源码：\n\n```java\npublic final class GenericMultipleBarcodeReader implements MultipleBarcodeReader {\n\n  private static final int MIN_DIMENSION_TO_RECUR = 100;\n  private static final int MAX_DEPTH = 4;\n\n  private final Reader delegate;\n\n  public GenericMultipleBarcodeReader(Reader delegate) {\n    this.delegate = delegate;\n  }\n\n  @Override\n  public Result[] decodeMultiple(BinaryBitmap image) throws NotFoundException {\n    return decodeMultiple(image, null);\n  }\n\n  @Override\n  public Result[] decodeMultiple(BinaryBitmap image, Map<DecodeHintType,?> hints)\n      throws NotFoundException {\n    List<Result> results = new ArrayList<>();\n    doDecodeMultiple(image, hints, results, 0, 0, 0);\n    if (results.isEmpty()) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n    return results.toArray(new Result[results.size()]);\n  }\n\n  private void doDecodeMultiple(BinaryBitmap image,\n                                Map<DecodeHintType,?> hints,\n                                List<Result> results,\n                                int xOffset,\n                                int yOffset,\n                                int currentDepth) {\n    if (currentDepth > MAX_DEPTH) {\n      return;\n    }\n\n    Result result;\n    try {\n      result = delegate.decode(image, hints);\n    } catch (ReaderException ignored) {\n      return;\n    }\n    boolean alreadyFound = false;\n    for (Result existingResult : results) {\n      if (existingResult.getText().equals(result.getText())) {\n        alreadyFound = true;\n        break;\n      }\n    }\n    if (!alreadyFound) {\n      results.add(translateResultPoints(result, xOffset, yOffset));\n    }\n    ResultPoint[] resultPoints = result.getResultPoints();\n    if (resultPoints == null || resultPoints.length == 0) {\n      return;\n    }\n    int width = image.getWidth();\n    int height = image.getHeight();\n    float minX = width;\n    float minY = height;\n    float maxX = 0.0f;\n    float maxY = 0.0f;\n    for (ResultPoint point : resultPoints) {\n      if (point == null) {\n        continue;\n      }\n      float x = point.getX();\n      float y = point.getY();\n      if (x < minX) {\n        minX = x;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n      if (x > maxX) {\n        maxX = x;\n      }\n      if (y > maxY) {\n        maxY = y;\n      }\n    }\n\n    // Decode left of barcode\n    if (minX > MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop(0, 0, (int) minX, height),\n                       hints, results,\n                       xOffset, yOffset,\n                       currentDepth + 1);\n    }\n    // Decode above barcode\n    if (minY > MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop(0, 0, width, (int) minY),\n                       hints, results,\n                       xOffset, yOffset,\n                       currentDepth + 1);\n    }\n    // Decode right of barcode\n    if (maxX < width - MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop((int) maxX, 0, width - (int) maxX, height),\n                       hints, results,\n                       xOffset + (int) maxX, yOffset,\n                       currentDepth + 1);\n    }\n    // Decode below barcode\n    if (maxY < height - MIN_DIMENSION_TO_RECUR) {\n      doDecodeMultiple(image.crop(0, (int) maxY, width, height - (int) maxY),\n                       hints, results,\n                       xOffset, yOffset + (int) maxY,\n                       currentDepth + 1);\n    }\n  }\n\n  private static Result translateResultPoints(Result result, int xOffset, int yOffset) {\n    ResultPoint[] oldResultPoints = result.getResultPoints();\n    if (oldResultPoints == null) {\n      return result;\n    }\n    ResultPoint[] newResultPoints = new ResultPoint[oldResultPoints.length];\n    for (int i = 0; i < oldResultPoints.length; i++) {\n      ResultPoint oldPoint = oldResultPoints[i];\n      if (oldPoint != null) {\n        newResultPoints[i] = new ResultPoint(oldPoint.getX() + xOffset, oldPoint.getY() + yOffset);\n      }\n    }\n    Result newResult = new Result(result.getText(),\n                                  result.getRawBytes(),\n                                  result.getNumBits(),\n                                  newResultPoints,\n                                  result.getBarcodeFormat(),\n                                  result.getTimestamp());\n    newResult.putAllMetadata(result.getResultMetadata());\n    return newResult;\n  }\n\n}\n```\n\n![](https://ws4.sinaimg.cn/large/006tNc79ly1fyu9y8z0lrj30kx0jpjuy.jpg)\n\n可以看到`GenericMultipleBarcodeReader`中`decodeMultiple`返回 `Result[]`,所以我们可以根据这个类实现条形码的多个返回。\n\n# 3.实现过程\n\n## 3.1 gradle引入ZXing包\n\n```java\nimplementation('com.journeyapps:zxing-android-embedded:3.6.0') { transitive = false }\n    implementation 'com.google.zxing:core:3.3.2'\n```\n\n## 3.2 调用ZXing的扫描页面\n\n```java\nIntentIntegrator intentIntegrator = new IntentIntegrator(MainActivity.this);\n                intentIntegrator\n                        .setPrompt(\"\")\n                        .setBeepEnabled(false)\n                        .setBarcodeImageEnabled(true)\n                        .setDesiredBarcodeFormats(IntentIntegrator.CODE_128)\n                        .initiateScan();\n```\n\n这里将`setBarcodeImageEnabled(true)`设置成true，就可以在activity的回调里面获取到扫描的二维码的路径。\n\n## 3.3 在`onActivityResult`中处理\n\n```java\n@Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);\n        LogUtils.i(TAG,result.toString());\n\n\n        Bitmap bMap = BitmapFactory.decodeFile(result.getBarcodeImagePath());\n\n        int[] data2 = new int[bMap.getWidth() * bMap.getHeight()];\n        bMap.getPixels(data2, 0, bMap.getWidth(), 0, 0, bMap.getWidth(), bMap.getHeight());\n        RGBLuminanceSource rgbLuminanceSource = new RGBLuminanceSource(bMap.getWidth(),bMap.getHeight(),data2);\n\n        LuminanceSource source = rgbLuminanceSource;\n        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));\n        Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>    ();\n        hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);\n        MultiFormatReader mreader = new MultiFormatReader();\n        GenericMultipleBarcodeReader multireader = new GenericMultipleBarcodeReader(mreader);\n        try {\n            Result[] result2 = multireader.decodeMultiple(bitmap,hints);\n            if(result != null){\n                for(Result kp : result2)\n                {\n                    System.out.println(kp.toString());\n                    LogUtils.i(TAG,kp.toString());\n                }\n            }\n\n        } catch (NotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n```\n\n# 4.运行效果\n\n在log中我们可以看到扫描的结果\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg)\n\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fyu9z0ls83j30sy0he420.jpg)\n\n# 5.结论\n\n我们可以通过`GenericMultipleBarcodeReader`来实现扫面多个条形码，但是效果可能不是很稳定，这个识别的效果跟相机扫描出来的图片有关，先记下来，以后再好好优化下。\n\n\n\n\n\n\n",
        "slug": "20190103UseZXingScanCodes",
        "published": 1,
        "updated": "2020-05-19T02:32:04.675Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1c000652j9me7yt70m",
        "content": "<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><p>ZXing是google官方推出的跨平台的基于Java实现处理扫面二维码或者条形码的库。支持很多格式，一维条码支持UPC-A，UPC-E，EAN-8，Code 39，Code 93等格式，二维条码支持QR Code，Data Matrix，PDF 417，MaxiCode等格式。</p>\n<p>我们通常使用ZXing扫描的时候都是一个一个的去扫，但是用户的实际操作环境却不尽然。比如说下图：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg\" alt></p>\n<a id=\"more\"></a>\n<h1 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h1><p>ZXing中有一个类<code>GenericMultipleBarcodeReader</code></p>\n<p>看下这个类的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMultipleBarcodeReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">MultipleBarcodeReader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_DIMENSION_TO_RECUR = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_DEPTH = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Reader delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GenericMultipleBarcodeReader</span><span class=\"params\">(Reader delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = delegate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Result[] decodeMultiple(BinaryBitmap image) <span class=\"keyword\">throws</span> NotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decodeMultiple(image, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Result[] decodeMultiple(BinaryBitmap image, Map&lt;DecodeHintType,?&gt; hints)</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> NotFoundException &#123;</span><br><span class=\"line\">    List&lt;Result&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    doDecodeMultiple(image, hints, results, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (results.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> NotFoundException.getNotFoundInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results.toArray(<span class=\"keyword\">new</span> Result[results.size()]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doDecodeMultiple</span><span class=\"params\">(BinaryBitmap image,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Map&lt;DecodeHintType,?&gt; hints,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                List&lt;Result&gt; results,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> xOffset,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> yOffset,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> currentDepth)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentDepth &gt; MAX_DEPTH) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Result result;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      result = delegate.decode(image, hints);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ReaderException ignored) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> alreadyFound = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Result existingResult : results) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (existingResult.getText().equals(result.getText())) &#123;</span><br><span class=\"line\">        alreadyFound = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!alreadyFound) &#123;</span><br><span class=\"line\">      results.add(translateResultPoints(result, xOffset, yOffset));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ResultPoint[] resultPoints = result.getResultPoints();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultPoints == <span class=\"keyword\">null</span> || resultPoints.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = image.getWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = image.getHeight();</span><br><span class=\"line\">    <span class=\"keyword\">float</span> minX = width;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> minY = height;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> maxX = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> maxY = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResultPoint point : resultPoints) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (point == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">float</span> x = point.getX();</span><br><span class=\"line\">      <span class=\"keyword\">float</span> y = point.getY();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &lt; minX) &#123;</span><br><span class=\"line\">        minX = x;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (y &lt; minY) &#123;</span><br><span class=\"line\">        minY = y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &gt; maxX) &#123;</span><br><span class=\"line\">        maxX = x;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (y &gt; maxY) &#123;</span><br><span class=\"line\">        maxY = y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Decode left of barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minX &gt; MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop(<span class=\"number\">0</span>, <span class=\"number\">0</span>, (<span class=\"keyword\">int</span>) minX, height),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset, yOffset,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Decode above barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minY &gt; MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, (<span class=\"keyword\">int</span>) minY),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset, yOffset,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Decode right of barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxX &lt; width - MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop((<span class=\"keyword\">int</span>) maxX, <span class=\"number\">0</span>, width - (<span class=\"keyword\">int</span>) maxX, height),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset + (<span class=\"keyword\">int</span>) maxX, yOffset,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Decode below barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxY &lt; height - MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop(<span class=\"number\">0</span>, (<span class=\"keyword\">int</span>) maxY, width, height - (<span class=\"keyword\">int</span>) maxY),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset, yOffset + (<span class=\"keyword\">int</span>) maxY,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Result <span class=\"title\">translateResultPoints</span><span class=\"params\">(Result result, <span class=\"keyword\">int</span> xOffset, <span class=\"keyword\">int</span> yOffset)</span> </span>&#123;</span><br><span class=\"line\">    ResultPoint[] oldResultPoints = result.getResultPoints();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldResultPoints == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ResultPoint[] newResultPoints = <span class=\"keyword\">new</span> ResultPoint[oldResultPoints.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; oldResultPoints.length; i++) &#123;</span><br><span class=\"line\">      ResultPoint oldPoint = oldResultPoints[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldPoint != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        newResultPoints[i] = <span class=\"keyword\">new</span> ResultPoint(oldPoint.getX() + xOffset, oldPoint.getY() + yOffset);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Result newResult = <span class=\"keyword\">new</span> Result(result.getText(),</span><br><span class=\"line\">                                  result.getRawBytes(),</span><br><span class=\"line\">                                  result.getNumBits(),</span><br><span class=\"line\">                                  newResultPoints,</span><br><span class=\"line\">                                  result.getBarcodeFormat(),</span><br><span class=\"line\">                                  result.getTimestamp());</span><br><span class=\"line\">    newResult.putAllMetadata(result.getResultMetadata());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newResult;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fyu9y8z0lrj30kx0jpjuy.jpg\" alt></p>\n<p>可以看到<code>GenericMultipleBarcodeReader</code>中<code>decodeMultiple</code>返回 <code>Result[]</code>,所以我们可以根据这个类实现条形码的多个返回。</p>\n<h1 id=\"3-实现过程\"><a href=\"#3-实现过程\" class=\"headerlink\" title=\"3.实现过程\"></a>3.实现过程</h1><h2 id=\"3-1-gradle引入ZXing包\"><a href=\"#3-1-gradle引入ZXing包\" class=\"headerlink\" title=\"3.1 gradle引入ZXing包\"></a>3.1 gradle引入ZXing包</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">'com.journeyapps:zxing-android-embedded:3.6.0'</span>) &#123; transitive = <span class=\"keyword\">false</span> &#125;</span><br><span class=\"line\">    implementation <span class=\"string\">'com.google.zxing:core:3.3.2'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-调用ZXing的扫描页面\"><a href=\"#3-2-调用ZXing的扫描页面\" class=\"headerlink\" title=\"3.2 调用ZXing的扫描页面\"></a>3.2 调用ZXing的扫描页面</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntentIntegrator intentIntegrator = <span class=\"keyword\">new</span> IntentIntegrator(MainActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                intentIntegrator</span><br><span class=\"line\">                        .setPrompt(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                        .setBeepEnabled(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                        .setBarcodeImageEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                        .setDesiredBarcodeFormats(IntentIntegrator.CODE_128)</span><br><span class=\"line\">                        .initiateScan();</span><br></pre></td></tr></table></figure>\n<p>这里将<code>setBarcodeImageEnabled(true)</code>设置成true，就可以在activity的回调里面获取到扫描的二维码的路径。</p>\n<h2 id=\"3-3-在onActivityResult中处理\"><a href=\"#3-3-在onActivityResult中处理\" class=\"headerlink\" title=\"3.3 在onActivityResult中处理\"></a>3.3 在<code>onActivityResult</code>中处理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">        LogUtils.i(TAG,result.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Bitmap bMap = BitmapFactory.decodeFile(result.getBarcodeImagePath());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] data2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[bMap.getWidth() * bMap.getHeight()];</span><br><span class=\"line\">        bMap.getPixels(data2, <span class=\"number\">0</span>, bMap.getWidth(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, bMap.getWidth(), bMap.getHeight());</span><br><span class=\"line\">        RGBLuminanceSource rgbLuminanceSource = <span class=\"keyword\">new</span> RGBLuminanceSource(bMap.getWidth(),bMap.getHeight(),data2);</span><br><span class=\"line\"></span><br><span class=\"line\">        LuminanceSource source = rgbLuminanceSource;</span><br><span class=\"line\">        BinaryBitmap bitmap = <span class=\"keyword\">new</span> BinaryBitmap(<span class=\"keyword\">new</span> HybridBinarizer(source));</span><br><span class=\"line\">        Hashtable&lt;DecodeHintType, Object&gt; hints = <span class=\"keyword\">new</span> Hashtable&lt;DecodeHintType, Object&gt;    ();</span><br><span class=\"line\">        hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);</span><br><span class=\"line\">        MultiFormatReader mreader = <span class=\"keyword\">new</span> MultiFormatReader();</span><br><span class=\"line\">        GenericMultipleBarcodeReader multireader = <span class=\"keyword\">new</span> GenericMultipleBarcodeReader(mreader);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Result[] result2 = multireader.decodeMultiple(bitmap,hints);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(Result kp : result2)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    System.out.println(kp.toString());</span><br><span class=\"line\">                    LogUtils.i(TAG,kp.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-运行效果\"><a href=\"#4-运行效果\" class=\"headerlink\" title=\"4.运行效果\"></a>4.运行效果</h1><p>在log中我们可以看到扫描的结果<br><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg\" alt></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fyu9z0ls83j30sy0he420.jpg\" alt></p>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5.结论\"></a>5.结论</h1><p>我们可以通过<code>GenericMultipleBarcodeReader</code>来实现扫面多个条形码，但是效果可能不是很稳定，这个识别的效果跟相机扫描出来的图片有关，先记下来，以后再好好优化下。</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><p>ZXing是google官方推出的跨平台的基于Java实现处理扫面二维码或者条形码的库。支持很多格式，一维条码支持UPC-A，UPC-E，EAN-8，Code 39，Code 93等格式，二维条码支持QR Code，Data Matrix，PDF 417，MaxiCode等格式。</p>\n<p>我们通常使用ZXing扫描的时候都是一个一个的去扫，但是用户的实际操作环境却不尽然。比如说下图：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg\" alt></p>",
        "more": "<h1 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h1><p>ZXing中有一个类<code>GenericMultipleBarcodeReader</code></p>\n<p>看下这个类的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMultipleBarcodeReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">MultipleBarcodeReader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_DIMENSION_TO_RECUR = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_DEPTH = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Reader delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GenericMultipleBarcodeReader</span><span class=\"params\">(Reader delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delegate = delegate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Result[] decodeMultiple(BinaryBitmap image) <span class=\"keyword\">throws</span> NotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decodeMultiple(image, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Result[] decodeMultiple(BinaryBitmap image, Map&lt;DecodeHintType,?&gt; hints)</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> NotFoundException &#123;</span><br><span class=\"line\">    List&lt;Result&gt; results = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    doDecodeMultiple(image, hints, results, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (results.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> NotFoundException.getNotFoundInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results.toArray(<span class=\"keyword\">new</span> Result[results.size()]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doDecodeMultiple</span><span class=\"params\">(BinaryBitmap image,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Map&lt;DecodeHintType,?&gt; hints,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                List&lt;Result&gt; results,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> xOffset,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> yOffset,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> currentDepth)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentDepth &gt; MAX_DEPTH) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Result result;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      result = delegate.decode(image, hints);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ReaderException ignored) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> alreadyFound = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Result existingResult : results) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (existingResult.getText().equals(result.getText())) &#123;</span><br><span class=\"line\">        alreadyFound = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!alreadyFound) &#123;</span><br><span class=\"line\">      results.add(translateResultPoints(result, xOffset, yOffset));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ResultPoint[] resultPoints = result.getResultPoints();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultPoints == <span class=\"keyword\">null</span> || resultPoints.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = image.getWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = image.getHeight();</span><br><span class=\"line\">    <span class=\"keyword\">float</span> minX = width;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> minY = height;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> maxX = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> maxY = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ResultPoint point : resultPoints) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (point == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">float</span> x = point.getX();</span><br><span class=\"line\">      <span class=\"keyword\">float</span> y = point.getY();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &lt; minX) &#123;</span><br><span class=\"line\">        minX = x;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (y &lt; minY) &#123;</span><br><span class=\"line\">        minY = y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &gt; maxX) &#123;</span><br><span class=\"line\">        maxX = x;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (y &gt; maxY) &#123;</span><br><span class=\"line\">        maxY = y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Decode left of barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minX &gt; MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop(<span class=\"number\">0</span>, <span class=\"number\">0</span>, (<span class=\"keyword\">int</span>) minX, height),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset, yOffset,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Decode above barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minY &gt; MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, (<span class=\"keyword\">int</span>) minY),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset, yOffset,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Decode right of barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxX &lt; width - MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop((<span class=\"keyword\">int</span>) maxX, <span class=\"number\">0</span>, width - (<span class=\"keyword\">int</span>) maxX, height),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset + (<span class=\"keyword\">int</span>) maxX, yOffset,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Decode below barcode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxY &lt; height - MIN_DIMENSION_TO_RECUR) &#123;</span><br><span class=\"line\">      doDecodeMultiple(image.crop(<span class=\"number\">0</span>, (<span class=\"keyword\">int</span>) maxY, width, height - (<span class=\"keyword\">int</span>) maxY),</span><br><span class=\"line\">                       hints, results,</span><br><span class=\"line\">                       xOffset, yOffset + (<span class=\"keyword\">int</span>) maxY,</span><br><span class=\"line\">                       currentDepth + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Result <span class=\"title\">translateResultPoints</span><span class=\"params\">(Result result, <span class=\"keyword\">int</span> xOffset, <span class=\"keyword\">int</span> yOffset)</span> </span>&#123;</span><br><span class=\"line\">    ResultPoint[] oldResultPoints = result.getResultPoints();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldResultPoints == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ResultPoint[] newResultPoints = <span class=\"keyword\">new</span> ResultPoint[oldResultPoints.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; oldResultPoints.length; i++) &#123;</span><br><span class=\"line\">      ResultPoint oldPoint = oldResultPoints[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldPoint != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        newResultPoints[i] = <span class=\"keyword\">new</span> ResultPoint(oldPoint.getX() + xOffset, oldPoint.getY() + yOffset);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Result newResult = <span class=\"keyword\">new</span> Result(result.getText(),</span><br><span class=\"line\">                                  result.getRawBytes(),</span><br><span class=\"line\">                                  result.getNumBits(),</span><br><span class=\"line\">                                  newResultPoints,</span><br><span class=\"line\">                                  result.getBarcodeFormat(),</span><br><span class=\"line\">                                  result.getTimestamp());</span><br><span class=\"line\">    newResult.putAllMetadata(result.getResultMetadata());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newResult;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1fyu9y8z0lrj30kx0jpjuy.jpg\" alt></p>\n<p>可以看到<code>GenericMultipleBarcodeReader</code>中<code>decodeMultiple</code>返回 <code>Result[]</code>,所以我们可以根据这个类实现条形码的多个返回。</p>\n<h1 id=\"3-实现过程\"><a href=\"#3-实现过程\" class=\"headerlink\" title=\"3.实现过程\"></a>3.实现过程</h1><h2 id=\"3-1-gradle引入ZXing包\"><a href=\"#3-1-gradle引入ZXing包\" class=\"headerlink\" title=\"3.1 gradle引入ZXing包\"></a>3.1 gradle引入ZXing包</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">'com.journeyapps:zxing-android-embedded:3.6.0'</span>) &#123; transitive = <span class=\"keyword\">false</span> &#125;</span><br><span class=\"line\">    implementation <span class=\"string\">'com.google.zxing:core:3.3.2'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-调用ZXing的扫描页面\"><a href=\"#3-2-调用ZXing的扫描页面\" class=\"headerlink\" title=\"3.2 调用ZXing的扫描页面\"></a>3.2 调用ZXing的扫描页面</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntentIntegrator intentIntegrator = <span class=\"keyword\">new</span> IntentIntegrator(MainActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                intentIntegrator</span><br><span class=\"line\">                        .setPrompt(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                        .setBeepEnabled(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                        .setBarcodeImageEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                        .setDesiredBarcodeFormats(IntentIntegrator.CODE_128)</span><br><span class=\"line\">                        .initiateScan();</span><br></pre></td></tr></table></figure>\n<p>这里将<code>setBarcodeImageEnabled(true)</code>设置成true，就可以在activity的回调里面获取到扫描的二维码的路径。</p>\n<h2 id=\"3-3-在onActivityResult中处理\"><a href=\"#3-3-在onActivityResult中处理\" class=\"headerlink\" title=\"3.3 在onActivityResult中处理\"></a>3.3 在<code>onActivityResult</code>中处理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">        LogUtils.i(TAG,result.toString());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Bitmap bMap = BitmapFactory.decodeFile(result.getBarcodeImagePath());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] data2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[bMap.getWidth() * bMap.getHeight()];</span><br><span class=\"line\">        bMap.getPixels(data2, <span class=\"number\">0</span>, bMap.getWidth(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, bMap.getWidth(), bMap.getHeight());</span><br><span class=\"line\">        RGBLuminanceSource rgbLuminanceSource = <span class=\"keyword\">new</span> RGBLuminanceSource(bMap.getWidth(),bMap.getHeight(),data2);</span><br><span class=\"line\"></span><br><span class=\"line\">        LuminanceSource source = rgbLuminanceSource;</span><br><span class=\"line\">        BinaryBitmap bitmap = <span class=\"keyword\">new</span> BinaryBitmap(<span class=\"keyword\">new</span> HybridBinarizer(source));</span><br><span class=\"line\">        Hashtable&lt;DecodeHintType, Object&gt; hints = <span class=\"keyword\">new</span> Hashtable&lt;DecodeHintType, Object&gt;    ();</span><br><span class=\"line\">        hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);</span><br><span class=\"line\">        MultiFormatReader mreader = <span class=\"keyword\">new</span> MultiFormatReader();</span><br><span class=\"line\">        GenericMultipleBarcodeReader multireader = <span class=\"keyword\">new</span> GenericMultipleBarcodeReader(mreader);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Result[] result2 = multireader.decodeMultiple(bitmap,hints);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(Result kp : result2)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    System.out.println(kp.toString());</span><br><span class=\"line\">                    LogUtils.i(TAG,kp.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-运行效果\"><a href=\"#4-运行效果\" class=\"headerlink\" title=\"4.运行效果\"></a>4.运行效果</h1><p>在log中我们可以看到扫描的结果<br><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fyu9xmvmjgj30go08xn56.jpg\" alt></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fyu9z0ls83j30sy0he420.jpg\" alt></p>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5.结论\"></a>5.结论</h1><p>我们可以通过<code>GenericMultipleBarcodeReader</code>来实现扫面多个条形码，但是效果可能不是很稳定，这个识别的效果跟相机扫描出来的图片有关，先记下来，以后再好好优化下。</p>"
      },
      {
        "title": "android-Camera2Basic 解析",
        "date": "2019-01-23T09:08:54.000Z",
        "_content": "\n\n\n# Android Camera2介绍\n\nAndroid 5.0(API Level 21) 重新设计了 Camera，废弃了之前的 Camera，改用现在的 [Camera2 API](https://developer.android.com/reference/android/hardware/camera2/package-summary)，在Camera2上引入了**Session/Request**的概念，使用的复杂度远超之前的 Camera。\n\n<!--more-->\n\n## Camera2主要类简介\n\n- **CameraManager**：摄像头管理类，用于检测，打开系统摄像头，可以通过`getCameraCharacteristics(cameraId)`获取摄像头的特征  \n- **CameraCharacteristics**：相机的特性类，可以得到相机是否支持自动对焦，是否支持闪光灯等特征\n- **CameraDevice**：相机设备类\n- **CameraCaptureSession**：用于创建预览，拍照的Session类。\n- **CaptureRequest**：相机的请求类，可以通过这个类获取一次捕获的请求，可以设置一些参数等。\n- **CameraRequest**和**CameraRequest.Builder**：当程序调用`setRepeatingRequest()`方法进行预览时，或调用`capture()`方法进行拍照时，都需要传入**CameraRequest**参数。**CameraRequest**代表了一次捕获请求，用于描述捕获图片的各种参数设置，比如对焦模式、曝光模式……总之，程序需要对照片所做的各种控制，都通过**CameraRequest**参数进行设置。**CameraRequest.Builder**则负责生成**CameraRequest**对象。\n\n## Camera2 API 基本架构\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fzhvmxx1tlj30ok0amwf1.jpg)\n\n- APP通过创建一个CaptureRequest向CameraDevice发起Capture请求  \n- CameraDevice收到请求后返回对应数据的预览数据  \n- 点击拍照后，会从ImageReader中读取数据  \n- CaptureRequest代表请求控制的Camera参数, CameraMetadata(CaptureResult)则表示当前返回帧中Camera使用的参数以及当前状态.\n\n\n## 使用流程\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fzhvmk3ykcj30f70kv0uc.jpg)\n\n- **初始化，打开Camera**\n\n    1. 通过\n    \n        ```java\n        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)\n                != PackageManager.PERMISSION_GRANTED) {\n            requestCameraPermission();\n            return;\n        }\n        ```\n        获取权限\n    2. 通过   `context.getSystemService(Context.CAMERA_SERVICE)` 获取`CameraManager`\n    3. 通过`CameraManager.getCameraCharacteristics(cameraId)`获取相机的摄像头的特性\n    \n        - `SENSOR_ORIENTATION`：获取摄像头的拍照的方向\n        - `LENS_FACING`：获取摄像头的方向。`LENS_FACING_FRONT`是前摄像头，`LENS_FACING_BACK`是后摄像头。\n        - 获取FPS的范围\n        - 获取大小\n    4. 调用`CameraManager .open()`方法在回调中得到`CameraDevice`.  \n- **Create Session**\n    通过`CameraDevice.createCaptureSession() `在回调中获取`CameraCaptureSession`.\n- **Config Session**\n    构建`CaptureRequest`, 有三种模式可选 预览/拍照/录像.  \n- **Capture**\n    拍照数据可以在`ImageReader.OnImageAvailableListener`回调中获取, `CaptureCallback`中则可获取拍照实际的参数和Camera当前状态.\n    \n\n\n\n# android-Camera2Basic介绍\n\n[android-Camera2Basic](https://github.com/googlesamples/android-Camera2Basic)是谷歌官方给的Camera2的demo，演示了Camrea2 API的基本功能，通过这个Demo，我们可以掌握连接设备，显示预览，以及拍照的基本使用。\n\n## 项目结构\n\n\n```java\n├── .DS_Store\n└── camera2basic\n    ├── AutoFitTextureView.java\n    ├── Camera2BasicFragment.java\n    └── CameraActivity.java\n```\n\n\n## 代码详解\n\n### 打开相机，创建预览\n#### openCamera\n```java\nprivate void openCamera(int width, int height) {\n        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)\n                != PackageManager.PERMISSION_GRANTED) {\n            //请求权限\n            requestCameraPermission();\n            return;\n        }\n        //设置相机相关的参数\n        setUpCameraOutputs(width, height);\n        configureTransform(width, height);\n        Activity activity = getActivity();\n        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);\n        try {\n            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {\n                throw new RuntimeException(\"Time out waiting to lock camera opening.\");\n            }\n            manager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"Interrupted while trying to lock camera opening.\", e);\n        }\n    }    \n```\n\n##### setUpCameraOutputs(width, height)\n        \n```java\n@SuppressWarnings(\"SuspiciousNameCombination\")\n    private void setUpCameraOutputs(int width, int height) {\n        Activity activity = getActivity();\n        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);\n        try {\n            //获取摄像头可用列表\n            for (String cameraId : manager.getCameraIdList()) {\n                //获取相机的特性\n                CameraCharacteristics characteristics\n                        = manager.getCameraCharacteristics(cameraId);\n\n                // 不使用前置摄像头\n                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);\n                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {\n                    continue;\n                }\n\n                StreamConfigurationMap map = characteristics.get(\n                        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n                if (map == null) {\n                    continue;\n                }\n\n                // For still image captures, we use the largest available size.\n                Size largest = Collections.max(\n                        Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),\n                        new CompareSizesByArea());\n                //设置ImageReader接收的图片格式，以及允许接收的最大图片数目\n                mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),\n                        ImageFormat.JPEG, /*maxImages*/2);\n                //设置图片存储的监听\n                mImageReader.setOnImageAvailableListener(\n                        mOnImageAvailableListener, mBackgroundHandler);\n\n                ...\n            }        \n        \n```\n\n\n#### CameraDevice.StateCallback监听\n    \n```java\nprivate final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {\n\n        @Override\n        public void onOpened(@NonNull CameraDevice cameraDevice) {\n            // This method is called when the camera is opened.  We start camera preview here.\n            mCameraOpenCloseLock.release();\n            mCameraDevice = cameraDevice;\n            //创建PreviewSession\n            createCameraPreviewSession();\n        }\n\n        @Override\n        public void onDisconnected(@NonNull CameraDevice cameraDevice) {\n            mCameraOpenCloseLock.release();\n            cameraDevice.close();\n            mCameraDevice = null;\n        }\n\n        @Override\n        public void onError(@NonNull CameraDevice cameraDevice, int error) {\n            mCameraOpenCloseLock.release();\n            cameraDevice.close();\n            mCameraDevice = null;\n            Activity activity = getActivity();\n            if (null != activity) {\n                activity.finish();\n            }\n        }\n\n    };\n\n```\n    \n#### createCaptureSession\n```java\nprivate void createCameraPreviewSession() {\n        try {\n            SurfaceTexture texture = mTextureView.getSurfaceTexture();\n            assert texture != null;\n\n            // We configure the size of default buffer to be the size of camera preview we want.\n            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());\n\n            // This is the output Surface we need to start preview.\n            Surface surface = new Surface(texture);\n\n            // We set up a CaptureRequest.Builder with the output Surface.\n            mPreviewRequestBuilder\n                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\n            mPreviewRequestBuilder.addTarget(surface);\n\n            // Here, we create a CameraCaptureSession for camera preview.\n            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),\n                    new CameraCaptureSession.StateCallback() {\n\n                        @Override\n                        public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {\n                            // The camera is already closed\n                            if (null == mCameraDevice) {\n                                return;\n                            }\n\n                            // When the session is ready, we start displaying the preview.\n                            mCaptureSession = cameraCaptureSession;\n                            try {\n                                // Auto focus should be continuous for camera preview.\n                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,\n                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\n                                // Flash is automatically enabled when necessary.\n                                setAutoFlash(mPreviewRequestBuilder);\n\n                                // Finally, we start displaying the camera preview.\n                                mPreviewRequest = mPreviewRequestBuilder.build();\n                                mCaptureSession.setRepeatingRequest(mPreviewRequest,\n                                        mCaptureCallback, mBackgroundHandler);\n                            } catch (CameraAccessException e) {\n                                e.printStackTrace();\n                            }\n                        }\n\n                        @Override\n                        public void onConfigureFailed(\n                                @NonNull CameraCaptureSession cameraCaptureSession) {\n                            showToast(\"Failed\");\n                        }\n                    }, null\n            );\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n```\n        \n  项目中有注释，不做过多说明\n\n### 拍照\n\n拍照的过程就是我们向已经打开好的相机获取静态预览帧的过程。\n\n#### 对焦\n\n```java\nprivate void lockFocus() {\n        try {\n            // This is how to tell the camera to lock focus.\n            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,\n                    CameraMetadata.CONTROL_AF_TRIGGER_START);\n            // Tell #mCaptureCallback to wait for the lock.\n            mState = STATE_WAITING_LOCK;\n            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,\n                    mBackgroundHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n向`CameraCaptureSession`发送对焦请求，并且对对焦是否成功进行监听，在mCaptureCallback中对回调进行处理。\n\n```java\nprivate CameraCaptureSession.CaptureCallback mCaptureCallback\n            = new CameraCaptureSession.CaptureCallback() {\n\n        private void process(CaptureResult result) {\n            switch (mState) {\n                case STATE_PREVIEW: {\n                    // We have nothing to do when the camera preview is working normally.\n                    break;\n                }\n                //等待对焦\n                case STATE_WAITING_LOCK: {\n                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);\n                    if (afState == null) {\n                        captureStillPicture();\n                    } else if (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||\n                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) {\n                        // CONTROL_AE_STATE can be null on some devices\n                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\n                        if (aeState == null ||\n                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {\n                            mState = STATE_PICTURE_TAKEN;\n                            //对焦完成\n                            captureStillPicture();\n                        } else {\n                            runPrecaptureSequence();\n                        }\n                    }\n                    break;\n                }\n                case STATE_WAITING_PRECAPTURE: {\n                    // CONTROL_AE_STATE can be null on some devices\n                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\n                    if (aeState == null ||\n                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||\n                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {\n                        mState = STATE_WAITING_NON_PRECAPTURE;\n                    }\n                    break;\n                }\n                case STATE_WAITING_NON_PRECAPTURE: {\n                    // CONTROL_AE_STATE can be null on some devices\n                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\n                    if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {\n                        mState = STATE_PICTURE_TAKEN;\n                        captureStillPicture();\n                    }\n                    break;\n                }\n            }\n        }\n\n```\n\n#### 拍摄图片\n\n```java\nprivate void captureStillPicture() {\n        try {\n            final Activity activity = getActivity();\n            if (null == activity || null == mCameraDevice) {\n                return;\n            }\n            // This is the CaptureRequest.Builder that we use to take a picture.\n            final CaptureRequest.Builder captureBuilder =\n                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);\n            captureBuilder.addTarget(mImageReader.getSurface());\n\n            // Use the same AE and AF modes as the preview.\n            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,\n                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\n            setAutoFlash(captureBuilder);\n\n            // Orientation\n            int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));\n\n            CameraCaptureSession.CaptureCallback CaptureCallback\n                    = new CameraCaptureSession.CaptureCallback() {\n\n                @Override\n                public void onCaptureCompleted(@NonNull CameraCaptureSession session,\n                                               @NonNull CaptureRequest request,\n                                               @NonNull TotalCaptureResult result) {\n                    showToast(\"Saved: \" + mFile);\n                    Log.d(TAG, mFile.toString());\n                    unlockFocus();\n                }\n            };\n\n            mCaptureSession.stopRepeating();\n            mCaptureSession.abortCaptures();\n            mCaptureSession.capture(captureBuilder.build(), CaptureCallback, null);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n代码中有相应的注释。\n注意Demo中的`onCaptureCompleted`完成后，又调用`unlockFocus()`解锁了焦点。是因为Demo做的是连续拍照，如果实现的是只拍一张照片，需要将`unlockFocus()`去掉。\n\n#### 存图片\n\n存图片的操作是在之前设置ImageReader的监听方法里面进行存储的。\n\n```java\nprivate final ImageReader.OnImageAvailableListener mOnImageAvailableListener\n            = new ImageReader.OnImageAvailableListener() {\n\n        @Override\n        public void onImageAvailable(ImageReader reader) {\n            mBackgroundHandler.post(new ImageSaver(reader.acquireNextImage(), mFile));\n        }\n\n    };\n```\n\n# 参考资料\n\n\n[Android Camera2 使用总结](https://www.jianshu.com/p/73fed068a795)\n\n[Android Camera2 简介](https://www.jianshu.com/p/23e8789fbc10)\n\n\n\n\n\n\n\n\n",
        "source": "_posts/20190123Camera2FragmentUse.md",
        "raw": "---\ntitle: android-Camera2Basic 解析\ndate: 2019-01-23 17:08:54\ntags:\n- Android\ncategories:\n- Android开发笔记\n---\n\n\n\n# Android Camera2介绍\n\nAndroid 5.0(API Level 21) 重新设计了 Camera，废弃了之前的 Camera，改用现在的 [Camera2 API](https://developer.android.com/reference/android/hardware/camera2/package-summary)，在Camera2上引入了**Session/Request**的概念，使用的复杂度远超之前的 Camera。\n\n<!--more-->\n\n## Camera2主要类简介\n\n- **CameraManager**：摄像头管理类，用于检测，打开系统摄像头，可以通过`getCameraCharacteristics(cameraId)`获取摄像头的特征  \n- **CameraCharacteristics**：相机的特性类，可以得到相机是否支持自动对焦，是否支持闪光灯等特征\n- **CameraDevice**：相机设备类\n- **CameraCaptureSession**：用于创建预览，拍照的Session类。\n- **CaptureRequest**：相机的请求类，可以通过这个类获取一次捕获的请求，可以设置一些参数等。\n- **CameraRequest**和**CameraRequest.Builder**：当程序调用`setRepeatingRequest()`方法进行预览时，或调用`capture()`方法进行拍照时，都需要传入**CameraRequest**参数。**CameraRequest**代表了一次捕获请求，用于描述捕获图片的各种参数设置，比如对焦模式、曝光模式……总之，程序需要对照片所做的各种控制，都通过**CameraRequest**参数进行设置。**CameraRequest.Builder**则负责生成**CameraRequest**对象。\n\n## Camera2 API 基本架构\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1fzhvmxx1tlj30ok0amwf1.jpg)\n\n- APP通过创建一个CaptureRequest向CameraDevice发起Capture请求  \n- CameraDevice收到请求后返回对应数据的预览数据  \n- 点击拍照后，会从ImageReader中读取数据  \n- CaptureRequest代表请求控制的Camera参数, CameraMetadata(CaptureResult)则表示当前返回帧中Camera使用的参数以及当前状态.\n\n\n## 使用流程\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fzhvmk3ykcj30f70kv0uc.jpg)\n\n- **初始化，打开Camera**\n\n    1. 通过\n    \n        ```java\n        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)\n                != PackageManager.PERMISSION_GRANTED) {\n            requestCameraPermission();\n            return;\n        }\n        ```\n        获取权限\n    2. 通过   `context.getSystemService(Context.CAMERA_SERVICE)` 获取`CameraManager`\n    3. 通过`CameraManager.getCameraCharacteristics(cameraId)`获取相机的摄像头的特性\n    \n        - `SENSOR_ORIENTATION`：获取摄像头的拍照的方向\n        - `LENS_FACING`：获取摄像头的方向。`LENS_FACING_FRONT`是前摄像头，`LENS_FACING_BACK`是后摄像头。\n        - 获取FPS的范围\n        - 获取大小\n    4. 调用`CameraManager .open()`方法在回调中得到`CameraDevice`.  \n- **Create Session**\n    通过`CameraDevice.createCaptureSession() `在回调中获取`CameraCaptureSession`.\n- **Config Session**\n    构建`CaptureRequest`, 有三种模式可选 预览/拍照/录像.  \n- **Capture**\n    拍照数据可以在`ImageReader.OnImageAvailableListener`回调中获取, `CaptureCallback`中则可获取拍照实际的参数和Camera当前状态.\n    \n\n\n\n# android-Camera2Basic介绍\n\n[android-Camera2Basic](https://github.com/googlesamples/android-Camera2Basic)是谷歌官方给的Camera2的demo，演示了Camrea2 API的基本功能，通过这个Demo，我们可以掌握连接设备，显示预览，以及拍照的基本使用。\n\n## 项目结构\n\n\n```java\n├── .DS_Store\n└── camera2basic\n    ├── AutoFitTextureView.java\n    ├── Camera2BasicFragment.java\n    └── CameraActivity.java\n```\n\n\n## 代码详解\n\n### 打开相机，创建预览\n#### openCamera\n```java\nprivate void openCamera(int width, int height) {\n        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)\n                != PackageManager.PERMISSION_GRANTED) {\n            //请求权限\n            requestCameraPermission();\n            return;\n        }\n        //设置相机相关的参数\n        setUpCameraOutputs(width, height);\n        configureTransform(width, height);\n        Activity activity = getActivity();\n        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);\n        try {\n            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {\n                throw new RuntimeException(\"Time out waiting to lock camera opening.\");\n            }\n            manager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"Interrupted while trying to lock camera opening.\", e);\n        }\n    }    \n```\n\n##### setUpCameraOutputs(width, height)\n        \n```java\n@SuppressWarnings(\"SuspiciousNameCombination\")\n    private void setUpCameraOutputs(int width, int height) {\n        Activity activity = getActivity();\n        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);\n        try {\n            //获取摄像头可用列表\n            for (String cameraId : manager.getCameraIdList()) {\n                //获取相机的特性\n                CameraCharacteristics characteristics\n                        = manager.getCameraCharacteristics(cameraId);\n\n                // 不使用前置摄像头\n                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);\n                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {\n                    continue;\n                }\n\n                StreamConfigurationMap map = characteristics.get(\n                        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n                if (map == null) {\n                    continue;\n                }\n\n                // For still image captures, we use the largest available size.\n                Size largest = Collections.max(\n                        Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),\n                        new CompareSizesByArea());\n                //设置ImageReader接收的图片格式，以及允许接收的最大图片数目\n                mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),\n                        ImageFormat.JPEG, /*maxImages*/2);\n                //设置图片存储的监听\n                mImageReader.setOnImageAvailableListener(\n                        mOnImageAvailableListener, mBackgroundHandler);\n\n                ...\n            }        \n        \n```\n\n\n#### CameraDevice.StateCallback监听\n    \n```java\nprivate final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {\n\n        @Override\n        public void onOpened(@NonNull CameraDevice cameraDevice) {\n            // This method is called when the camera is opened.  We start camera preview here.\n            mCameraOpenCloseLock.release();\n            mCameraDevice = cameraDevice;\n            //创建PreviewSession\n            createCameraPreviewSession();\n        }\n\n        @Override\n        public void onDisconnected(@NonNull CameraDevice cameraDevice) {\n            mCameraOpenCloseLock.release();\n            cameraDevice.close();\n            mCameraDevice = null;\n        }\n\n        @Override\n        public void onError(@NonNull CameraDevice cameraDevice, int error) {\n            mCameraOpenCloseLock.release();\n            cameraDevice.close();\n            mCameraDevice = null;\n            Activity activity = getActivity();\n            if (null != activity) {\n                activity.finish();\n            }\n        }\n\n    };\n\n```\n    \n#### createCaptureSession\n```java\nprivate void createCameraPreviewSession() {\n        try {\n            SurfaceTexture texture = mTextureView.getSurfaceTexture();\n            assert texture != null;\n\n            // We configure the size of default buffer to be the size of camera preview we want.\n            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());\n\n            // This is the output Surface we need to start preview.\n            Surface surface = new Surface(texture);\n\n            // We set up a CaptureRequest.Builder with the output Surface.\n            mPreviewRequestBuilder\n                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\n            mPreviewRequestBuilder.addTarget(surface);\n\n            // Here, we create a CameraCaptureSession for camera preview.\n            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),\n                    new CameraCaptureSession.StateCallback() {\n\n                        @Override\n                        public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {\n                            // The camera is already closed\n                            if (null == mCameraDevice) {\n                                return;\n                            }\n\n                            // When the session is ready, we start displaying the preview.\n                            mCaptureSession = cameraCaptureSession;\n                            try {\n                                // Auto focus should be continuous for camera preview.\n                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,\n                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\n                                // Flash is automatically enabled when necessary.\n                                setAutoFlash(mPreviewRequestBuilder);\n\n                                // Finally, we start displaying the camera preview.\n                                mPreviewRequest = mPreviewRequestBuilder.build();\n                                mCaptureSession.setRepeatingRequest(mPreviewRequest,\n                                        mCaptureCallback, mBackgroundHandler);\n                            } catch (CameraAccessException e) {\n                                e.printStackTrace();\n                            }\n                        }\n\n                        @Override\n                        public void onConfigureFailed(\n                                @NonNull CameraCaptureSession cameraCaptureSession) {\n                            showToast(\"Failed\");\n                        }\n                    }, null\n            );\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n```\n        \n  项目中有注释，不做过多说明\n\n### 拍照\n\n拍照的过程就是我们向已经打开好的相机获取静态预览帧的过程。\n\n#### 对焦\n\n```java\nprivate void lockFocus() {\n        try {\n            // This is how to tell the camera to lock focus.\n            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,\n                    CameraMetadata.CONTROL_AF_TRIGGER_START);\n            // Tell #mCaptureCallback to wait for the lock.\n            mState = STATE_WAITING_LOCK;\n            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,\n                    mBackgroundHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n向`CameraCaptureSession`发送对焦请求，并且对对焦是否成功进行监听，在mCaptureCallback中对回调进行处理。\n\n```java\nprivate CameraCaptureSession.CaptureCallback mCaptureCallback\n            = new CameraCaptureSession.CaptureCallback() {\n\n        private void process(CaptureResult result) {\n            switch (mState) {\n                case STATE_PREVIEW: {\n                    // We have nothing to do when the camera preview is working normally.\n                    break;\n                }\n                //等待对焦\n                case STATE_WAITING_LOCK: {\n                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);\n                    if (afState == null) {\n                        captureStillPicture();\n                    } else if (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||\n                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) {\n                        // CONTROL_AE_STATE can be null on some devices\n                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\n                        if (aeState == null ||\n                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {\n                            mState = STATE_PICTURE_TAKEN;\n                            //对焦完成\n                            captureStillPicture();\n                        } else {\n                            runPrecaptureSequence();\n                        }\n                    }\n                    break;\n                }\n                case STATE_WAITING_PRECAPTURE: {\n                    // CONTROL_AE_STATE can be null on some devices\n                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\n                    if (aeState == null ||\n                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||\n                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {\n                        mState = STATE_WAITING_NON_PRECAPTURE;\n                    }\n                    break;\n                }\n                case STATE_WAITING_NON_PRECAPTURE: {\n                    // CONTROL_AE_STATE can be null on some devices\n                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\n                    if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {\n                        mState = STATE_PICTURE_TAKEN;\n                        captureStillPicture();\n                    }\n                    break;\n                }\n            }\n        }\n\n```\n\n#### 拍摄图片\n\n```java\nprivate void captureStillPicture() {\n        try {\n            final Activity activity = getActivity();\n            if (null == activity || null == mCameraDevice) {\n                return;\n            }\n            // This is the CaptureRequest.Builder that we use to take a picture.\n            final CaptureRequest.Builder captureBuilder =\n                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);\n            captureBuilder.addTarget(mImageReader.getSurface());\n\n            // Use the same AE and AF modes as the preview.\n            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,\n                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\n            setAutoFlash(captureBuilder);\n\n            // Orientation\n            int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));\n\n            CameraCaptureSession.CaptureCallback CaptureCallback\n                    = new CameraCaptureSession.CaptureCallback() {\n\n                @Override\n                public void onCaptureCompleted(@NonNull CameraCaptureSession session,\n                                               @NonNull CaptureRequest request,\n                                               @NonNull TotalCaptureResult result) {\n                    showToast(\"Saved: \" + mFile);\n                    Log.d(TAG, mFile.toString());\n                    unlockFocus();\n                }\n            };\n\n            mCaptureSession.stopRepeating();\n            mCaptureSession.abortCaptures();\n            mCaptureSession.capture(captureBuilder.build(), CaptureCallback, null);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n代码中有相应的注释。\n注意Demo中的`onCaptureCompleted`完成后，又调用`unlockFocus()`解锁了焦点。是因为Demo做的是连续拍照，如果实现的是只拍一张照片，需要将`unlockFocus()`去掉。\n\n#### 存图片\n\n存图片的操作是在之前设置ImageReader的监听方法里面进行存储的。\n\n```java\nprivate final ImageReader.OnImageAvailableListener mOnImageAvailableListener\n            = new ImageReader.OnImageAvailableListener() {\n\n        @Override\n        public void onImageAvailable(ImageReader reader) {\n            mBackgroundHandler.post(new ImageSaver(reader.acquireNextImage(), mFile));\n        }\n\n    };\n```\n\n# 参考资料\n\n\n[Android Camera2 使用总结](https://www.jianshu.com/p/73fed068a795)\n\n[Android Camera2 简介](https://www.jianshu.com/p/23e8789fbc10)\n\n\n\n\n\n\n\n\n",
        "slug": "20190123Camera2FragmentUse",
        "published": 1,
        "updated": "2020-05-19T02:32:04.676Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1d000752j990wy9pze",
        "content": "<h1 id=\"Android-Camera2介绍\"><a href=\"#Android-Camera2介绍\" class=\"headerlink\" title=\"Android Camera2介绍\"></a>Android Camera2介绍</h1><p>Android 5.0(API Level 21) 重新设计了 Camera，废弃了之前的 Camera，改用现在的 <a href=\"https://developer.android.com/reference/android/hardware/camera2/package-summary\" target=\"_blank\" rel=\"noopener\">Camera2 API</a>，在Camera2上引入了<strong>Session/Request</strong>的概念，使用的复杂度远超之前的 Camera。</p>\n<a id=\"more\"></a>\n<h2 id=\"Camera2主要类简介\"><a href=\"#Camera2主要类简介\" class=\"headerlink\" title=\"Camera2主要类简介\"></a>Camera2主要类简介</h2><ul>\n<li><strong>CameraManager</strong>：摄像头管理类，用于检测，打开系统摄像头，可以通过<code>getCameraCharacteristics(cameraId)</code>获取摄像头的特征  </li>\n<li><strong>CameraCharacteristics</strong>：相机的特性类，可以得到相机是否支持自动对焦，是否支持闪光灯等特征</li>\n<li><strong>CameraDevice</strong>：相机设备类</li>\n<li><strong>CameraCaptureSession</strong>：用于创建预览，拍照的Session类。</li>\n<li><strong>CaptureRequest</strong>：相机的请求类，可以通过这个类获取一次捕获的请求，可以设置一些参数等。</li>\n<li><strong>CameraRequest</strong>和<strong>CameraRequest.Builder</strong>：当程序调用<code>setRepeatingRequest()</code>方法进行预览时，或调用<code>capture()</code>方法进行拍照时，都需要传入<strong>CameraRequest</strong>参数。<strong>CameraRequest</strong>代表了一次捕获请求，用于描述捕获图片的各种参数设置，比如对焦模式、曝光模式……总之，程序需要对照片所做的各种控制，都通过<strong>CameraRequest</strong>参数进行设置。<strong>CameraRequest.Builder</strong>则负责生成<strong>CameraRequest</strong>对象。</li>\n</ul>\n<h2 id=\"Camera2-API-基本架构\"><a href=\"#Camera2-API-基本架构\" class=\"headerlink\" title=\"Camera2 API 基本架构\"></a>Camera2 API 基本架构</h2><p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fzhvmxx1tlj30ok0amwf1.jpg\" alt></p>\n<ul>\n<li>APP通过创建一个CaptureRequest向CameraDevice发起Capture请求  </li>\n<li>CameraDevice收到请求后返回对应数据的预览数据  </li>\n<li>点击拍照后，会从ImageReader中读取数据  </li>\n<li>CaptureRequest代表请求控制的Camera参数, CameraMetadata(CaptureResult)则表示当前返回帧中Camera使用的参数以及当前状态.</li>\n</ul>\n<h2 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h2><p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fzhvmk3ykcj30f70kv0uc.jpg\" alt></p>\n<ul>\n<li><p><strong>初始化，打开Camera</strong></p>\n<ol>\n<li><p>通过</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)</span><br><span class=\"line\">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">    requestCameraPermission();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 获取权限</p>\n</li>\n<li>通过   <code>context.getSystemService(Context.CAMERA_SERVICE)</code> 获取<code>CameraManager</code></li>\n<li><p>通过<code>CameraManager.getCameraCharacteristics(cameraId)</code>获取相机的摄像头的特性</p>\n<ul>\n<li><code>SENSOR_ORIENTATION</code>：获取摄像头的拍照的方向</li>\n<li><code>LENS_FACING</code>：获取摄像头的方向。<code>LENS_FACING_FRONT</code>是前摄像头，<code>LENS_FACING_BACK</code>是后摄像头。</li>\n<li>获取FPS的范围</li>\n<li>获取大小</li>\n</ul>\n</li>\n<li>调用<code>CameraManager .open()</code>方法在回调中得到<code>CameraDevice</code>.  </li>\n</ol>\n</li>\n<li><strong>Create Session</strong><br>  通过<code>CameraDevice.createCaptureSession()</code>在回调中获取<code>CameraCaptureSession</code>.</li>\n<li><strong>Config Session</strong><br>  构建<code>CaptureRequest</code>, 有三种模式可选 预览/拍照/录像.  </li>\n<li><strong>Capture</strong><br>  拍照数据可以在<code>ImageReader.OnImageAvailableListener</code>回调中获取, <code>CaptureCallback</code>中则可获取拍照实际的参数和Camera当前状态.</li>\n</ul>\n<h1 id=\"android-Camera2Basic介绍\"><a href=\"#android-Camera2Basic介绍\" class=\"headerlink\" title=\"android-Camera2Basic介绍\"></a>android-Camera2Basic介绍</h1><p><a href=\"https://github.com/googlesamples/android-Camera2Basic\" target=\"_blank\" rel=\"noopener\">android-Camera2Basic</a>是谷歌官方给的Camera2的demo，演示了Camrea2 API的基本功能，通过这个Demo，我们可以掌握连接设备，显示预览，以及拍照的基本使用。</p>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── .DS_Store</span><br><span class=\"line\">└── camera2basic</span><br><span class=\"line\">    ├── AutoFitTextureView.java</span><br><span class=\"line\">    ├── Camera2BasicFragment.java</span><br><span class=\"line\">    └── CameraActivity.java</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码详解\"><a href=\"#代码详解\" class=\"headerlink\" title=\"代码详解\"></a>代码详解</h2><h3 id=\"打开相机，创建预览\"><a href=\"#打开相机，创建预览\" class=\"headerlink\" title=\"打开相机，创建预览\"></a>打开相机，创建预览</h3><h4 id=\"openCamera\"><a href=\"#openCamera\" class=\"headerlink\" title=\"openCamera\"></a>openCamera</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openCamera</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)</span><br><span class=\"line\">                != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//请求权限</span></span><br><span class=\"line\">            requestCameraPermission();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置相机相关的参数</span></span><br><span class=\"line\">        setUpCameraOutputs(width, height);</span><br><span class=\"line\">        configureTransform(width, height);</span><br><span class=\"line\">        Activity activity = getActivity();</span><br><span class=\"line\">        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mCameraOpenCloseLock.tryAcquire(<span class=\"number\">2500</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Time out waiting to lock camera opening.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            manager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Interrupted while trying to lock camera opening.\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"setUpCameraOutputs-width-height\"><a href=\"#setUpCameraOutputs-width-height\" class=\"headerlink\" title=\"setUpCameraOutputs(width, height)\"></a>setUpCameraOutputs(width, height)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"SuspiciousNameCombination\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setUpCameraOutputs</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        Activity activity = getActivity();</span><br><span class=\"line\">        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取摄像头可用列表</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String cameraId : manager.getCameraIdList()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取相机的特性</span></span><br><span class=\"line\">                CameraCharacteristics characteristics</span><br><span class=\"line\">                        = manager.getCameraCharacteristics(cameraId);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 不使用前置摄像头</span></span><br><span class=\"line\">                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (facing != <span class=\"keyword\">null</span> &amp;&amp; facing == CameraCharacteristics.LENS_FACING_FRONT) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                StreamConfigurationMap map = characteristics.get(</span><br><span class=\"line\">                        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// For still image captures, we use the largest available size.</span></span><br><span class=\"line\">                Size largest = Collections.max(</span><br><span class=\"line\">                        Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> CompareSizesByArea());</span><br><span class=\"line\">                <span class=\"comment\">//设置ImageReader接收的图片格式，以及允许接收的最大图片数目</span></span><br><span class=\"line\">                mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),</span><br><span class=\"line\">                        ImageFormat.JPEG, <span class=\"comment\">/*maxImages*/</span><span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"comment\">//设置图片存储的监听</span></span><br><span class=\"line\">                mImageReader.setOnImageAvailableListener(</span><br><span class=\"line\">                        mOnImageAvailableListener, mBackgroundHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CameraDevice-StateCallback监听\"><a href=\"#CameraDevice-StateCallback监听\" class=\"headerlink\" title=\"CameraDevice.StateCallback监听\"></a>CameraDevice.StateCallback监听</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CameraDevice.StateCallback mStateCallback = <span class=\"keyword\">new</span> CameraDevice.StateCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpened</span><span class=\"params\">(@NonNull CameraDevice cameraDevice)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// This method is called when the camera is opened.  We start camera preview here.</span></span><br><span class=\"line\">            mCameraOpenCloseLock.release();</span><br><span class=\"line\">            mCameraDevice = cameraDevice;</span><br><span class=\"line\">            <span class=\"comment\">//创建PreviewSession</span></span><br><span class=\"line\">            createCameraPreviewSession();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDisconnected</span><span class=\"params\">(@NonNull CameraDevice cameraDevice)</span> </span>&#123;</span><br><span class=\"line\">            mCameraOpenCloseLock.release();</span><br><span class=\"line\">            cameraDevice.close();</span><br><span class=\"line\">            mCameraDevice = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(@NonNull CameraDevice cameraDevice, <span class=\"keyword\">int</span> error)</span> </span>&#123;</span><br><span class=\"line\">            mCameraOpenCloseLock.release();</span><br><span class=\"line\">            cameraDevice.close();</span><br><span class=\"line\">            mCameraDevice = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Activity activity = getActivity();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != activity) &#123;</span><br><span class=\"line\">                activity.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"createCaptureSession\"><a href=\"#createCaptureSession\" class=\"headerlink\" title=\"createCaptureSession\"></a>createCaptureSession</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createCameraPreviewSession</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            SurfaceTexture texture = mTextureView.getSurfaceTexture();</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> texture != <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// We configure the size of default buffer to be the size of camera preview we want.</span></span><br><span class=\"line\">            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// This is the output Surface we need to start preview.</span></span><br><span class=\"line\">            Surface surface = <span class=\"keyword\">new</span> Surface(texture);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// We set up a CaptureRequest.Builder with the output Surface.</span></span><br><span class=\"line\">            mPreviewRequestBuilder</span><br><span class=\"line\">                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);</span><br><span class=\"line\">            mPreviewRequestBuilder.addTarget(surface);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Here, we create a CameraCaptureSession for camera preview.</span></span><br><span class=\"line\">            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> CameraCaptureSession.StateCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigured</span><span class=\"params\">(@NonNull CameraCaptureSession cameraCaptureSession)</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"comment\">// The camera is already closed</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == mCameraDevice) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// When the session is ready, we start displaying the preview.</span></span><br><span class=\"line\">                            mCaptureSession = cameraCaptureSession;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// Auto focus should be continuous for camera preview.</span></span><br><span class=\"line\">                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,</span><br><span class=\"line\">                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);</span><br><span class=\"line\">                                <span class=\"comment\">// Flash is automatically enabled when necessary.</span></span><br><span class=\"line\">                                setAutoFlash(mPreviewRequestBuilder);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// Finally, we start displaying the camera preview.</span></span><br><span class=\"line\">                                mPreviewRequest = mPreviewRequestBuilder.build();</span><br><span class=\"line\">                                mCaptureSession.setRepeatingRequest(mPreviewRequest,</span><br><span class=\"line\">                                        mCaptureCallback, mBackgroundHandler);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">                                e.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigureFailed</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                @NonNull CameraCaptureSession cameraCaptureSession)</span> </span>&#123;</span><br><span class=\"line\">                            showToast(<span class=\"string\">\"Failed\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"keyword\">null</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>  项目中有注释，不做过多说明</p>\n<h3 id=\"拍照\"><a href=\"#拍照\" class=\"headerlink\" title=\"拍照\"></a>拍照</h3><p>拍照的过程就是我们向已经打开好的相机获取静态预览帧的过程。</p>\n<h4 id=\"对焦\"><a href=\"#对焦\" class=\"headerlink\" title=\"对焦\"></a>对焦</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">lockFocus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is how to tell the camera to lock focus.</span></span><br><span class=\"line\">            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,</span><br><span class=\"line\">                    CameraMetadata.CONTROL_AF_TRIGGER_START);</span><br><span class=\"line\">            <span class=\"comment\">// Tell #mCaptureCallback to wait for the lock.</span></span><br><span class=\"line\">            mState = STATE_WAITING_LOCK;</span><br><span class=\"line\">            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,</span><br><span class=\"line\">                    mBackgroundHandler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>向<code>CameraCaptureSession</code>发送对焦请求，并且对对焦是否成功进行监听，在mCaptureCallback中对回调进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> CameraCaptureSession.CaptureCallback mCaptureCallback</span><br><span class=\"line\">            = <span class=\"keyword\">new</span> CameraCaptureSession.CaptureCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(CaptureResult result)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (mState) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_PREVIEW: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We have nothing to do when the camera preview is working normally.</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//等待对焦</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_WAITING_LOCK: &#123;</span><br><span class=\"line\">                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (afState == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        captureStillPicture();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||</span><br><span class=\"line\">                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// CONTROL_AE_STATE can be null on some devices</span></span><br><span class=\"line\">                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (aeState == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) &#123;</span><br><span class=\"line\">                            mState = STATE_PICTURE_TAKEN;</span><br><span class=\"line\">                            <span class=\"comment\">//对焦完成</span></span><br><span class=\"line\">                            captureStillPicture();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            runPrecaptureSequence();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_WAITING_PRECAPTURE: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// CONTROL_AE_STATE can be null on some devices</span></span><br><span class=\"line\">                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aeState == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||</span><br><span class=\"line\">                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) &#123;</span><br><span class=\"line\">                        mState = STATE_WAITING_NON_PRECAPTURE;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_WAITING_NON_PRECAPTURE: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// CONTROL_AE_STATE can be null on some devices</span></span><br><span class=\"line\">                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aeState == <span class=\"keyword\">null</span> || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) &#123;</span><br><span class=\"line\">                        mState = STATE_PICTURE_TAKEN;</span><br><span class=\"line\">                        captureStillPicture();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"拍摄图片\"><a href=\"#拍摄图片\" class=\"headerlink\" title=\"拍摄图片\"></a>拍摄图片</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">captureStillPicture</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Activity activity = getActivity();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == activity || <span class=\"keyword\">null</span> == mCameraDevice) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// This is the CaptureRequest.Builder that we use to take a picture.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> CaptureRequest.Builder captureBuilder =</span><br><span class=\"line\">                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);</span><br><span class=\"line\">            captureBuilder.addTarget(mImageReader.getSurface());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Use the same AE and AF modes as the preview.</span></span><br><span class=\"line\">            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,</span><br><span class=\"line\">                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);</span><br><span class=\"line\">            setAutoFlash(captureBuilder);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Orientation</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> rotation = activity.getWindowManager().getDefaultDisplay().getRotation();</span><br><span class=\"line\">            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));</span><br><span class=\"line\"></span><br><span class=\"line\">            CameraCaptureSession.CaptureCallback CaptureCallback</span><br><span class=\"line\">                    = <span class=\"keyword\">new</span> CameraCaptureSession.CaptureCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCaptureCompleted</span><span class=\"params\">(@NonNull CameraCaptureSession session,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               @NonNull CaptureRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               @NonNull TotalCaptureResult result)</span> </span>&#123;</span><br><span class=\"line\">                    showToast(<span class=\"string\">\"Saved: \"</span> + mFile);</span><br><span class=\"line\">                    Log.d(TAG, mFile.toString());</span><br><span class=\"line\">                    unlockFocus();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            mCaptureSession.stopRepeating();</span><br><span class=\"line\">            mCaptureSession.abortCaptures();</span><br><span class=\"line\">            mCaptureSession.capture(captureBuilder.build(), CaptureCallback, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>代码中有相应的注释。<br>注意Demo中的<code>onCaptureCompleted</code>完成后，又调用<code>unlockFocus()</code>解锁了焦点。是因为Demo做的是连续拍照，如果实现的是只拍一张照片，需要将<code>unlockFocus()</code>去掉。</p>\n<h4 id=\"存图片\"><a href=\"#存图片\" class=\"headerlink\" title=\"存图片\"></a>存图片</h4><p>存图片的操作是在之前设置ImageReader的监听方法里面进行存储的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ImageReader.OnImageAvailableListener mOnImageAvailableListener</span><br><span class=\"line\">            = <span class=\"keyword\">new</span> ImageReader.OnImageAvailableListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onImageAvailable</span><span class=\"params\">(ImageReader reader)</span> </span>&#123;</span><br><span class=\"line\">            mBackgroundHandler.post(<span class=\"keyword\">new</span> ImageSaver(reader.acquireNextImage(), mFile));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.jianshu.com/p/73fed068a795\" target=\"_blank\" rel=\"noopener\">Android Camera2 使用总结</a></p>\n<p><a href=\"https://www.jianshu.com/p/23e8789fbc10\" target=\"_blank\" rel=\"noopener\">Android Camera2 简介</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"Android-Camera2介绍\"><a href=\"#Android-Camera2介绍\" class=\"headerlink\" title=\"Android Camera2介绍\"></a>Android Camera2介绍</h1><p>Android 5.0(API Level 21) 重新设计了 Camera，废弃了之前的 Camera，改用现在的 <a href=\"https://developer.android.com/reference/android/hardware/camera2/package-summary\" target=\"_blank\" rel=\"noopener\">Camera2 API</a>，在Camera2上引入了<strong>Session/Request</strong>的概念，使用的复杂度远超之前的 Camera。</p>",
        "more": "<h2 id=\"Camera2主要类简介\"><a href=\"#Camera2主要类简介\" class=\"headerlink\" title=\"Camera2主要类简介\"></a>Camera2主要类简介</h2><ul>\n<li><strong>CameraManager</strong>：摄像头管理类，用于检测，打开系统摄像头，可以通过<code>getCameraCharacteristics(cameraId)</code>获取摄像头的特征  </li>\n<li><strong>CameraCharacteristics</strong>：相机的特性类，可以得到相机是否支持自动对焦，是否支持闪光灯等特征</li>\n<li><strong>CameraDevice</strong>：相机设备类</li>\n<li><strong>CameraCaptureSession</strong>：用于创建预览，拍照的Session类。</li>\n<li><strong>CaptureRequest</strong>：相机的请求类，可以通过这个类获取一次捕获的请求，可以设置一些参数等。</li>\n<li><strong>CameraRequest</strong>和<strong>CameraRequest.Builder</strong>：当程序调用<code>setRepeatingRequest()</code>方法进行预览时，或调用<code>capture()</code>方法进行拍照时，都需要传入<strong>CameraRequest</strong>参数。<strong>CameraRequest</strong>代表了一次捕获请求，用于描述捕获图片的各种参数设置，比如对焦模式、曝光模式……总之，程序需要对照片所做的各种控制，都通过<strong>CameraRequest</strong>参数进行设置。<strong>CameraRequest.Builder</strong>则负责生成<strong>CameraRequest</strong>对象。</li>\n</ul>\n<h2 id=\"Camera2-API-基本架构\"><a href=\"#Camera2-API-基本架构\" class=\"headerlink\" title=\"Camera2 API 基本架构\"></a>Camera2 API 基本架构</h2><p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1fzhvmxx1tlj30ok0amwf1.jpg\" alt></p>\n<ul>\n<li>APP通过创建一个CaptureRequest向CameraDevice发起Capture请求  </li>\n<li>CameraDevice收到请求后返回对应数据的预览数据  </li>\n<li>点击拍照后，会从ImageReader中读取数据  </li>\n<li>CaptureRequest代表请求控制的Camera参数, CameraMetadata(CaptureResult)则表示当前返回帧中Camera使用的参数以及当前状态.</li>\n</ul>\n<h2 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h2><p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fzhvmk3ykcj30f70kv0uc.jpg\" alt></p>\n<ul>\n<li><p><strong>初始化，打开Camera</strong></p>\n<ol>\n<li><p>通过</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)</span><br><span class=\"line\">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">    requestCameraPermission();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 获取权限</p>\n</li>\n<li>通过   <code>context.getSystemService(Context.CAMERA_SERVICE)</code> 获取<code>CameraManager</code></li>\n<li><p>通过<code>CameraManager.getCameraCharacteristics(cameraId)</code>获取相机的摄像头的特性</p>\n<ul>\n<li><code>SENSOR_ORIENTATION</code>：获取摄像头的拍照的方向</li>\n<li><code>LENS_FACING</code>：获取摄像头的方向。<code>LENS_FACING_FRONT</code>是前摄像头，<code>LENS_FACING_BACK</code>是后摄像头。</li>\n<li>获取FPS的范围</li>\n<li>获取大小</li>\n</ul>\n</li>\n<li>调用<code>CameraManager .open()</code>方法在回调中得到<code>CameraDevice</code>.  </li>\n</ol>\n</li>\n<li><strong>Create Session</strong><br>  通过<code>CameraDevice.createCaptureSession()</code>在回调中获取<code>CameraCaptureSession</code>.</li>\n<li><strong>Config Session</strong><br>  构建<code>CaptureRequest</code>, 有三种模式可选 预览/拍照/录像.  </li>\n<li><strong>Capture</strong><br>  拍照数据可以在<code>ImageReader.OnImageAvailableListener</code>回调中获取, <code>CaptureCallback</code>中则可获取拍照实际的参数和Camera当前状态.</li>\n</ul>\n<h1 id=\"android-Camera2Basic介绍\"><a href=\"#android-Camera2Basic介绍\" class=\"headerlink\" title=\"android-Camera2Basic介绍\"></a>android-Camera2Basic介绍</h1><p><a href=\"https://github.com/googlesamples/android-Camera2Basic\" target=\"_blank\" rel=\"noopener\">android-Camera2Basic</a>是谷歌官方给的Camera2的demo，演示了Camrea2 API的基本功能，通过这个Demo，我们可以掌握连接设备，显示预览，以及拍照的基本使用。</p>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── .DS_Store</span><br><span class=\"line\">└── camera2basic</span><br><span class=\"line\">    ├── AutoFitTextureView.java</span><br><span class=\"line\">    ├── Camera2BasicFragment.java</span><br><span class=\"line\">    └── CameraActivity.java</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码详解\"><a href=\"#代码详解\" class=\"headerlink\" title=\"代码详解\"></a>代码详解</h2><h3 id=\"打开相机，创建预览\"><a href=\"#打开相机，创建预览\" class=\"headerlink\" title=\"打开相机，创建预览\"></a>打开相机，创建预览</h3><h4 id=\"openCamera\"><a href=\"#openCamera\" class=\"headerlink\" title=\"openCamera\"></a>openCamera</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openCamera</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)</span><br><span class=\"line\">                != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//请求权限</span></span><br><span class=\"line\">            requestCameraPermission();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置相机相关的参数</span></span><br><span class=\"line\">        setUpCameraOutputs(width, height);</span><br><span class=\"line\">        configureTransform(width, height);</span><br><span class=\"line\">        Activity activity = getActivity();</span><br><span class=\"line\">        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mCameraOpenCloseLock.tryAcquire(<span class=\"number\">2500</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Time out waiting to lock camera opening.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            manager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Interrupted while trying to lock camera opening.\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"setUpCameraOutputs-width-height\"><a href=\"#setUpCameraOutputs-width-height\" class=\"headerlink\" title=\"setUpCameraOutputs(width, height)\"></a>setUpCameraOutputs(width, height)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"SuspiciousNameCombination\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setUpCameraOutputs</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        Activity activity = getActivity();</span><br><span class=\"line\">        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取摄像头可用列表</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String cameraId : manager.getCameraIdList()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取相机的特性</span></span><br><span class=\"line\">                CameraCharacteristics characteristics</span><br><span class=\"line\">                        = manager.getCameraCharacteristics(cameraId);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 不使用前置摄像头</span></span><br><span class=\"line\">                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (facing != <span class=\"keyword\">null</span> &amp;&amp; facing == CameraCharacteristics.LENS_FACING_FRONT) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                StreamConfigurationMap map = characteristics.get(</span><br><span class=\"line\">                        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// For still image captures, we use the largest available size.</span></span><br><span class=\"line\">                Size largest = Collections.max(</span><br><span class=\"line\">                        Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> CompareSizesByArea());</span><br><span class=\"line\">                <span class=\"comment\">//设置ImageReader接收的图片格式，以及允许接收的最大图片数目</span></span><br><span class=\"line\">                mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),</span><br><span class=\"line\">                        ImageFormat.JPEG, <span class=\"comment\">/*maxImages*/</span><span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"comment\">//设置图片存储的监听</span></span><br><span class=\"line\">                mImageReader.setOnImageAvailableListener(</span><br><span class=\"line\">                        mOnImageAvailableListener, mBackgroundHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CameraDevice-StateCallback监听\"><a href=\"#CameraDevice-StateCallback监听\" class=\"headerlink\" title=\"CameraDevice.StateCallback监听\"></a>CameraDevice.StateCallback监听</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CameraDevice.StateCallback mStateCallback = <span class=\"keyword\">new</span> CameraDevice.StateCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpened</span><span class=\"params\">(@NonNull CameraDevice cameraDevice)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// This method is called when the camera is opened.  We start camera preview here.</span></span><br><span class=\"line\">            mCameraOpenCloseLock.release();</span><br><span class=\"line\">            mCameraDevice = cameraDevice;</span><br><span class=\"line\">            <span class=\"comment\">//创建PreviewSession</span></span><br><span class=\"line\">            createCameraPreviewSession();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDisconnected</span><span class=\"params\">(@NonNull CameraDevice cameraDevice)</span> </span>&#123;</span><br><span class=\"line\">            mCameraOpenCloseLock.release();</span><br><span class=\"line\">            cameraDevice.close();</span><br><span class=\"line\">            mCameraDevice = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(@NonNull CameraDevice cameraDevice, <span class=\"keyword\">int</span> error)</span> </span>&#123;</span><br><span class=\"line\">            mCameraOpenCloseLock.release();</span><br><span class=\"line\">            cameraDevice.close();</span><br><span class=\"line\">            mCameraDevice = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Activity activity = getActivity();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != activity) &#123;</span><br><span class=\"line\">                activity.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"createCaptureSession\"><a href=\"#createCaptureSession\" class=\"headerlink\" title=\"createCaptureSession\"></a>createCaptureSession</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createCameraPreviewSession</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            SurfaceTexture texture = mTextureView.getSurfaceTexture();</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> texture != <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// We configure the size of default buffer to be the size of camera preview we want.</span></span><br><span class=\"line\">            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// This is the output Surface we need to start preview.</span></span><br><span class=\"line\">            Surface surface = <span class=\"keyword\">new</span> Surface(texture);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// We set up a CaptureRequest.Builder with the output Surface.</span></span><br><span class=\"line\">            mPreviewRequestBuilder</span><br><span class=\"line\">                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);</span><br><span class=\"line\">            mPreviewRequestBuilder.addTarget(surface);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Here, we create a CameraCaptureSession for camera preview.</span></span><br><span class=\"line\">            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> CameraCaptureSession.StateCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigured</span><span class=\"params\">(@NonNull CameraCaptureSession cameraCaptureSession)</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"comment\">// The camera is already closed</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == mCameraDevice) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// When the session is ready, we start displaying the preview.</span></span><br><span class=\"line\">                            mCaptureSession = cameraCaptureSession;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// Auto focus should be continuous for camera preview.</span></span><br><span class=\"line\">                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,</span><br><span class=\"line\">                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);</span><br><span class=\"line\">                                <span class=\"comment\">// Flash is automatically enabled when necessary.</span></span><br><span class=\"line\">                                setAutoFlash(mPreviewRequestBuilder);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// Finally, we start displaying the camera preview.</span></span><br><span class=\"line\">                                mPreviewRequest = mPreviewRequestBuilder.build();</span><br><span class=\"line\">                                mCaptureSession.setRepeatingRequest(mPreviewRequest,</span><br><span class=\"line\">                                        mCaptureCallback, mBackgroundHandler);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">                                e.printStackTrace();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigureFailed</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                @NonNull CameraCaptureSession cameraCaptureSession)</span> </span>&#123;</span><br><span class=\"line\">                            showToast(<span class=\"string\">\"Failed\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;, <span class=\"keyword\">null</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>  项目中有注释，不做过多说明</p>\n<h3 id=\"拍照\"><a href=\"#拍照\" class=\"headerlink\" title=\"拍照\"></a>拍照</h3><p>拍照的过程就是我们向已经打开好的相机获取静态预览帧的过程。</p>\n<h4 id=\"对焦\"><a href=\"#对焦\" class=\"headerlink\" title=\"对焦\"></a>对焦</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">lockFocus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is how to tell the camera to lock focus.</span></span><br><span class=\"line\">            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,</span><br><span class=\"line\">                    CameraMetadata.CONTROL_AF_TRIGGER_START);</span><br><span class=\"line\">            <span class=\"comment\">// Tell #mCaptureCallback to wait for the lock.</span></span><br><span class=\"line\">            mState = STATE_WAITING_LOCK;</span><br><span class=\"line\">            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,</span><br><span class=\"line\">                    mBackgroundHandler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>向<code>CameraCaptureSession</code>发送对焦请求，并且对对焦是否成功进行监听，在mCaptureCallback中对回调进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> CameraCaptureSession.CaptureCallback mCaptureCallback</span><br><span class=\"line\">            = <span class=\"keyword\">new</span> CameraCaptureSession.CaptureCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(CaptureResult result)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (mState) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_PREVIEW: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We have nothing to do when the camera preview is working normally.</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//等待对焦</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_WAITING_LOCK: &#123;</span><br><span class=\"line\">                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (afState == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        captureStillPicture();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||</span><br><span class=\"line\">                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// CONTROL_AE_STATE can be null on some devices</span></span><br><span class=\"line\">                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (aeState == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) &#123;</span><br><span class=\"line\">                            mState = STATE_PICTURE_TAKEN;</span><br><span class=\"line\">                            <span class=\"comment\">//对焦完成</span></span><br><span class=\"line\">                            captureStillPicture();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            runPrecaptureSequence();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_WAITING_PRECAPTURE: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// CONTROL_AE_STATE can be null on some devices</span></span><br><span class=\"line\">                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aeState == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||</span><br><span class=\"line\">                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) &#123;</span><br><span class=\"line\">                        mState = STATE_WAITING_NON_PRECAPTURE;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> STATE_WAITING_NON_PRECAPTURE: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// CONTROL_AE_STATE can be null on some devices</span></span><br><span class=\"line\">                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (aeState == <span class=\"keyword\">null</span> || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) &#123;</span><br><span class=\"line\">                        mState = STATE_PICTURE_TAKEN;</span><br><span class=\"line\">                        captureStillPicture();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"拍摄图片\"><a href=\"#拍摄图片\" class=\"headerlink\" title=\"拍摄图片\"></a>拍摄图片</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">captureStillPicture</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Activity activity = getActivity();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == activity || <span class=\"keyword\">null</span> == mCameraDevice) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// This is the CaptureRequest.Builder that we use to take a picture.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> CaptureRequest.Builder captureBuilder =</span><br><span class=\"line\">                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);</span><br><span class=\"line\">            captureBuilder.addTarget(mImageReader.getSurface());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Use the same AE and AF modes as the preview.</span></span><br><span class=\"line\">            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,</span><br><span class=\"line\">                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);</span><br><span class=\"line\">            setAutoFlash(captureBuilder);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Orientation</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> rotation = activity.getWindowManager().getDefaultDisplay().getRotation();</span><br><span class=\"line\">            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));</span><br><span class=\"line\"></span><br><span class=\"line\">            CameraCaptureSession.CaptureCallback CaptureCallback</span><br><span class=\"line\">                    = <span class=\"keyword\">new</span> CameraCaptureSession.CaptureCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCaptureCompleted</span><span class=\"params\">(@NonNull CameraCaptureSession session,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               @NonNull CaptureRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               @NonNull TotalCaptureResult result)</span> </span>&#123;</span><br><span class=\"line\">                    showToast(<span class=\"string\">\"Saved: \"</span> + mFile);</span><br><span class=\"line\">                    Log.d(TAG, mFile.toString());</span><br><span class=\"line\">                    unlockFocus();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            mCaptureSession.stopRepeating();</span><br><span class=\"line\">            mCaptureSession.abortCaptures();</span><br><span class=\"line\">            mCaptureSession.capture(captureBuilder.build(), CaptureCallback, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CameraAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>代码中有相应的注释。<br>注意Demo中的<code>onCaptureCompleted</code>完成后，又调用<code>unlockFocus()</code>解锁了焦点。是因为Demo做的是连续拍照，如果实现的是只拍一张照片，需要将<code>unlockFocus()</code>去掉。</p>\n<h4 id=\"存图片\"><a href=\"#存图片\" class=\"headerlink\" title=\"存图片\"></a>存图片</h4><p>存图片的操作是在之前设置ImageReader的监听方法里面进行存储的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ImageReader.OnImageAvailableListener mOnImageAvailableListener</span><br><span class=\"line\">            = <span class=\"keyword\">new</span> ImageReader.OnImageAvailableListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onImageAvailable</span><span class=\"params\">(ImageReader reader)</span> </span>&#123;</span><br><span class=\"line\">            mBackgroundHandler.post(<span class=\"keyword\">new</span> ImageSaver(reader.acquireNextImage(), mFile));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.jianshu.com/p/73fed068a795\" target=\"_blank\" rel=\"noopener\">Android Camera2 使用总结</a></p>\n<p><a href=\"https://www.jianshu.com/p/23e8789fbc10\" target=\"_blank\" rel=\"noopener\">Android Camera2 简介</a></p>"
      },
      {
        "title": "AndroidStudio 3.0 NDK环境搭建",
        "date": "2018-02-08T10:59:33.000Z",
        "_content": "\n# 前言\n网上关于NDK开发环境配置的相关博客已经很多,但是很少有关于NDK在AdnroidStduio 3.0以上的环境搭建相关的博客.所以特此记录下.\n首先是对NDK的介绍,先对NDK有个初步的印象:\nNDK(Native Development kit)是一个工作集,为了能让开发者可以更加直接的接触Android硬件资源和方便地使用传统的C/C++语言编写代码，NDK应运而生。在NDK公布以前，Android平台的第三方应用程序的编写只能依靠基于Java的Dalvik虚拟机进行开发。有了NDK后，开发者就可以更加方便的用传统的C/C++语言编写程序，并在程序封装文件（.apk）中直接嵌入\n<!--more-->\n- NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。这些工具对开发者的帮助是巨大的。\n- NDK集成了交叉编译器，并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so。\n- NDK可以自动地将so和Java应用一起打包，极大地减轻了开发人员的打包工作。\n\n# 下载工具\n1. NDK: [NDK Downloads](https://developer.android.com/ndk/downloads/index.html)\n2.  CMake:一个外部构建工具(AndroidStudio 3.0以上自带)\n3.  LLDB:用于调试本地代码\n\n**这些工具都可以使用SDM Manager下载**\n\n**当前博客所用的列子的环境如下**\n\n| 名称     |    版本号|\n| :--------: | :--------:|\n| AndroidStudio  | 3.0|\n| JDK     |   jdk1.8.0_101 |\n| NDk      |  16.1.4479499|\n|compileSdkVersion|26|\n|buildToolsVersion|26.1.0|\n|minSdkVersion|21|\n|targetSdkVersion|26|\n\n# 创建一个NDK项目\n\n## new一个项目,并勾选include c++ support\n![20180208164209411](http://paynnyvep.bkt.clouddn.com/20180208164209411.png)\n\nAndroidStudio 3.0上创建NDK项目的时候,记得勾选include c++ support,这样会很方便.接着一路next 最后点击finish.\n\n![20180208164502140](http://paynnyvep.bkt.clouddn.com/20180208164502140.png)\n\n这样一个NDK项目就已经创建好了,目录结构以及代码如下\n\n![20180208164857742](http://paynnyvep.bkt.clouddn.com/20180208164857742.png)\n\n\n可以看出来AS3.0勾选了include c++ support会比正常的项目多出来cpp文件夹跟CmakeLists.txt文件.这些将是我们在AS3.0上学习NDK环境开发的**重点**\n\n这样一个NDK的项目就完全建好了,并且可以运行,我们来看下运行的效果\n![20180208165533804](http://paynnyvep.bkt.clouddn.com/20180208165533804.png)\n\n哈哈,是不是很方便?如果之前没有勾选include c++ support 就会很麻烦,这个可以在以后的博客里说下旧的NDK项目怎么在3.0上运行,3.0已经不同于2.0,现在先享受下AS给我们带来的方便吧~\n\n我们的项目里面Jni文件肯定不止一个,如果需要新的Jni文件的话,请按下面的步骤来\n\n## NDK自定义配置过程\n### 创建一个Java文件\n![20180208171048688](http://paynnyvep.bkt.clouddn.com/20180208171048688.png)\n\n### 在这个类里面写一个native方法\n![20180208171842166](http://paynnyvep.bkt.clouddn.com/20180208171842166.png)\n\n### 生成头文件(*.h)\n打开Terminal,给刚刚创建的类创建头文件.先cd到app/src/main/java目录下\n```\ncd app/src/main/java\n\n```\n然后使用javah命令\n\n``` java\njavah -d ../cpp com.vv.ndk.Hello\n\n```\n\n**javah** 执行java命令生成头文件(*.h)\n**-d**  在当前目录下创建一个文件夹,文件夹名字是cpp\n**com.vv.ndk.Hello** 包名.类名指定要生成那个java类文件的头文件\n所以这个命令的目的是在cpp的上一层目录下创建一个cpp文件夹,并对`com.vv.ndk.Hello` 生成一个头文件,如下图所示:\n\n![20180208174446624](http://paynnyvep.bkt.clouddn.com/20180208174446624.png)\n\n这个命令输入完以后在app/src/main/cpp/文件夹下多了一个`com_vv_ndk_Hello.h`文件,并且这个文件里面有一个未实现的方法`Java_com_vv_ndk_Hello_sayHello`,这个方法就是Hello.java方法里面对应的**sayHello()方法**\n\n![20180208174928653](http://paynnyvep.bkt.clouddn.com/20180208174928653.png)\n\n### 创建c文件并实现头文件里面的方法\n`Java_com_vv_ndk_Hello_sayHello` 这个文件是一个抽象的方法,我们需要创建一个*.c文件去实现这个方法.\n\n-  我们在cpp文件夹下创建一个C++ Source File,命名为Hello.cpp\n![20180208183405701](http://paynnyvep.bkt.clouddn.com/20180208183405701.png)\n\n- 引入`com_vv_ndk_Hello.h` 头文件,并实现头文件里面的`Java_com_vv_ndk_Hello_sayHello` 方法\n\n![20180208183623312](http://paynnyvep.bkt.clouddn.com/20180208183623312.png)\n\n- 返回一个我们想要得到的值,代码如下\n\n```java\n#include \"com_vv_ndk_Hello.h\"\nJNIEXPORT jstring JNICALL Java_com_vv_ndk_Hello_sayHello(JNIEnv *env, jclass jclass1){\n    return env->NewStringUTF(\"say Hello\");\n}\n```\n\n### Java文件里面加入静态方法块\n\n![20180208184000363](http://paynnyvep.bkt.clouddn.com/20180208184000363.png)\n\n`System.loadLibrary(\"hello\")` 是NDK的**moduleName**\n\n### 配置grade\n在`app.gradle` 文件的defaultConfig里面加上 ndk 的moduleName\n```\ndefaultConfig {\n        ...\n        ndk{\n            moduleName \"hello\"\n        }\n    }\n```\n\n### 在Activity里面调用Jni\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextView tv = (TextView) findViewById(R.id.sample_text);\n        tv.setText(Hello.sayHello());\n    }\n}\n```\n\n运行以后发现崩溃,不要慌\n\n![20180208184821441](http://paynnyvep.bkt.clouddn.com/20180208184821441.png)\n\n崩溃是因为你还没有配置最关键的CmakeLists.txt文件\n\n### 配置CmakeLists.txt文件\n```\nadd_library( # Sets the name of the library.\n             hello\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/jni/Hello.cpp\n             src/main/jni/Hi.cpp\n             )\n```\n\n```\ntarget_link_libraries( hello ${log-lib} )\n```\n\n### ok,运行\n效果如下\n\n![20180208185518666](http://paynnyvep.bkt.clouddn.com/20180208185518666.png)\n\n这样调用Hello.sayHello()方法就显示出来了.\n\n## 总结\n以上是创建NDK项目的过程,现在我们来总结下创建的整个步骤.\n\n 1. 创建一个Java文件\n 2. 在这个类里面写一个native方法\n 3. 生成头文件(*.h)\n 4. 创建c文件并实现头文件里面的方法\n 5. Java文件里面加入静态方法块\n 6. 配置grade\n 7. 在Activity里面调用Jni\n 8. 配置CmakeLists.txt文件\n\n博客就到这里吧,下面将会讲下CMakeLists的解析,看看这个文件到底是个啥.\n\n",
        "source": "_posts/AS3NDKEnvironment.md",
        "raw": "---\ntitle: AndroidStudio 3.0 NDK环境搭建\ndate: 2018-02-08 18:59:33\ntags:\n- Android\n- NDK\ncategories:\n- Android开发笔记\n---\n\n# 前言\n网上关于NDK开发环境配置的相关博客已经很多,但是很少有关于NDK在AdnroidStduio 3.0以上的环境搭建相关的博客.所以特此记录下.\n首先是对NDK的介绍,先对NDK有个初步的印象:\nNDK(Native Development kit)是一个工作集,为了能让开发者可以更加直接的接触Android硬件资源和方便地使用传统的C/C++语言编写代码，NDK应运而生。在NDK公布以前，Android平台的第三方应用程序的编写只能依靠基于Java的Dalvik虚拟机进行开发。有了NDK后，开发者就可以更加方便的用传统的C/C++语言编写程序，并在程序封装文件（.apk）中直接嵌入\n<!--more-->\n- NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。这些工具对开发者的帮助是巨大的。\n- NDK集成了交叉编译器，并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so。\n- NDK可以自动地将so和Java应用一起打包，极大地减轻了开发人员的打包工作。\n\n# 下载工具\n1. NDK: [NDK Downloads](https://developer.android.com/ndk/downloads/index.html)\n2.  CMake:一个外部构建工具(AndroidStudio 3.0以上自带)\n3.  LLDB:用于调试本地代码\n\n**这些工具都可以使用SDM Manager下载**\n\n**当前博客所用的列子的环境如下**\n\n| 名称     |    版本号|\n| :--------: | :--------:|\n| AndroidStudio  | 3.0|\n| JDK     |   jdk1.8.0_101 |\n| NDk      |  16.1.4479499|\n|compileSdkVersion|26|\n|buildToolsVersion|26.1.0|\n|minSdkVersion|21|\n|targetSdkVersion|26|\n\n# 创建一个NDK项目\n\n## new一个项目,并勾选include c++ support\n![20180208164209411](http://paynnyvep.bkt.clouddn.com/20180208164209411.png)\n\nAndroidStudio 3.0上创建NDK项目的时候,记得勾选include c++ support,这样会很方便.接着一路next 最后点击finish.\n\n![20180208164502140](http://paynnyvep.bkt.clouddn.com/20180208164502140.png)\n\n这样一个NDK项目就已经创建好了,目录结构以及代码如下\n\n![20180208164857742](http://paynnyvep.bkt.clouddn.com/20180208164857742.png)\n\n\n可以看出来AS3.0勾选了include c++ support会比正常的项目多出来cpp文件夹跟CmakeLists.txt文件.这些将是我们在AS3.0上学习NDK环境开发的**重点**\n\n这样一个NDK的项目就完全建好了,并且可以运行,我们来看下运行的效果\n![20180208165533804](http://paynnyvep.bkt.clouddn.com/20180208165533804.png)\n\n哈哈,是不是很方便?如果之前没有勾选include c++ support 就会很麻烦,这个可以在以后的博客里说下旧的NDK项目怎么在3.0上运行,3.0已经不同于2.0,现在先享受下AS给我们带来的方便吧~\n\n我们的项目里面Jni文件肯定不止一个,如果需要新的Jni文件的话,请按下面的步骤来\n\n## NDK自定义配置过程\n### 创建一个Java文件\n![20180208171048688](http://paynnyvep.bkt.clouddn.com/20180208171048688.png)\n\n### 在这个类里面写一个native方法\n![20180208171842166](http://paynnyvep.bkt.clouddn.com/20180208171842166.png)\n\n### 生成头文件(*.h)\n打开Terminal,给刚刚创建的类创建头文件.先cd到app/src/main/java目录下\n```\ncd app/src/main/java\n\n```\n然后使用javah命令\n\n``` java\njavah -d ../cpp com.vv.ndk.Hello\n\n```\n\n**javah** 执行java命令生成头文件(*.h)\n**-d**  在当前目录下创建一个文件夹,文件夹名字是cpp\n**com.vv.ndk.Hello** 包名.类名指定要生成那个java类文件的头文件\n所以这个命令的目的是在cpp的上一层目录下创建一个cpp文件夹,并对`com.vv.ndk.Hello` 生成一个头文件,如下图所示:\n\n![20180208174446624](http://paynnyvep.bkt.clouddn.com/20180208174446624.png)\n\n这个命令输入完以后在app/src/main/cpp/文件夹下多了一个`com_vv_ndk_Hello.h`文件,并且这个文件里面有一个未实现的方法`Java_com_vv_ndk_Hello_sayHello`,这个方法就是Hello.java方法里面对应的**sayHello()方法**\n\n![20180208174928653](http://paynnyvep.bkt.clouddn.com/20180208174928653.png)\n\n### 创建c文件并实现头文件里面的方法\n`Java_com_vv_ndk_Hello_sayHello` 这个文件是一个抽象的方法,我们需要创建一个*.c文件去实现这个方法.\n\n-  我们在cpp文件夹下创建一个C++ Source File,命名为Hello.cpp\n![20180208183405701](http://paynnyvep.bkt.clouddn.com/20180208183405701.png)\n\n- 引入`com_vv_ndk_Hello.h` 头文件,并实现头文件里面的`Java_com_vv_ndk_Hello_sayHello` 方法\n\n![20180208183623312](http://paynnyvep.bkt.clouddn.com/20180208183623312.png)\n\n- 返回一个我们想要得到的值,代码如下\n\n```java\n#include \"com_vv_ndk_Hello.h\"\nJNIEXPORT jstring JNICALL Java_com_vv_ndk_Hello_sayHello(JNIEnv *env, jclass jclass1){\n    return env->NewStringUTF(\"say Hello\");\n}\n```\n\n### Java文件里面加入静态方法块\n\n![20180208184000363](http://paynnyvep.bkt.clouddn.com/20180208184000363.png)\n\n`System.loadLibrary(\"hello\")` 是NDK的**moduleName**\n\n### 配置grade\n在`app.gradle` 文件的defaultConfig里面加上 ndk 的moduleName\n```\ndefaultConfig {\n        ...\n        ndk{\n            moduleName \"hello\"\n        }\n    }\n```\n\n### 在Activity里面调用Jni\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextView tv = (TextView) findViewById(R.id.sample_text);\n        tv.setText(Hello.sayHello());\n    }\n}\n```\n\n运行以后发现崩溃,不要慌\n\n![20180208184821441](http://paynnyvep.bkt.clouddn.com/20180208184821441.png)\n\n崩溃是因为你还没有配置最关键的CmakeLists.txt文件\n\n### 配置CmakeLists.txt文件\n```\nadd_library( # Sets the name of the library.\n             hello\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/jni/Hello.cpp\n             src/main/jni/Hi.cpp\n             )\n```\n\n```\ntarget_link_libraries( hello ${log-lib} )\n```\n\n### ok,运行\n效果如下\n\n![20180208185518666](http://paynnyvep.bkt.clouddn.com/20180208185518666.png)\n\n这样调用Hello.sayHello()方法就显示出来了.\n\n## 总结\n以上是创建NDK项目的过程,现在我们来总结下创建的整个步骤.\n\n 1. 创建一个Java文件\n 2. 在这个类里面写一个native方法\n 3. 生成头文件(*.h)\n 4. 创建c文件并实现头文件里面的方法\n 5. Java文件里面加入静态方法块\n 6. 配置grade\n 7. 在Activity里面调用Jni\n 8. 配置CmakeLists.txt文件\n\n博客就到这里吧,下面将会讲下CMakeLists的解析,看看这个文件到底是个啥.\n\n",
        "slug": "AS3NDKEnvironment",
        "published": 1,
        "updated": "2020-05-19T02:32:04.677Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1d000852j9rdmkwgt9",
        "content": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上关于NDK开发环境配置的相关博客已经很多,但是很少有关于NDK在AdnroidStduio 3.0以上的环境搭建相关的博客.所以特此记录下.<br>首先是对NDK的介绍,先对NDK有个初步的印象:<br>NDK(Native Development kit)是一个工作集,为了能让开发者可以更加直接的接触Android硬件资源和方便地使用传统的C/C++语言编写代码，NDK应运而生。在NDK公布以前，Android平台的第三方应用程序的编写只能依靠基于Java的Dalvik虚拟机进行开发。有了NDK后，开发者就可以更加方便的用传统的C/C++语言编写程序，并在程序封装文件（.apk）中直接嵌入<br><a id=\"more\"></a></p>\n<ul>\n<li>NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。这些工具对开发者的帮助是巨大的。</li>\n<li>NDK集成了交叉编译器，并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so。</li>\n<li>NDK可以自动地将so和Java应用一起打包，极大地减轻了开发人员的打包工作。</li>\n</ul>\n<h1 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h1><ol>\n<li>NDK: <a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\" rel=\"noopener\">NDK Downloads</a></li>\n<li>CMake:一个外部构建工具(AndroidStudio 3.0以上自带)</li>\n<li>LLDB:用于调试本地代码</li>\n</ol>\n<p><strong>这些工具都可以使用SDM Manager下载</strong></p>\n<p><strong>当前博客所用的列子的环境如下</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">AndroidStudio</td>\n<td style=\"text-align:center\">3.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK</td>\n<td style=\"text-align:center\">jdk1.8.0_101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NDk</td>\n<td style=\"text-align:center\">16.1.4479499</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compileSdkVersion</td>\n<td style=\"text-align:center\">26</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">buildToolsVersion</td>\n<td style=\"text-align:center\">26.1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minSdkVersion</td>\n<td style=\"text-align:center\">21</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">targetSdkVersion</td>\n<td style=\"text-align:center\">26</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"创建一个NDK项目\"><a href=\"#创建一个NDK项目\" class=\"headerlink\" title=\"创建一个NDK项目\"></a>创建一个NDK项目</h1><h2 id=\"new一个项目-并勾选include-c-support\"><a href=\"#new一个项目-并勾选include-c-support\" class=\"headerlink\" title=\"new一个项目,并勾选include c++ support\"></a>new一个项目,并勾选include c++ support</h2><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208164209411.png\" alt=\"20180208164209411\"></p>\n<p>AndroidStudio 3.0上创建NDK项目的时候,记得勾选include c++ support,这样会很方便.接着一路next 最后点击finish.</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208164502140.png\" alt=\"20180208164502140\"></p>\n<p>这样一个NDK项目就已经创建好了,目录结构以及代码如下</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208164857742.png\" alt=\"20180208164857742\"></p>\n<p>可以看出来AS3.0勾选了include c++ support会比正常的项目多出来cpp文件夹跟CmakeLists.txt文件.这些将是我们在AS3.0上学习NDK环境开发的<strong>重点</strong></p>\n<p>这样一个NDK的项目就完全建好了,并且可以运行,我们来看下运行的效果<br><img src=\"http://paynnyvep.bkt.clouddn.com/20180208165533804.png\" alt=\"20180208165533804\"></p>\n<p>哈哈,是不是很方便?如果之前没有勾选include c++ support 就会很麻烦,这个可以在以后的博客里说下旧的NDK项目怎么在3.0上运行,3.0已经不同于2.0,现在先享受下AS给我们带来的方便吧~</p>\n<p>我们的项目里面Jni文件肯定不止一个,如果需要新的Jni文件的话,请按下面的步骤来</p>\n<h2 id=\"NDK自定义配置过程\"><a href=\"#NDK自定义配置过程\" class=\"headerlink\" title=\"NDK自定义配置过程\"></a>NDK自定义配置过程</h2><h3 id=\"创建一个Java文件\"><a href=\"#创建一个Java文件\" class=\"headerlink\" title=\"创建一个Java文件\"></a>创建一个Java文件</h3><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208171048688.png\" alt=\"20180208171048688\"></p>\n<h3 id=\"在这个类里面写一个native方法\"><a href=\"#在这个类里面写一个native方法\" class=\"headerlink\" title=\"在这个类里面写一个native方法\"></a>在这个类里面写一个native方法</h3><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208171842166.png\" alt=\"20180208171842166\"></p>\n<h3 id=\"生成头文件-h\"><a href=\"#生成头文件-h\" class=\"headerlink\" title=\"生成头文件(*.h)\"></a>生成头文件(*.h)</h3><p>打开Terminal,给刚刚创建的类创建头文件.先cd到app/src/main/java目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd app/src/main/java</span><br></pre></td></tr></table></figure></p>\n<p>然后使用javah命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javah -d ../cpp com.vv.ndk.Hello</span><br></pre></td></tr></table></figure>\n<p><strong>javah</strong> 执行java命令生成头文件(*.h)<br><strong>-d</strong>  在当前目录下创建一个文件夹,文件夹名字是cpp<br><strong>com.vv.ndk.Hello</strong> 包名.类名指定要生成那个java类文件的头文件<br>所以这个命令的目的是在cpp的上一层目录下创建一个cpp文件夹,并对<code>com.vv.ndk.Hello</code> 生成一个头文件,如下图所示:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208174446624.png\" alt=\"20180208174446624\"></p>\n<p>这个命令输入完以后在app/src/main/cpp/文件夹下多了一个<code>com_vv_ndk_Hello.h</code>文件,并且这个文件里面有一个未实现的方法<code>Java_com_vv_ndk_Hello_sayHello</code>,这个方法就是Hello.java方法里面对应的<strong>sayHello()方法</strong></p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208174928653.png\" alt=\"20180208174928653\"></p>\n<h3 id=\"创建c文件并实现头文件里面的方法\"><a href=\"#创建c文件并实现头文件里面的方法\" class=\"headerlink\" title=\"创建c文件并实现头文件里面的方法\"></a>创建c文件并实现头文件里面的方法</h3><p><code>Java_com_vv_ndk_Hello_sayHello</code> 这个文件是一个抽象的方法,我们需要创建一个*.c文件去实现这个方法.</p>\n<ul>\n<li><p>我们在cpp文件夹下创建一个C++ Source File,命名为Hello.cpp<br><img src=\"http://paynnyvep.bkt.clouddn.com/20180208183405701.png\" alt=\"20180208183405701\"></p>\n</li>\n<li><p>引入<code>com_vv_ndk_Hello.h</code> 头文件,并实现头文件里面的<code>Java_com_vv_ndk_Hello_sayHello</code> 方法</p>\n</li>\n</ul>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208183623312.png\" alt=\"20180208183623312\"></p>\n<ul>\n<li>返回一个我们想要得到的值,代码如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include \"com_vv_ndk_Hello.h\"</span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_vv_ndk_Hello_sayHello</span><span class=\"params\">(JNIEnv *env, jclass jclass1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"say Hello\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Java文件里面加入静态方法块\"><a href=\"#Java文件里面加入静态方法块\" class=\"headerlink\" title=\"Java文件里面加入静态方法块\"></a>Java文件里面加入静态方法块</h3><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208184000363.png\" alt=\"20180208184000363\"></p>\n<p><code>System.loadLibrary(&quot;hello&quot;)</code> 是NDK的<strong>moduleName</strong></p>\n<h3 id=\"配置grade\"><a href=\"#配置grade\" class=\"headerlink\" title=\"配置grade\"></a>配置grade</h3><p>在<code>app.gradle</code> 文件的defaultConfig里面加上 ndk 的moduleName<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ndk&#123;</span><br><span class=\"line\">            moduleName &quot;hello&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在Activity里面调用Jni\"><a href=\"#在Activity里面调用Jni\" class=\"headerlink\" title=\"在Activity里面调用Jni\"></a>在Activity里面调用Jni</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class=\"line\">        tv.setText(Hello.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行以后发现崩溃,不要慌</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208184821441.png\" alt=\"20180208184821441\"></p>\n<p>崩溃是因为你还没有配置最关键的CmakeLists.txt文件</p>\n<h3 id=\"配置CmakeLists-txt文件\"><a href=\"#配置CmakeLists-txt文件\" class=\"headerlink\" title=\"配置CmakeLists.txt文件\"></a>配置CmakeLists.txt文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">             hello</span><br><span class=\"line\"></span><br><span class=\"line\">             # Sets the library as a shared library.</span><br><span class=\"line\">             SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">             # Provides a relative path to your source file(s).</span><br><span class=\"line\">             src/main/jni/Hello.cpp</span><br><span class=\"line\">             src/main/jni/Hi.cpp</span><br><span class=\"line\">             )</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_link_libraries( hello $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>\n<h3 id=\"ok-运行\"><a href=\"#ok-运行\" class=\"headerlink\" title=\"ok,运行\"></a>ok,运行</h3><p>效果如下</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208185518666.png\" alt=\"20180208185518666\"></p>\n<p>这样调用Hello.sayHello()方法就显示出来了.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是创建NDK项目的过程,现在我们来总结下创建的整个步骤.</p>\n<ol>\n<li>创建一个Java文件</li>\n<li>在这个类里面写一个native方法</li>\n<li>生成头文件(*.h)</li>\n<li>创建c文件并实现头文件里面的方法</li>\n<li>Java文件里面加入静态方法块</li>\n<li>配置grade</li>\n<li>在Activity里面调用Jni</li>\n<li>配置CmakeLists.txt文件</li>\n</ol>\n<p>博客就到这里吧,下面将会讲下CMakeLists的解析,看看这个文件到底是个啥.</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上关于NDK开发环境配置的相关博客已经很多,但是很少有关于NDK在AdnroidStduio 3.0以上的环境搭建相关的博客.所以特此记录下.<br>首先是对NDK的介绍,先对NDK有个初步的印象:<br>NDK(Native Development kit)是一个工作集,为了能让开发者可以更加直接的接触Android硬件资源和方便地使用传统的C/C++语言编写代码，NDK应运而生。在NDK公布以前，Android平台的第三方应用程序的编写只能依靠基于Java的Dalvik虚拟机进行开发。有了NDK后，开发者就可以更加方便的用传统的C/C++语言编写程序，并在程序封装文件（.apk）中直接嵌入<br>",
        "more": "</p>\n<ul>\n<li>NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。这些工具对开发者的帮助是巨大的。</li>\n<li>NDK集成了交叉编译器，并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so。</li>\n<li>NDK可以自动地将so和Java应用一起打包，极大地减轻了开发人员的打包工作。</li>\n</ul>\n<h1 id=\"下载工具\"><a href=\"#下载工具\" class=\"headerlink\" title=\"下载工具\"></a>下载工具</h1><ol>\n<li>NDK: <a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\" rel=\"noopener\">NDK Downloads</a></li>\n<li>CMake:一个外部构建工具(AndroidStudio 3.0以上自带)</li>\n<li>LLDB:用于调试本地代码</li>\n</ol>\n<p><strong>这些工具都可以使用SDM Manager下载</strong></p>\n<p><strong>当前博客所用的列子的环境如下</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">AndroidStudio</td>\n<td style=\"text-align:center\">3.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK</td>\n<td style=\"text-align:center\">jdk1.8.0_101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NDk</td>\n<td style=\"text-align:center\">16.1.4479499</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compileSdkVersion</td>\n<td style=\"text-align:center\">26</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">buildToolsVersion</td>\n<td style=\"text-align:center\">26.1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minSdkVersion</td>\n<td style=\"text-align:center\">21</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">targetSdkVersion</td>\n<td style=\"text-align:center\">26</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"创建一个NDK项目\"><a href=\"#创建一个NDK项目\" class=\"headerlink\" title=\"创建一个NDK项目\"></a>创建一个NDK项目</h1><h2 id=\"new一个项目-并勾选include-c-support\"><a href=\"#new一个项目-并勾选include-c-support\" class=\"headerlink\" title=\"new一个项目,并勾选include c++ support\"></a>new一个项目,并勾选include c++ support</h2><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208164209411.png\" alt=\"20180208164209411\"></p>\n<p>AndroidStudio 3.0上创建NDK项目的时候,记得勾选include c++ support,这样会很方便.接着一路next 最后点击finish.</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208164502140.png\" alt=\"20180208164502140\"></p>\n<p>这样一个NDK项目就已经创建好了,目录结构以及代码如下</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208164857742.png\" alt=\"20180208164857742\"></p>\n<p>可以看出来AS3.0勾选了include c++ support会比正常的项目多出来cpp文件夹跟CmakeLists.txt文件.这些将是我们在AS3.0上学习NDK环境开发的<strong>重点</strong></p>\n<p>这样一个NDK的项目就完全建好了,并且可以运行,我们来看下运行的效果<br><img src=\"http://paynnyvep.bkt.clouddn.com/20180208165533804.png\" alt=\"20180208165533804\"></p>\n<p>哈哈,是不是很方便?如果之前没有勾选include c++ support 就会很麻烦,这个可以在以后的博客里说下旧的NDK项目怎么在3.0上运行,3.0已经不同于2.0,现在先享受下AS给我们带来的方便吧~</p>\n<p>我们的项目里面Jni文件肯定不止一个,如果需要新的Jni文件的话,请按下面的步骤来</p>\n<h2 id=\"NDK自定义配置过程\"><a href=\"#NDK自定义配置过程\" class=\"headerlink\" title=\"NDK自定义配置过程\"></a>NDK自定义配置过程</h2><h3 id=\"创建一个Java文件\"><a href=\"#创建一个Java文件\" class=\"headerlink\" title=\"创建一个Java文件\"></a>创建一个Java文件</h3><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208171048688.png\" alt=\"20180208171048688\"></p>\n<h3 id=\"在这个类里面写一个native方法\"><a href=\"#在这个类里面写一个native方法\" class=\"headerlink\" title=\"在这个类里面写一个native方法\"></a>在这个类里面写一个native方法</h3><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208171842166.png\" alt=\"20180208171842166\"></p>\n<h3 id=\"生成头文件-h\"><a href=\"#生成头文件-h\" class=\"headerlink\" title=\"生成头文件(*.h)\"></a>生成头文件(*.h)</h3><p>打开Terminal,给刚刚创建的类创建头文件.先cd到app/src/main/java目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd app/src/main/java</span><br></pre></td></tr></table></figure></p>\n<p>然后使用javah命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javah -d ../cpp com.vv.ndk.Hello</span><br></pre></td></tr></table></figure>\n<p><strong>javah</strong> 执行java命令生成头文件(*.h)<br><strong>-d</strong>  在当前目录下创建一个文件夹,文件夹名字是cpp<br><strong>com.vv.ndk.Hello</strong> 包名.类名指定要生成那个java类文件的头文件<br>所以这个命令的目的是在cpp的上一层目录下创建一个cpp文件夹,并对<code>com.vv.ndk.Hello</code> 生成一个头文件,如下图所示:</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208174446624.png\" alt=\"20180208174446624\"></p>\n<p>这个命令输入完以后在app/src/main/cpp/文件夹下多了一个<code>com_vv_ndk_Hello.h</code>文件,并且这个文件里面有一个未实现的方法<code>Java_com_vv_ndk_Hello_sayHello</code>,这个方法就是Hello.java方法里面对应的<strong>sayHello()方法</strong></p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208174928653.png\" alt=\"20180208174928653\"></p>\n<h3 id=\"创建c文件并实现头文件里面的方法\"><a href=\"#创建c文件并实现头文件里面的方法\" class=\"headerlink\" title=\"创建c文件并实现头文件里面的方法\"></a>创建c文件并实现头文件里面的方法</h3><p><code>Java_com_vv_ndk_Hello_sayHello</code> 这个文件是一个抽象的方法,我们需要创建一个*.c文件去实现这个方法.</p>\n<ul>\n<li><p>我们在cpp文件夹下创建一个C++ Source File,命名为Hello.cpp<br><img src=\"http://paynnyvep.bkt.clouddn.com/20180208183405701.png\" alt=\"20180208183405701\"></p>\n</li>\n<li><p>引入<code>com_vv_ndk_Hello.h</code> 头文件,并实现头文件里面的<code>Java_com_vv_ndk_Hello_sayHello</code> 方法</p>\n</li>\n</ul>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208183623312.png\" alt=\"20180208183623312\"></p>\n<ul>\n<li>返回一个我们想要得到的值,代码如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include \"com_vv_ndk_Hello.h\"</span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_vv_ndk_Hello_sayHello</span><span class=\"params\">(JNIEnv *env, jclass jclass1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"say Hello\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Java文件里面加入静态方法块\"><a href=\"#Java文件里面加入静态方法块\" class=\"headerlink\" title=\"Java文件里面加入静态方法块\"></a>Java文件里面加入静态方法块</h3><p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208184000363.png\" alt=\"20180208184000363\"></p>\n<p><code>System.loadLibrary(&quot;hello&quot;)</code> 是NDK的<strong>moduleName</strong></p>\n<h3 id=\"配置grade\"><a href=\"#配置grade\" class=\"headerlink\" title=\"配置grade\"></a>配置grade</h3><p>在<code>app.gradle</code> 文件的defaultConfig里面加上 ndk 的moduleName<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ndk&#123;</span><br><span class=\"line\">            moduleName &quot;hello&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在Activity里面调用Jni\"><a href=\"#在Activity里面调用Jni\" class=\"headerlink\" title=\"在Activity里面调用Jni\"></a>在Activity里面调用Jni</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class=\"line\">        tv.setText(Hello.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行以后发现崩溃,不要慌</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208184821441.png\" alt=\"20180208184821441\"></p>\n<p>崩溃是因为你还没有配置最关键的CmakeLists.txt文件</p>\n<h3 id=\"配置CmakeLists-txt文件\"><a href=\"#配置CmakeLists-txt文件\" class=\"headerlink\" title=\"配置CmakeLists.txt文件\"></a>配置CmakeLists.txt文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">             hello</span><br><span class=\"line\"></span><br><span class=\"line\">             # Sets the library as a shared library.</span><br><span class=\"line\">             SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">             # Provides a relative path to your source file(s).</span><br><span class=\"line\">             src/main/jni/Hello.cpp</span><br><span class=\"line\">             src/main/jni/Hi.cpp</span><br><span class=\"line\">             )</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_link_libraries( hello $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>\n<h3 id=\"ok-运行\"><a href=\"#ok-运行\" class=\"headerlink\" title=\"ok,运行\"></a>ok,运行</h3><p>效果如下</p>\n<p><img src=\"http://paynnyvep.bkt.clouddn.com/20180208185518666.png\" alt=\"20180208185518666\"></p>\n<p>这样调用Hello.sayHello()方法就显示出来了.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是创建NDK项目的过程,现在我们来总结下创建的整个步骤.</p>\n<ol>\n<li>创建一个Java文件</li>\n<li>在这个类里面写一个native方法</li>\n<li>生成头文件(*.h)</li>\n<li>创建c文件并实现头文件里面的方法</li>\n<li>Java文件里面加入静态方法块</li>\n<li>配置grade</li>\n<li>在Activity里面调用Jni</li>\n<li>配置CmakeLists.txt文件</li>\n</ol>\n<p>博客就到这里吧,下面将会讲下CMakeLists的解析,看看这个文件到底是个啥.</p>"
      },
      {
        "title": "Android 开发如何进行单元测试",
        "date": "2019-12-23T09:08:54.000Z",
        "_content": "\n# 什么是单元测试\n\n单元测试是由一组独立的测试构成，每个测试针对软件中的一个单独的程序单元。单元测试并非检查程序单元直接是否能够合作良好，而是检查单个程序单元的行为是否正确。\n\n事实上，单元测试是一种**验证行为**，测试和验证程序中的每一项的正确性。\n\n\n<!--more-->\n\n# 为什么要进行单元测试\n\n对于单元测试，人们往往存在很多误解：\n\n1. 浪费时间太多，本身项目的时间就很紧张，没有时间去写单元测试。\n2. 过度的依赖测试人员，认为软件开发人员不应该参与单元测试。\n3. 认为单元测试不必要，代码写得很好了，no bug，no warning。\n4. 老代码结构混乱，耦合度高，为了写单元测试修改代码结构，意义不大，投入跟产出不成比例。\n\n> 单元测试真的这么鸡肋么？No，No，No！！！\n\n试想\n\n1. 测试人员给你报了一个bug，但是由于之后的merge失误导致代码丢失，或者别人修改代码导致这个bug再次复现。\n2. 重构代码的时候，被bug淹没。造成你持续不断的改bug，持续不断的加班。\n3. 明明很正常的功能，怎么现在突然不能用了？是接口的问题，还是有人修改了这个功能的逻辑？\n\n    。。。\n\n如果你也经常遇到这些困惑，那么你就需要对项目进行**单元测试**了。\n\n因为**单元测试**具有以下优势：\n\n1. **帮助理解需求**\n\n    > 单元测试应该反映Use Case，把被测单元当成黑盒测试其外部行为。\n\n2. **提高实现质量** \n    \n    > 单元测试不保证程序做正确的事，但能帮助保证程序正确地做事，从而提高实现质量。\n    \n3. **测试成本低**\n\n    > 相比集成测试、验收测试，单元测试所依赖的外部环境少，自动化程度高，时间短，节约了测试成本。  \n    \n4. **反馈速度快**\n\n    > 单元测试提供快速反馈，把bug消灭在开发阶段，减少问题流到集成测试、验收测试和用户，降低了软件质量控制的成本。\n    \n5. **利于重构** \n\n    > 由于有单元测试作为回归测试用例，有助于预防在重构过程中引入bug。\n    \n6. **文档作用** \n\n    > 单元测试提供了被测单元的使用场景，起到了使用文档的作用。\n    \n7. **对设计的反馈** \n\n    > 一个模块很难进行单元测试通常是不良设计的信号，单元测试可以反过来指导设计出高内聚、低耦合的模块。\n    \n[为什么要做单元测试？](https://www.cnblogs.com/weidagang2046/articles/1753417.html)\n\n# 怎么进行单元测试\n\n## Android 单元测试分类\n\nAndroid 单元测试分为两大类： \n\n```\napp/src\n     ├── androidTestjava (Instrumented 单元测试、UI测试)\n     ├── main/java (业务代码)\n     └── test/java  (Local 单元测试)\n```\n\n1. Local test:\n\n    > 运行在本地的JVM虚拟机上，不依赖Android框架。\n2. Instrumented tests:\n    \n    > 通过Android系统的Instrumented测试框架，运行测试代码在真实手机上。\n    \n## Android Junit + Mockito + Powermock单元测试方案\n### Junit + Mockito + Powermock简介 \n**Junit** 是一个Java语言的单元测试框架\n**Mockito** 是一个Mock框架，我们可以通过Mockito框架创建配置mock对象。\n**Powermock** 可以针对static，final，private方法进行mock\n\n### Junit + Mockito + Powermock使用\n\n强烈建议你熟读以下内容，来熟悉Junit + Mockito + Powermock的使用。\n\n1. [Mockito 中文文档 ( 2.0.26 beta )](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fhehonghui%2Fmockito-doc-zh)\n2. [Mockito reference documentation](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fsite.mockito.org%2Fmockito%2Fdocs%2Fcurrent%2Forg%2Fmockito%2FMockito.html)\n3. [powermock wiki](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki)\n4. [Unit tests with Mockito - Tutorial](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki)\n\n#### 比如说我们要对Calculate类进行单元测试\n\n```java\npublic class Calculate {\n\n    private int mPrivate;\n\n    private final int mPrivateFinal = 0;\n\n    private static int mPrivateStatic = 0;\n\n    private static final int mPrivateStaticFinal = 0;\n\n    public int mPublic;\n\n    public final int mPublicFinal = 0;\n\n    public static int mPublicStatic = 0;\n\n    public static final int mPublicStaticFinal = 0;\n\n    public void voidPublicMethod(int a, int b) {\n        return;\n    }\n\n    public int addPublicMethod(int a, int b) {\n        return a + b;\n    }\n\n    private int addPrivateMethod(int a, int b) {\n        return a + b;\n    }\n\n    public static int addPublicStaticMethod(int a, int b) {\n        return a + b;\n    }\n\n    private static int addPrivateStaticMethod(int a, int b) {\n        return a + b;\n    }\n\n}\n```\n\n1. 测试Public 变量\n\n    ```java\n     @Test\n    public void testPublicField() {\n        assertEquals(mCalculate.mPublic, 0);\n        assertEquals(mCalculate.mPublicFinal, 0);\n        assertEquals(Calculate.mPublicStatic, 0);\n        assertEquals(Calculate.mPublicStaticFinal, 0);\n\n        mCalculate.mPublic = 1;\n        Calculate.mPublicStatic = 2;\n\n        assertEquals(mCalculate.mPublic, 1);\n        assertEquals(mCalculate.mPublicFinal, 0);\n        assertEquals(Calculate.mPublicStatic, 2);\n    }\n    ```\n2. 测试Public 方法\n\n    ```\n      @Test\n    public void testAddPublicMethod() {\n        //when\n        when(mCalculate.addPublicMethod(anyInt(), anyInt()))\n                .thenReturn(0)\n                .thenReturn(1);\n\n        //call method\n        for (int i = 0; i < 2; i++) {\n\n            //verify\n            assertEquals(mCalculate.addPublicMethod(i, i), i);\n        }\n\n        //verify\n        verify(mCalculate, times(2)).addPublicMethod(anyInt(), anyInt());\n        verify(mCalculate, atLeast(1)).addPublicMethod(anyInt(), anyInt());\n        verify(mCalculate, atLeastOnce()).addPublicMethod(anyInt(), anyInt());\n        verify(mCalculate, atMost(2)).addPublicMethod(anyInt(), anyInt());\n    }\n    ```\n    \n3. 测试Public 返回Void 方法\n\n    ```\n    @Test\n    public void testAddPublicVoidMethod() {\n        //when\n        doNothing().when(mCalculate).voidPublicMethod(anyInt(), anyInt());\n\n    }\n    ```\n    \n4. 测试Public Static 方法\n\n    ```java\n    @Test\n    public void testAddPublicStaicMethod() throws Exception {\n        PowerMockito.mockStatic(Calculate.class);\n\n        PowerMockito.when(Calculate.class, \"addPublicStaticMethod\", anyInt(), anyInt())\n                .thenReturn(0)\n                .thenReturn(1);\n    }\n    ```\n    \n5. 测试Private Static 变量\n\n    ```java\n     @Test\n    public void testPrivate() throws IllegalAccessException {\n        PowerMockito.mockStatic(Calculate.class);\n\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivate\").getInt(mCalculate), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateFinal\").getInt(mCalculate), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStatic\").getInt(null), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStaticFinal\").getInt(null), 0);\n\n\n        Whitebox.setInternalState(mCalculate, \"mPrivate\", 1);\n        Whitebox.setInternalState(Calculate.class, \"mPrivateStatic\", 1, Calculate.class);\n\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivate\").getInt(mCalculate), 1);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateFinal\").getInt(mCalculate), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStatic\").getInt(null), 1);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStaticFinal\").getInt(null), 0);\n    }\n    ```\n    \n6. 测试Private 方法\n\n    ```java\n     @Test\n    public void testAddPrivateMethod() throws Exception {\n        PowerMockito.mockStatic(Calc.class);\n\n        //when\n        PowerMockito.when(mCalculate,\"addPrivateMethod\",anyInt(),anyInt())\n                .thenReturn(0)\n                .thenReturn(1);\n        \n    }\n    ```\n    \n7. 测试Private static 方法\n\n    ```java\n    @Test\n    public void testAddPrivateStaicMethod() throws Exception {\n        PowerMockito.mockStatic(Calculate.class);\n\n        PowerMockito.when(Calculate.class, \"addPrivateStaticMethod\", anyInt(), anyInt())\n                .thenReturn(0)\n                .thenReturn(1);\n    }\n    ```\n    \n#### 对单例进行mock\n\n比如对以下代码进行mock\n\n```java\npublic class Singleton {\n\n    public String PUBLIC_STR = \"public_str\";\n\n    private static class ServiceSingleton {\n        private static final Singleton SINGLE = new Singleton();\n    }\n\n    public static Singleton get() {\n        return ServiceSingleton.SINGLE;\n    }\n\n    public String getPublicStr() {\n        return PUBLIC_STR;\n    }\n\n}\n```\n\n```java\npublic class SingletonUse {\n    private static final String PUBLIC_STR = \"public_str\";\n\n    private static class ServiceSingleton {\n        private static final SingletonUse SINGLE = new SingletonUse();\n    }\n\n    public static SingletonUse get() {\n        return ServiceSingleton.SINGLE;\n    }\n\n    public String getUsePublicStr() {\n        return Singleton.get().getPublicStr();\n    }\n}\n```\n\n测试类\n\n```java\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({Singleton.class, SingletonUse.class})\npublic class SingletonUseTest {\n\n    private SingletonUse singletonUse;\n\n    @Before\n    public void setUp() throws Exception {\n        Singleton singleton = PowerMockito.mock(Singleton.class);\n        PowerMockito.mockStatic(Singleton.class);\n        PowerMockito.doReturn(singleton).when(Singleton.class, \"get\");\n\n        singletonUse = PowerMockito.mock(SingletonUse.class);\n        PowerMockito.mockStatic(SingletonUse.class);\n        PowerMockito.doReturn(singletonUse).when(SingletonUse.class, \"get\");\n    }\n\n    @Test\n    public void getUsePublicStr() throws Exception {\n        PowerMockito.doReturn(\"123456\").when(singletonUse,\"getUsePublicStr\");\n    }\n}\n```\n\n\n    \n# 参考资料\n\n4. [Unit testing support](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Ftools.android.com%2Ftech-docs%2Funit-testing-support)\n5. [junit4](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fjunit.org%2Fjunit4%2F)\n6. [mockito](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fmockito.org%2F)\n7. [powermock](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock)\n9. [在Android Studio中进行单元测试和UI测试](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fwww.jianshu.com%2Fp%2F03118c11c199)\n10. [Android单元测试只看这一篇就够了](https://www.jianshu.com/p/aa51a3e007e2)\n11. [代码覆盖率浅谈](https://www.cnblogs.com/coderzh/archive/2009/03/29/1424344.html?tt_from=copy_link&utm_source=copy_link&utm_medium=toutiao_ios&utm_campaign=client_share)\n12. [PowerMock单元测试踩坑与总结](https://cloud.tencent.com/developer/article/1381404)\n\n\n\n\n\n\n",
        "source": "_posts/20191220AndroidUnitTest.md",
        "raw": "---\ntitle: Android 开发如何进行单元测试\ndate: 2019-12-23 17:08:54\ntags:\n- Android UnitTest\ncategories:\n- Android开发笔记\n---\n\n# 什么是单元测试\n\n单元测试是由一组独立的测试构成，每个测试针对软件中的一个单独的程序单元。单元测试并非检查程序单元直接是否能够合作良好，而是检查单个程序单元的行为是否正确。\n\n事实上，单元测试是一种**验证行为**，测试和验证程序中的每一项的正确性。\n\n\n<!--more-->\n\n# 为什么要进行单元测试\n\n对于单元测试，人们往往存在很多误解：\n\n1. 浪费时间太多，本身项目的时间就很紧张，没有时间去写单元测试。\n2. 过度的依赖测试人员，认为软件开发人员不应该参与单元测试。\n3. 认为单元测试不必要，代码写得很好了，no bug，no warning。\n4. 老代码结构混乱，耦合度高，为了写单元测试修改代码结构，意义不大，投入跟产出不成比例。\n\n> 单元测试真的这么鸡肋么？No，No，No！！！\n\n试想\n\n1. 测试人员给你报了一个bug，但是由于之后的merge失误导致代码丢失，或者别人修改代码导致这个bug再次复现。\n2. 重构代码的时候，被bug淹没。造成你持续不断的改bug，持续不断的加班。\n3. 明明很正常的功能，怎么现在突然不能用了？是接口的问题，还是有人修改了这个功能的逻辑？\n\n    。。。\n\n如果你也经常遇到这些困惑，那么你就需要对项目进行**单元测试**了。\n\n因为**单元测试**具有以下优势：\n\n1. **帮助理解需求**\n\n    > 单元测试应该反映Use Case，把被测单元当成黑盒测试其外部行为。\n\n2. **提高实现质量** \n    \n    > 单元测试不保证程序做正确的事，但能帮助保证程序正确地做事，从而提高实现质量。\n    \n3. **测试成本低**\n\n    > 相比集成测试、验收测试，单元测试所依赖的外部环境少，自动化程度高，时间短，节约了测试成本。  \n    \n4. **反馈速度快**\n\n    > 单元测试提供快速反馈，把bug消灭在开发阶段，减少问题流到集成测试、验收测试和用户，降低了软件质量控制的成本。\n    \n5. **利于重构** \n\n    > 由于有单元测试作为回归测试用例，有助于预防在重构过程中引入bug。\n    \n6. **文档作用** \n\n    > 单元测试提供了被测单元的使用场景，起到了使用文档的作用。\n    \n7. **对设计的反馈** \n\n    > 一个模块很难进行单元测试通常是不良设计的信号，单元测试可以反过来指导设计出高内聚、低耦合的模块。\n    \n[为什么要做单元测试？](https://www.cnblogs.com/weidagang2046/articles/1753417.html)\n\n# 怎么进行单元测试\n\n## Android 单元测试分类\n\nAndroid 单元测试分为两大类： \n\n```\napp/src\n     ├── androidTestjava (Instrumented 单元测试、UI测试)\n     ├── main/java (业务代码)\n     └── test/java  (Local 单元测试)\n```\n\n1. Local test:\n\n    > 运行在本地的JVM虚拟机上，不依赖Android框架。\n2. Instrumented tests:\n    \n    > 通过Android系统的Instrumented测试框架，运行测试代码在真实手机上。\n    \n## Android Junit + Mockito + Powermock单元测试方案\n### Junit + Mockito + Powermock简介 \n**Junit** 是一个Java语言的单元测试框架\n**Mockito** 是一个Mock框架，我们可以通过Mockito框架创建配置mock对象。\n**Powermock** 可以针对static，final，private方法进行mock\n\n### Junit + Mockito + Powermock使用\n\n强烈建议你熟读以下内容，来熟悉Junit + Mockito + Powermock的使用。\n\n1. [Mockito 中文文档 ( 2.0.26 beta )](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fhehonghui%2Fmockito-doc-zh)\n2. [Mockito reference documentation](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fsite.mockito.org%2Fmockito%2Fdocs%2Fcurrent%2Forg%2Fmockito%2FMockito.html)\n3. [powermock wiki](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki)\n4. [Unit tests with Mockito - Tutorial](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki)\n\n#### 比如说我们要对Calculate类进行单元测试\n\n```java\npublic class Calculate {\n\n    private int mPrivate;\n\n    private final int mPrivateFinal = 0;\n\n    private static int mPrivateStatic = 0;\n\n    private static final int mPrivateStaticFinal = 0;\n\n    public int mPublic;\n\n    public final int mPublicFinal = 0;\n\n    public static int mPublicStatic = 0;\n\n    public static final int mPublicStaticFinal = 0;\n\n    public void voidPublicMethod(int a, int b) {\n        return;\n    }\n\n    public int addPublicMethod(int a, int b) {\n        return a + b;\n    }\n\n    private int addPrivateMethod(int a, int b) {\n        return a + b;\n    }\n\n    public static int addPublicStaticMethod(int a, int b) {\n        return a + b;\n    }\n\n    private static int addPrivateStaticMethod(int a, int b) {\n        return a + b;\n    }\n\n}\n```\n\n1. 测试Public 变量\n\n    ```java\n     @Test\n    public void testPublicField() {\n        assertEquals(mCalculate.mPublic, 0);\n        assertEquals(mCalculate.mPublicFinal, 0);\n        assertEquals(Calculate.mPublicStatic, 0);\n        assertEquals(Calculate.mPublicStaticFinal, 0);\n\n        mCalculate.mPublic = 1;\n        Calculate.mPublicStatic = 2;\n\n        assertEquals(mCalculate.mPublic, 1);\n        assertEquals(mCalculate.mPublicFinal, 0);\n        assertEquals(Calculate.mPublicStatic, 2);\n    }\n    ```\n2. 测试Public 方法\n\n    ```\n      @Test\n    public void testAddPublicMethod() {\n        //when\n        when(mCalculate.addPublicMethod(anyInt(), anyInt()))\n                .thenReturn(0)\n                .thenReturn(1);\n\n        //call method\n        for (int i = 0; i < 2; i++) {\n\n            //verify\n            assertEquals(mCalculate.addPublicMethod(i, i), i);\n        }\n\n        //verify\n        verify(mCalculate, times(2)).addPublicMethod(anyInt(), anyInt());\n        verify(mCalculate, atLeast(1)).addPublicMethod(anyInt(), anyInt());\n        verify(mCalculate, atLeastOnce()).addPublicMethod(anyInt(), anyInt());\n        verify(mCalculate, atMost(2)).addPublicMethod(anyInt(), anyInt());\n    }\n    ```\n    \n3. 测试Public 返回Void 方法\n\n    ```\n    @Test\n    public void testAddPublicVoidMethod() {\n        //when\n        doNothing().when(mCalculate).voidPublicMethod(anyInt(), anyInt());\n\n    }\n    ```\n    \n4. 测试Public Static 方法\n\n    ```java\n    @Test\n    public void testAddPublicStaicMethod() throws Exception {\n        PowerMockito.mockStatic(Calculate.class);\n\n        PowerMockito.when(Calculate.class, \"addPublicStaticMethod\", anyInt(), anyInt())\n                .thenReturn(0)\n                .thenReturn(1);\n    }\n    ```\n    \n5. 测试Private Static 变量\n\n    ```java\n     @Test\n    public void testPrivate() throws IllegalAccessException {\n        PowerMockito.mockStatic(Calculate.class);\n\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivate\").getInt(mCalculate), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateFinal\").getInt(mCalculate), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStatic\").getInt(null), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStaticFinal\").getInt(null), 0);\n\n\n        Whitebox.setInternalState(mCalculate, \"mPrivate\", 1);\n        Whitebox.setInternalState(Calculate.class, \"mPrivateStatic\", 1, Calculate.class);\n\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivate\").getInt(mCalculate), 1);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateFinal\").getInt(mCalculate), 0);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStatic\").getInt(null), 1);\n        assertEquals(Whitebox.getField(Calculate.class, \"mPrivateStaticFinal\").getInt(null), 0);\n    }\n    ```\n    \n6. 测试Private 方法\n\n    ```java\n     @Test\n    public void testAddPrivateMethod() throws Exception {\n        PowerMockito.mockStatic(Calc.class);\n\n        //when\n        PowerMockito.when(mCalculate,\"addPrivateMethod\",anyInt(),anyInt())\n                .thenReturn(0)\n                .thenReturn(1);\n        \n    }\n    ```\n    \n7. 测试Private static 方法\n\n    ```java\n    @Test\n    public void testAddPrivateStaicMethod() throws Exception {\n        PowerMockito.mockStatic(Calculate.class);\n\n        PowerMockito.when(Calculate.class, \"addPrivateStaticMethod\", anyInt(), anyInt())\n                .thenReturn(0)\n                .thenReturn(1);\n    }\n    ```\n    \n#### 对单例进行mock\n\n比如对以下代码进行mock\n\n```java\npublic class Singleton {\n\n    public String PUBLIC_STR = \"public_str\";\n\n    private static class ServiceSingleton {\n        private static final Singleton SINGLE = new Singleton();\n    }\n\n    public static Singleton get() {\n        return ServiceSingleton.SINGLE;\n    }\n\n    public String getPublicStr() {\n        return PUBLIC_STR;\n    }\n\n}\n```\n\n```java\npublic class SingletonUse {\n    private static final String PUBLIC_STR = \"public_str\";\n\n    private static class ServiceSingleton {\n        private static final SingletonUse SINGLE = new SingletonUse();\n    }\n\n    public static SingletonUse get() {\n        return ServiceSingleton.SINGLE;\n    }\n\n    public String getUsePublicStr() {\n        return Singleton.get().getPublicStr();\n    }\n}\n```\n\n测试类\n\n```java\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({Singleton.class, SingletonUse.class})\npublic class SingletonUseTest {\n\n    private SingletonUse singletonUse;\n\n    @Before\n    public void setUp() throws Exception {\n        Singleton singleton = PowerMockito.mock(Singleton.class);\n        PowerMockito.mockStatic(Singleton.class);\n        PowerMockito.doReturn(singleton).when(Singleton.class, \"get\");\n\n        singletonUse = PowerMockito.mock(SingletonUse.class);\n        PowerMockito.mockStatic(SingletonUse.class);\n        PowerMockito.doReturn(singletonUse).when(SingletonUse.class, \"get\");\n    }\n\n    @Test\n    public void getUsePublicStr() throws Exception {\n        PowerMockito.doReturn(\"123456\").when(singletonUse,\"getUsePublicStr\");\n    }\n}\n```\n\n\n    \n# 参考资料\n\n4. [Unit testing support](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Ftools.android.com%2Ftech-docs%2Funit-testing-support)\n5. [junit4](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fjunit.org%2Fjunit4%2F)\n6. [mockito](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fmockito.org%2F)\n7. [powermock](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock)\n9. [在Android Studio中进行单元测试和UI测试](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&url=http%3A%2F%2Fwww.jianshu.com%2Fp%2F03118c11c199)\n10. [Android单元测试只看这一篇就够了](https://www.jianshu.com/p/aa51a3e007e2)\n11. [代码覆盖率浅谈](https://www.cnblogs.com/coderzh/archive/2009/03/29/1424344.html?tt_from=copy_link&utm_source=copy_link&utm_medium=toutiao_ios&utm_campaign=client_share)\n12. [PowerMock单元测试踩坑与总结](https://cloud.tencent.com/developer/article/1381404)\n\n\n\n\n\n\n",
        "slug": "20191220AndroidUnitTest",
        "published": 1,
        "updated": "2020-05-19T02:32:04.676Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1e000952j97mw1px63",
        "content": "<h1 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h1><p>单元测试是由一组独立的测试构成，每个测试针对软件中的一个单独的程序单元。单元测试并非检查程序单元直接是否能够合作良好，而是检查单个程序单元的行为是否正确。</p>\n<p>事实上，单元测试是一种<strong>验证行为</strong>，测试和验证程序中的每一项的正确性。</p>\n<a id=\"more\"></a>\n<h1 id=\"为什么要进行单元测试\"><a href=\"#为什么要进行单元测试\" class=\"headerlink\" title=\"为什么要进行单元测试\"></a>为什么要进行单元测试</h1><p>对于单元测试，人们往往存在很多误解：</p>\n<ol>\n<li>浪费时间太多，本身项目的时间就很紧张，没有时间去写单元测试。</li>\n<li>过度的依赖测试人员，认为软件开发人员不应该参与单元测试。</li>\n<li>认为单元测试不必要，代码写得很好了，no bug，no warning。</li>\n<li>老代码结构混乱，耦合度高，为了写单元测试修改代码结构，意义不大，投入跟产出不成比例。</li>\n</ol>\n<blockquote>\n<p>单元测试真的这么鸡肋么？No，No，No！！！</p>\n</blockquote>\n<p>试想</p>\n<ol>\n<li>测试人员给你报了一个bug，但是由于之后的merge失误导致代码丢失，或者别人修改代码导致这个bug再次复现。</li>\n<li>重构代码的时候，被bug淹没。造成你持续不断的改bug，持续不断的加班。</li>\n<li><p>明明很正常的功能，怎么现在突然不能用了？是接口的问题，还是有人修改了这个功能的逻辑？</p>\n<p> 。。。</p>\n</li>\n</ol>\n<p>如果你也经常遇到这些困惑，那么你就需要对项目进行<strong>单元测试</strong>了。</p>\n<p>因为<strong>单元测试</strong>具有以下优势：</p>\n<ol>\n<li><p><strong>帮助理解需求</strong></p>\n<blockquote>\n<p>单元测试应该反映Use Case，把被测单元当成黑盒测试其外部行为。</p>\n</blockquote>\n</li>\n<li><p><strong>提高实现质量</strong> </p>\n<blockquote>\n<p>单元测试不保证程序做正确的事，但能帮助保证程序正确地做事，从而提高实现质量。</p>\n</blockquote>\n</li>\n<li><p><strong>测试成本低</strong></p>\n<blockquote>\n<p>相比集成测试、验收测试，单元测试所依赖的外部环境少，自动化程度高，时间短，节约了测试成本。  </p>\n</blockquote>\n</li>\n<li><p><strong>反馈速度快</strong></p>\n<blockquote>\n<p>单元测试提供快速反馈，把bug消灭在开发阶段，减少问题流到集成测试、验收测试和用户，降低了软件质量控制的成本。</p>\n</blockquote>\n</li>\n<li><p><strong>利于重构</strong> </p>\n<blockquote>\n<p>由于有单元测试作为回归测试用例，有助于预防在重构过程中引入bug。</p>\n</blockquote>\n</li>\n<li><p><strong>文档作用</strong> </p>\n<blockquote>\n<p>单元测试提供了被测单元的使用场景，起到了使用文档的作用。</p>\n</blockquote>\n</li>\n<li><p><strong>对设计的反馈</strong> </p>\n<blockquote>\n<p>一个模块很难进行单元测试通常是不良设计的信号，单元测试可以反过来指导设计出高内聚、低耦合的模块。</p>\n</blockquote>\n</li>\n</ol>\n<p><a href=\"https://www.cnblogs.com/weidagang2046/articles/1753417.html\" target=\"_blank\" rel=\"noopener\">为什么要做单元测试？</a></p>\n<h1 id=\"怎么进行单元测试\"><a href=\"#怎么进行单元测试\" class=\"headerlink\" title=\"怎么进行单元测试\"></a>怎么进行单元测试</h1><h2 id=\"Android-单元测试分类\"><a href=\"#Android-单元测试分类\" class=\"headerlink\" title=\"Android 单元测试分类\"></a>Android 单元测试分类</h2><p>Android 单元测试分为两大类： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/src</span><br><span class=\"line\">     ├── androidTestjava (Instrumented 单元测试、UI测试)</span><br><span class=\"line\">     ├── main/java (业务代码)</span><br><span class=\"line\">     └── test/java  (Local 单元测试)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Local test:</p>\n<blockquote>\n<p>运行在本地的JVM虚拟机上，不依赖Android框架。</p>\n</blockquote>\n</li>\n<li><p>Instrumented tests:</p>\n<blockquote>\n<p>通过Android系统的Instrumented测试框架，运行测试代码在真实手机上。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"Android-Junit-Mockito-Powermock单元测试方案\"><a href=\"#Android-Junit-Mockito-Powermock单元测试方案\" class=\"headerlink\" title=\"Android Junit + Mockito + Powermock单元测试方案\"></a>Android Junit + Mockito + Powermock单元测试方案</h2><h3 id=\"Junit-Mockito-Powermock简介\"><a href=\"#Junit-Mockito-Powermock简介\" class=\"headerlink\" title=\"Junit + Mockito + Powermock简介\"></a>Junit + Mockito + Powermock简介</h3><p><strong>Junit</strong> 是一个Java语言的单元测试框架<br><strong>Mockito</strong> 是一个Mock框架，我们可以通过Mockito框架创建配置mock对象。<br><strong>Powermock</strong> 可以针对static，final，private方法进行mock</p>\n<h3 id=\"Junit-Mockito-Powermock使用\"><a href=\"#Junit-Mockito-Powermock使用\" class=\"headerlink\" title=\"Junit + Mockito + Powermock使用\"></a>Junit + Mockito + Powermock使用</h3><p>强烈建议你熟读以下内容，来熟悉Junit + Mockito + Powermock的使用。</p>\n<ol>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fhehonghui%2Fmockito-doc-zh\" target=\"_blank\" rel=\"noopener\">Mockito 中文文档 ( 2.0.26 beta )</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fsite.mockito.org%2Fmockito%2Fdocs%2Fcurrent%2Forg%2Fmockito%2FMockito.html\" target=\"_blank\" rel=\"noopener\">Mockito reference documentation</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki\" target=\"_blank\" rel=\"noopener\">powermock wiki</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki\" target=\"_blank\" rel=\"noopener\">Unit tests with Mockito - Tutorial</a></li>\n</ol>\n<h4 id=\"比如说我们要对Calculate类进行单元测试\"><a href=\"#比如说我们要对Calculate类进行单元测试\" class=\"headerlink\" title=\"比如说我们要对Calculate类进行单元测试\"></a>比如说我们要对Calculate类进行单元测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mPrivate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPrivateFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mPrivateStatic = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPrivateStaticFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> mPublic;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPublicFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mPublicStatic = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPublicStaticFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">voidPublicMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addPublicMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">addPrivateMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addPublicStaticMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addPrivateStaticMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>测试Public 变量</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPublicField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(mCalculate.mPublic, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(mCalculate.mPublicFinal, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Calculate.mPublicStatic, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Calculate.mPublicStaticFinal, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mCalculate.mPublic = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Calculate.mPublicStatic = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(mCalculate.mPublic, <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(mCalculate.mPublicFinal, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Calculate.mPublicStatic, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试Public 方法</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  @Test</span><br><span class=\"line\">public void testAddPublicMethod() &#123;</span><br><span class=\"line\">    //when</span><br><span class=\"line\">    when(mCalculate.addPublicMethod(anyInt(), anyInt()))</span><br><span class=\"line\">            .thenReturn(0)</span><br><span class=\"line\">            .thenReturn(1);</span><br><span class=\"line\"></span><br><span class=\"line\">    //call method</span><br><span class=\"line\">    for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //verify</span><br><span class=\"line\">        assertEquals(mCalculate.addPublicMethod(i, i), i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //verify</span><br><span class=\"line\">    verify(mCalculate, times(2)).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">    verify(mCalculate, atLeast(1)).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">    verify(mCalculate, atLeastOnce()).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">    verify(mCalculate, atMost(2)).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>测试Public 返回Void 方法</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testAddPublicVoidMethod() &#123;</span><br><span class=\"line\">    //when</span><br><span class=\"line\">    doNothing().when(mCalculate).voidPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>测试Public Static 方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddPublicStaicMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.when(Calculate.class, <span class=\"string\">\"addPublicStaticMethod\"</span>, anyInt(), anyInt())</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>测试Private Static 变量</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPrivate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivate\"</span>).getInt(mCalculate), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateFinal\"</span>).getInt(mCalculate), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStatic\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStaticFinal\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Whitebox.setInternalState(mCalculate, <span class=\"string\">\"mPrivate\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    Whitebox.setInternalState(Calculate.class, <span class=\"string\">\"mPrivateStatic\"</span>, <span class=\"number\">1</span>, Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivate\"</span>).getInt(mCalculate), <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateFinal\"</span>).getInt(mCalculate), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStatic\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStaticFinal\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>测试Private 方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddPrivateMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calc.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//when</span></span><br><span class=\"line\">    PowerMockito.when(mCalculate,<span class=\"string\">\"addPrivateMethod\"</span>,anyInt(),anyInt())</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>测试Private static 方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddPrivateStaicMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.when(Calculate.class, <span class=\"string\">\"addPrivateStaticMethod\"</span>, anyInt(), anyInt())</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"对单例进行mock\"><a href=\"#对单例进行mock\" class=\"headerlink\" title=\"对单例进行mock\"></a>对单例进行mock</h4><p>比如对以下代码进行mock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String PUBLIC_STR = <span class=\"string\">\"public_str\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceSingleton</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton SINGLE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ServiceSingleton.SINGLE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPublicStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PUBLIC_STR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonUse</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PUBLIC_STR = <span class=\"string\">\"public_str\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceSingleton</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonUse SINGLE = <span class=\"keyword\">new</span> SingletonUse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonUse <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ServiceSingleton.SINGLE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsePublicStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton.get().getPublicStr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(PowerMockRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@PrepareForTest</span>(&#123;Singleton.class, SingletonUse.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonUseTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SingletonUse singletonUse;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Singleton singleton = PowerMockito.mock(Singleton.class);</span><br><span class=\"line\">        PowerMockito.mockStatic(Singleton.class);</span><br><span class=\"line\">        PowerMockito.doReturn(singleton).when(Singleton.class, <span class=\"string\">\"get\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        singletonUse = PowerMockito.mock(SingletonUse.class);</span><br><span class=\"line\">        PowerMockito.mockStatic(SingletonUse.class);</span><br><span class=\"line\">        PowerMockito.doReturn(singletonUse).when(SingletonUse.class, <span class=\"string\">\"get\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getUsePublicStr</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        PowerMockito.doReturn(<span class=\"string\">\"123456\"</span>).when(singletonUse,<span class=\"string\">\"getUsePublicStr\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol start=\"4\">\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Ftools.android.com%2Ftech-docs%2Funit-testing-support\" target=\"_blank\" rel=\"noopener\">Unit testing support</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fjunit.org%2Fjunit4%2F\" target=\"_blank\" rel=\"noopener\">junit4</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fmockito.org%2F\" target=\"_blank\" rel=\"noopener\">mockito</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock\" target=\"_blank\" rel=\"noopener\">powermock</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fwww.jianshu.com%2Fp%2F03118c11c199\" target=\"_blank\" rel=\"noopener\">在Android Studio中进行单元测试和UI测试</a></li>\n<li><a href=\"https://www.jianshu.com/p/aa51a3e007e2\" target=\"_blank\" rel=\"noopener\">Android单元测试只看这一篇就够了</a></li>\n<li><a href=\"https://www.cnblogs.com/coderzh/archive/2009/03/29/1424344.html?tt_from=copy_link&amp;utm_source=copy_link&amp;utm_medium=toutiao_ios&amp;utm_campaign=client_share\" target=\"_blank\" rel=\"noopener\">代码覆盖率浅谈</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1381404\" target=\"_blank\" rel=\"noopener\">PowerMock单元测试踩坑与总结</a></li>\n</ol>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h1><p>单元测试是由一组独立的测试构成，每个测试针对软件中的一个单独的程序单元。单元测试并非检查程序单元直接是否能够合作良好，而是检查单个程序单元的行为是否正确。</p>\n<p>事实上，单元测试是一种<strong>验证行为</strong>，测试和验证程序中的每一项的正确性。</p>",
        "more": "<h1 id=\"为什么要进行单元测试\"><a href=\"#为什么要进行单元测试\" class=\"headerlink\" title=\"为什么要进行单元测试\"></a>为什么要进行单元测试</h1><p>对于单元测试，人们往往存在很多误解：</p>\n<ol>\n<li>浪费时间太多，本身项目的时间就很紧张，没有时间去写单元测试。</li>\n<li>过度的依赖测试人员，认为软件开发人员不应该参与单元测试。</li>\n<li>认为单元测试不必要，代码写得很好了，no bug，no warning。</li>\n<li>老代码结构混乱，耦合度高，为了写单元测试修改代码结构，意义不大，投入跟产出不成比例。</li>\n</ol>\n<blockquote>\n<p>单元测试真的这么鸡肋么？No，No，No！！！</p>\n</blockquote>\n<p>试想</p>\n<ol>\n<li>测试人员给你报了一个bug，但是由于之后的merge失误导致代码丢失，或者别人修改代码导致这个bug再次复现。</li>\n<li>重构代码的时候，被bug淹没。造成你持续不断的改bug，持续不断的加班。</li>\n<li><p>明明很正常的功能，怎么现在突然不能用了？是接口的问题，还是有人修改了这个功能的逻辑？</p>\n<p> 。。。</p>\n</li>\n</ol>\n<p>如果你也经常遇到这些困惑，那么你就需要对项目进行<strong>单元测试</strong>了。</p>\n<p>因为<strong>单元测试</strong>具有以下优势：</p>\n<ol>\n<li><p><strong>帮助理解需求</strong></p>\n<blockquote>\n<p>单元测试应该反映Use Case，把被测单元当成黑盒测试其外部行为。</p>\n</blockquote>\n</li>\n<li><p><strong>提高实现质量</strong> </p>\n<blockquote>\n<p>单元测试不保证程序做正确的事，但能帮助保证程序正确地做事，从而提高实现质量。</p>\n</blockquote>\n</li>\n<li><p><strong>测试成本低</strong></p>\n<blockquote>\n<p>相比集成测试、验收测试，单元测试所依赖的外部环境少，自动化程度高，时间短，节约了测试成本。  </p>\n</blockquote>\n</li>\n<li><p><strong>反馈速度快</strong></p>\n<blockquote>\n<p>单元测试提供快速反馈，把bug消灭在开发阶段，减少问题流到集成测试、验收测试和用户，降低了软件质量控制的成本。</p>\n</blockquote>\n</li>\n<li><p><strong>利于重构</strong> </p>\n<blockquote>\n<p>由于有单元测试作为回归测试用例，有助于预防在重构过程中引入bug。</p>\n</blockquote>\n</li>\n<li><p><strong>文档作用</strong> </p>\n<blockquote>\n<p>单元测试提供了被测单元的使用场景，起到了使用文档的作用。</p>\n</blockquote>\n</li>\n<li><p><strong>对设计的反馈</strong> </p>\n<blockquote>\n<p>一个模块很难进行单元测试通常是不良设计的信号，单元测试可以反过来指导设计出高内聚、低耦合的模块。</p>\n</blockquote>\n</li>\n</ol>\n<p><a href=\"https://www.cnblogs.com/weidagang2046/articles/1753417.html\" target=\"_blank\" rel=\"noopener\">为什么要做单元测试？</a></p>\n<h1 id=\"怎么进行单元测试\"><a href=\"#怎么进行单元测试\" class=\"headerlink\" title=\"怎么进行单元测试\"></a>怎么进行单元测试</h1><h2 id=\"Android-单元测试分类\"><a href=\"#Android-单元测试分类\" class=\"headerlink\" title=\"Android 单元测试分类\"></a>Android 单元测试分类</h2><p>Android 单元测试分为两大类： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/src</span><br><span class=\"line\">     ├── androidTestjava (Instrumented 单元测试、UI测试)</span><br><span class=\"line\">     ├── main/java (业务代码)</span><br><span class=\"line\">     └── test/java  (Local 单元测试)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>Local test:</p>\n<blockquote>\n<p>运行在本地的JVM虚拟机上，不依赖Android框架。</p>\n</blockquote>\n</li>\n<li><p>Instrumented tests:</p>\n<blockquote>\n<p>通过Android系统的Instrumented测试框架，运行测试代码在真实手机上。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"Android-Junit-Mockito-Powermock单元测试方案\"><a href=\"#Android-Junit-Mockito-Powermock单元测试方案\" class=\"headerlink\" title=\"Android Junit + Mockito + Powermock单元测试方案\"></a>Android Junit + Mockito + Powermock单元测试方案</h2><h3 id=\"Junit-Mockito-Powermock简介\"><a href=\"#Junit-Mockito-Powermock简介\" class=\"headerlink\" title=\"Junit + Mockito + Powermock简介\"></a>Junit + Mockito + Powermock简介</h3><p><strong>Junit</strong> 是一个Java语言的单元测试框架<br><strong>Mockito</strong> 是一个Mock框架，我们可以通过Mockito框架创建配置mock对象。<br><strong>Powermock</strong> 可以针对static，final，private方法进行mock</p>\n<h3 id=\"Junit-Mockito-Powermock使用\"><a href=\"#Junit-Mockito-Powermock使用\" class=\"headerlink\" title=\"Junit + Mockito + Powermock使用\"></a>Junit + Mockito + Powermock使用</h3><p>强烈建议你熟读以下内容，来熟悉Junit + Mockito + Powermock的使用。</p>\n<ol>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fhehonghui%2Fmockito-doc-zh\" target=\"_blank\" rel=\"noopener\">Mockito 中文文档 ( 2.0.26 beta )</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fsite.mockito.org%2Fmockito%2Fdocs%2Fcurrent%2Forg%2Fmockito%2FMockito.html\" target=\"_blank\" rel=\"noopener\">Mockito reference documentation</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki\" target=\"_blank\" rel=\"noopener\">powermock wiki</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock%2Fwiki\" target=\"_blank\" rel=\"noopener\">Unit tests with Mockito - Tutorial</a></li>\n</ol>\n<h4 id=\"比如说我们要对Calculate类进行单元测试\"><a href=\"#比如说我们要对Calculate类进行单元测试\" class=\"headerlink\" title=\"比如说我们要对Calculate类进行单元测试\"></a>比如说我们要对Calculate类进行单元测试</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mPrivate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPrivateFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mPrivateStatic = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPrivateStaticFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> mPublic;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPublicFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mPublicStatic = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPublicStaticFinal = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">voidPublicMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addPublicMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">addPrivateMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addPublicStaticMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">addPrivateStaticMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>测试Public 变量</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPublicField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    assertEquals(mCalculate.mPublic, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(mCalculate.mPublicFinal, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Calculate.mPublicStatic, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Calculate.mPublicStaticFinal, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mCalculate.mPublic = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Calculate.mPublicStatic = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(mCalculate.mPublic, <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(mCalculate.mPublicFinal, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Calculate.mPublicStatic, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试Public 方法</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  @Test</span><br><span class=\"line\">public void testAddPublicMethod() &#123;</span><br><span class=\"line\">    //when</span><br><span class=\"line\">    when(mCalculate.addPublicMethod(anyInt(), anyInt()))</span><br><span class=\"line\">            .thenReturn(0)</span><br><span class=\"line\">            .thenReturn(1);</span><br><span class=\"line\"></span><br><span class=\"line\">    //call method</span><br><span class=\"line\">    for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //verify</span><br><span class=\"line\">        assertEquals(mCalculate.addPublicMethod(i, i), i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //verify</span><br><span class=\"line\">    verify(mCalculate, times(2)).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">    verify(mCalculate, atLeast(1)).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">    verify(mCalculate, atLeastOnce()).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">    verify(mCalculate, atMost(2)).addPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>测试Public 返回Void 方法</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testAddPublicVoidMethod() &#123;</span><br><span class=\"line\">    //when</span><br><span class=\"line\">    doNothing().when(mCalculate).voidPublicMethod(anyInt(), anyInt());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>测试Public Static 方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddPublicStaicMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.when(Calculate.class, <span class=\"string\">\"addPublicStaticMethod\"</span>, anyInt(), anyInt())</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>测试Private Static 变量</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPrivate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivate\"</span>).getInt(mCalculate), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateFinal\"</span>).getInt(mCalculate), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStatic\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStaticFinal\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Whitebox.setInternalState(mCalculate, <span class=\"string\">\"mPrivate\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    Whitebox.setInternalState(Calculate.class, <span class=\"string\">\"mPrivateStatic\"</span>, <span class=\"number\">1</span>, Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivate\"</span>).getInt(mCalculate), <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateFinal\"</span>).getInt(mCalculate), <span class=\"number\">0</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStatic\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(Whitebox.getField(Calculate.class, <span class=\"string\">\"mPrivateStaticFinal\"</span>).getInt(<span class=\"keyword\">null</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>测试Private 方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddPrivateMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calc.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//when</span></span><br><span class=\"line\">    PowerMockito.when(mCalculate,<span class=\"string\">\"addPrivateMethod\"</span>,anyInt(),anyInt())</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>测试Private static 方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddPrivateStaicMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PowerMockito.mockStatic(Calculate.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    PowerMockito.when(Calculate.class, <span class=\"string\">\"addPrivateStaticMethod\"</span>, anyInt(), anyInt())</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .thenReturn(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"对单例进行mock\"><a href=\"#对单例进行mock\" class=\"headerlink\" title=\"对单例进行mock\"></a>对单例进行mock</h4><p>比如对以下代码进行mock</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String PUBLIC_STR = <span class=\"string\">\"public_str\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceSingleton</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton SINGLE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ServiceSingleton.SINGLE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPublicStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> PUBLIC_STR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonUse</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PUBLIC_STR = <span class=\"string\">\"public_str\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceSingleton</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonUse SINGLE = <span class=\"keyword\">new</span> SingletonUse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonUse <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ServiceSingleton.SINGLE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsePublicStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton.get().getPublicStr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(PowerMockRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@PrepareForTest</span>(&#123;Singleton.class, SingletonUse.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonUseTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SingletonUse singletonUse;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Singleton singleton = PowerMockito.mock(Singleton.class);</span><br><span class=\"line\">        PowerMockito.mockStatic(Singleton.class);</span><br><span class=\"line\">        PowerMockito.doReturn(singleton).when(Singleton.class, <span class=\"string\">\"get\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        singletonUse = PowerMockito.mock(SingletonUse.class);</span><br><span class=\"line\">        PowerMockito.mockStatic(SingletonUse.class);</span><br><span class=\"line\">        PowerMockito.doReturn(singletonUse).when(SingletonUse.class, <span class=\"string\">\"get\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getUsePublicStr</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        PowerMockito.doReturn(<span class=\"string\">\"123456\"</span>).when(singletonUse,<span class=\"string\">\"getUsePublicStr\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol start=\"4\">\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Ftools.android.com%2Ftech-docs%2Funit-testing-support\" target=\"_blank\" rel=\"noopener\">Unit testing support</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fjunit.org%2Fjunit4%2F\" target=\"_blank\" rel=\"noopener\">junit4</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fmockito.org%2F\" target=\"_blank\" rel=\"noopener\">mockito</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=https%3A%2F%2Fgithub.com%2Fjayway%2Fpowermock\" target=\"_blank\" rel=\"noopener\">powermock</a></li>\n<li><a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.43bf26detjrS1T&amp;url=http%3A%2F%2Fwww.jianshu.com%2Fp%2F03118c11c199\" target=\"_blank\" rel=\"noopener\">在Android Studio中进行单元测试和UI测试</a></li>\n<li><a href=\"https://www.jianshu.com/p/aa51a3e007e2\" target=\"_blank\" rel=\"noopener\">Android单元测试只看这一篇就够了</a></li>\n<li><a href=\"https://www.cnblogs.com/coderzh/archive/2009/03/29/1424344.html?tt_from=copy_link&amp;utm_source=copy_link&amp;utm_medium=toutiao_ios&amp;utm_campaign=client_share\" target=\"_blank\" rel=\"noopener\">代码覆盖率浅谈</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1381404\" target=\"_blank\" rel=\"noopener\">PowerMock单元测试踩坑与总结</a></li>\n</ol>"
      },
      {
        "title": "使用命令行给Git项目加上tag",
        "date": "2016-07-04T06:53:04.000Z",
        "_content": "\n我们在提交git项目的时候,有时候需要给项目的版本加上标签,我们需要用到以下命令给代码加上标签.\n<!--more-->\n```\n$ git tag -a \"V2.3.3\" -m \"change version name\" \n$ git push --tags\n```\n**运行结果**\n```\nCounting objects: 1, done.\nWriting objects: 100% (1/1), 168 bytes | 0 bytes/s, done.\nTotal 1 (delta 0), reused 0 (delta 0)\nTo git@123.57.148.160:/home/git/android/GradleCommonTeacher.git\n * [new tag]         V2.3.3 -> V2.3.3\n\n```\n**然后我们看一下提交工作流**\n```\n$ gitk\n```\n![这里写图片描述](http://img.blog.csdn.net/20160704145003965)\n\nok~可以看到tag已经提交上去了~\n\n",
        "source": "_posts/AddGitTag.md",
        "raw": "---\ntitle: 使用命令行给Git项目加上tag\ndate: 2016-07-04 14:53:04\ntags:\n- Android Studio\n- Git \ncategories:\n- Git \n---\n\n我们在提交git项目的时候,有时候需要给项目的版本加上标签,我们需要用到以下命令给代码加上标签.\n<!--more-->\n```\n$ git tag -a \"V2.3.3\" -m \"change version name\" \n$ git push --tags\n```\n**运行结果**\n```\nCounting objects: 1, done.\nWriting objects: 100% (1/1), 168 bytes | 0 bytes/s, done.\nTotal 1 (delta 0), reused 0 (delta 0)\nTo git@123.57.148.160:/home/git/android/GradleCommonTeacher.git\n * [new tag]         V2.3.3 -> V2.3.3\n\n```\n**然后我们看一下提交工作流**\n```\n$ gitk\n```\n![这里写图片描述](http://img.blog.csdn.net/20160704145003965)\n\nok~可以看到tag已经提交上去了~\n\n",
        "slug": "AddGitTag",
        "published": 1,
        "updated": "2020-05-19T02:32:04.678Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1g000a52j96xhz0hik",
        "content": "<p>我们在提交git项目的时候,有时候需要给项目的版本加上标签,我们需要用到以下命令给代码加上标签.<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a &quot;V2.3.3&quot; -m &quot;change version name&quot; </span><br><span class=\"line\">$ git push --tags</span><br></pre></td></tr></table></figure></p>\n<p><strong>运行结果</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Counting objects: 1, done.</span><br><span class=\"line\">Writing objects: 100% (1/1), 168 bytes | 0 bytes/s, done.</span><br><span class=\"line\">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@123.57.148.160:/home/git/android/GradleCommonTeacher.git</span><br><span class=\"line\"> * [new tag]         V2.3.3 -&gt; V2.3.3</span><br></pre></td></tr></table></figure></p>\n<p><strong>然后我们看一下提交工作流</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitk</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20160704145003965\" alt=\"这里写图片描述\"></p>\n<p>ok~可以看到tag已经提交上去了~</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>我们在提交git项目的时候,有时候需要给项目的版本加上标签,我们需要用到以下命令给代码加上标签.<br>",
        "more": "<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a &quot;V2.3.3&quot; -m &quot;change version name&quot; </span><br><span class=\"line\">$ git push --tags</span><br></pre></td></tr></table></figure></p>\n<p><strong>运行结果</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Counting objects: 1, done.</span><br><span class=\"line\">Writing objects: 100% (1/1), 168 bytes | 0 bytes/s, done.</span><br><span class=\"line\">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@123.57.148.160:/home/git/android/GradleCommonTeacher.git</span><br><span class=\"line\"> * [new tag]         V2.3.3 -&gt; V2.3.3</span><br></pre></td></tr></table></figure></p>\n<p><strong>然后我们看一下提交工作流</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitk</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20160704145003965\" alt=\"这里写图片描述\"></p>\n<p>ok~可以看到tag已经提交上去了~</p>"
      },
      {
        "title": "AndroidStudio项目之CmakeLists解析",
        "date": "2018-02-09T07:23:23.000Z",
        "_content": "\n# 前言\n我们在使用AndroidStudio 3.0开发NDK项目的时候CmakeLists.txt将是我们必须要用到的文件,如果你不懂怎么用CmakeLists配置NDK请先看之前的一篇博客:[AndroidStudio 3.0 NDK环境搭建](http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/),如果已经了解CmakeLists配置NDK项目,ok,那我们接下来步入正题~\n<!--more-->\n\n# CmakeLists源码\n`CMakeLists.txt`\n```\n# For more information about using CMake with Android Studio, read the\n# documentation: https://d.android.com/studio/projects/add-native-code.html\n\n# Sets the minimum version of CMake required to build the native library.\n\ncmake_minimum_required(VERSION 3.4.1)\n\n# Creates and names a library, sets it as either STATIC\n# or SHARED, and provides the relative paths to its source code.\n# You can define multiple libraries, and CMake builds them for you.\n# Gradle automatically packages shared libraries with your APK.\n\nadd_library( # Sets the name of the library.\n             native-lib\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/cpp/native-lib.cpp )\n\n# Searches for a specified prebuilt library and stores the path as a\n# variable. Because CMake includes system libraries in the search path by\n# default, you only need to specify the name of the public NDK library\n# you want to add. CMake verifies that the library exists before\n# completing its build.\n\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log )\n\n# Specifies libraries CMake should link to your target library. You\n# can link multiple libraries, such as libraries you define in this\n# build script, prebuilt third-party libraries, or system libraries.\n\ntarget_link_libraries( # Specifies the target library.\n                       native-lib\n\n                       # Links the target library to the log library\n                       # included in the NDK.\n                       ${log-lib} )\n```\n\n源码很简单除了注释的代码外,核心的代码也就那么几句.\n\n- `cmake_minimum_required(VERSION 3.4.1)`\n>  Sets the minimum version of CMake required to build the native library.\n\n 用来设置编译本地native library的时候需要的Cmake最小版本.这个是创建AndroidStudio项目的时候自动生成,不需要太在意.\n\n-  `add_library()`\n\n```\nadd_library( # Sets the name of the library.\n             native-lib\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/cpp/native-lib.cpp )\n```\n\n**native-lib** : 设置本地lib的name\n**SHARED** : 表示编译生成的是动态链接库\n**src/main/cpp/native-lib.cpp** : 表示编译文件的相对路径,这里可以是一个文件的路径也可以是多个文件的路径\n\n- `find_library()`\n\n这个的作用是用来让我们加一些编译本地NDK库的时候所用的到一些依赖库.\n**log-lib** 是这个库的别名,方便我们以后引用\n**log** 是我们调试的时候打印log的一个库\n\n- `target_link_libraries()`\n这个的目的是用来关联我们本地的库跟第三方的库.这里就是把native-lib库和log库关联起来.\n\n# 自定义NDK的配置\n## 单个C/C++文件\n这个在之前的博客里有提到,可以翻看[AndroidStudio 3.0 NDK环境搭建](http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/)\n## 多个C/C++文件\n我们在实际项目中,C++文件可能不止一个,如果有多个C++文件,我们的CmakeLists应该怎么配置呢?其实前面说`add_library()` 的时候提到了,**路径可以是多个文件的路径**.\n所以我们可以这么配置:\n```\nadd_library( # Sets the name of the library.\n               hello\n\n               # Sets the library as a shared library.\n               SHARED\n\n               # Provides a relative path to your source file(s).\n               src/main/cpp/Hello.cpp\n               src/main/cpp/Hi.cpp\n               )\n```\n\n只需要在路径处增加一个路径,就配置好了.可能只说这个,大家会有点迷茫,可以放在项目中来看下,我们基于上一篇文章的项目,实现这个多个NDK文件的配置过程.\n先回忆一下创建NDK项目的步骤:\n\n  1. 创建一个Java文件\n  2. 在这个类里面写一个native方法\n  3. 生成头文件(*.h)\n  4. 创建c文件并实现头文件里面的方法\n  5. Java文件里面加入静态方法块\n  6. 配置grade\n  7. 在Activity里面调用Jni\n  8. 配置CmakeLists.txt文件\n\n我们先创建一个Hi.java文件,并在Hi.java文件中写一个native方法,如下:\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa151xv7vj30pa09ht9x.jpg)\n生成Hi的头文件\n```\n$ cd app/src/main/java\n\n```\n\n```\n$ javah -d ../cpp com.vv.ndk.Hi\n\n```\n\n创建一个Hi.cpp  c文件实现`com_vv_ndk_Hi.h` 头文件里面未实现的方法\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa1dpjsjij30rs04nwg5.jpg)\n\n``` c\n#include \"com_vv_ndk_Hi.h\"\nJNIEXPORT jstring JNICALL Java_com_vv_ndk_Hi_sayHi(JNIEnv *env, jclass jclass1){\n    return env->NewStringUTF(\"sat Hi\");\n}\n```\n\nHi.java文件中加入静态代码块\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa1gb32v3j30mo09habc.jpg)\n\n注意这个`System.loadLibrary` 加载的是你本地库的名字\n\n配置CmakeLists.txt文件\n```\n\ncmake_minimum_required(VERSION 3.4.1)\n\nadd_library(\n               hello\n               SHARED\n               src/main/cpp/Hello.cpp\n               src/main/cpp/Hi.cpp\n               )\n\nfind_library(\n              log-lib\n              log )\ntarget_link_libraries(\n                       hello\n                       ${log-lib} )\n\n```\n\nactivity里面调用\nxml文件\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.vv.ndk.MainActivity\">\n\n    <TextView\n        android:id=\"@+id/sample_text\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/textview\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n         />\n\n</android.support.constraint.ConstraintLayout>\n\n```\n\nactivity文件\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private TextView textView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextView tv = (TextView) findViewById(R.id.sample_text);\n        tv.setText(Hello.sayHello());\n\n        textView=findViewById(R.id.textview);\n        textView.setText(Hi.sayHi());\n    }\n}\n```\n运行效果\n![](https://ws1.sinaimg.cn/large/006tNc79ly1foa1p1d12yj308c0ett93.jpg)\n\n可以看到调用Hi文件的`sayHi()` 方法已经被调用了.\n\n## 编译多个SO库\n\n编译多个so库的cpp目录结构\n![](https://ws1.sinaimg.cn/large/006tNc79ly1foa6dkks6tj30jg0f9jvi.jpg)\n\n`one` 文件夹内的`CmakeLists.txt` 配置如下:\n\n```\nadd_library(one SHARED one.cpp)\n\ntarget_link_libraries(one ${log-lib} )\n```\n\n`two` 文件夹内`CmakeLists.txt` 配置如下:\n\n```\nadd_library(two SHARED two.cpp)\n\ntarget_link_libraries(two ${log-lib} )\n```\n\n`app` 项目的`CmakeLists.txt` 配置如下:\n\n```\n\ncmake_minimum_required(VERSION 3.4.1)\n\nadd_library(hello\n            SHARED\n            src/main/cpp/Hello.cpp\n            src/main/cpp/Hi.cpp)\n\nfind_library(log-lib log )\ntarget_link_libraries(hello ${log-lib} )\n\nADD_SUBDIRECTORY(src/main/cpp/one)\nADD_SUBDIRECTORY(src/main/cpp/two)\n```\nCmakeLists.txt文件支持继承,所以我们只需要在子配置文件中写不同的配置项就可以完成相应的配置.最后需要在项目的CmakeLists.txt文件中增加子配置文件的路径.\n\n然后我们用Make构建Module app生成字节码文件\n![](https://ws3.sinaimg.cn/large/006tNc79ly1foa6nrer8qj30o30cuwip.jpg)\n这样就可以在`/app/build/intermediates/cmake/debug/obj/arm64-v8a/` 路径下看到我们刚刚生成的so文件.\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa6r2xq61j30an0cmjs0.jpg)\n\n需要源码的同学可以直接从github上下载:[NDKLearnDemo](https://github.com/pvphero/NDKLearnDemo)\n\n\n\n\n\n\n\n\n",
        "source": "_posts/AS3NDKCMakeLists.md",
        "raw": "---\ntitle: AndroidStudio项目之CmakeLists解析\ndate: 2018-02-09 15:23:23\ntags:\n- Android\n- NDK\ncategories:\n- Android开发笔记\n---\n\n# 前言\n我们在使用AndroidStudio 3.0开发NDK项目的时候CmakeLists.txt将是我们必须要用到的文件,如果你不懂怎么用CmakeLists配置NDK请先看之前的一篇博客:[AndroidStudio 3.0 NDK环境搭建](http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/),如果已经了解CmakeLists配置NDK项目,ok,那我们接下来步入正题~\n<!--more-->\n\n# CmakeLists源码\n`CMakeLists.txt`\n```\n# For more information about using CMake with Android Studio, read the\n# documentation: https://d.android.com/studio/projects/add-native-code.html\n\n# Sets the minimum version of CMake required to build the native library.\n\ncmake_minimum_required(VERSION 3.4.1)\n\n# Creates and names a library, sets it as either STATIC\n# or SHARED, and provides the relative paths to its source code.\n# You can define multiple libraries, and CMake builds them for you.\n# Gradle automatically packages shared libraries with your APK.\n\nadd_library( # Sets the name of the library.\n             native-lib\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/cpp/native-lib.cpp )\n\n# Searches for a specified prebuilt library and stores the path as a\n# variable. Because CMake includes system libraries in the search path by\n# default, you only need to specify the name of the public NDK library\n# you want to add. CMake verifies that the library exists before\n# completing its build.\n\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log )\n\n# Specifies libraries CMake should link to your target library. You\n# can link multiple libraries, such as libraries you define in this\n# build script, prebuilt third-party libraries, or system libraries.\n\ntarget_link_libraries( # Specifies the target library.\n                       native-lib\n\n                       # Links the target library to the log library\n                       # included in the NDK.\n                       ${log-lib} )\n```\n\n源码很简单除了注释的代码外,核心的代码也就那么几句.\n\n- `cmake_minimum_required(VERSION 3.4.1)`\n>  Sets the minimum version of CMake required to build the native library.\n\n 用来设置编译本地native library的时候需要的Cmake最小版本.这个是创建AndroidStudio项目的时候自动生成,不需要太在意.\n\n-  `add_library()`\n\n```\nadd_library( # Sets the name of the library.\n             native-lib\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/cpp/native-lib.cpp )\n```\n\n**native-lib** : 设置本地lib的name\n**SHARED** : 表示编译生成的是动态链接库\n**src/main/cpp/native-lib.cpp** : 表示编译文件的相对路径,这里可以是一个文件的路径也可以是多个文件的路径\n\n- `find_library()`\n\n这个的作用是用来让我们加一些编译本地NDK库的时候所用的到一些依赖库.\n**log-lib** 是这个库的别名,方便我们以后引用\n**log** 是我们调试的时候打印log的一个库\n\n- `target_link_libraries()`\n这个的目的是用来关联我们本地的库跟第三方的库.这里就是把native-lib库和log库关联起来.\n\n# 自定义NDK的配置\n## 单个C/C++文件\n这个在之前的博客里有提到,可以翻看[AndroidStudio 3.0 NDK环境搭建](http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/)\n## 多个C/C++文件\n我们在实际项目中,C++文件可能不止一个,如果有多个C++文件,我们的CmakeLists应该怎么配置呢?其实前面说`add_library()` 的时候提到了,**路径可以是多个文件的路径**.\n所以我们可以这么配置:\n```\nadd_library( # Sets the name of the library.\n               hello\n\n               # Sets the library as a shared library.\n               SHARED\n\n               # Provides a relative path to your source file(s).\n               src/main/cpp/Hello.cpp\n               src/main/cpp/Hi.cpp\n               )\n```\n\n只需要在路径处增加一个路径,就配置好了.可能只说这个,大家会有点迷茫,可以放在项目中来看下,我们基于上一篇文章的项目,实现这个多个NDK文件的配置过程.\n先回忆一下创建NDK项目的步骤:\n\n  1. 创建一个Java文件\n  2. 在这个类里面写一个native方法\n  3. 生成头文件(*.h)\n  4. 创建c文件并实现头文件里面的方法\n  5. Java文件里面加入静态方法块\n  6. 配置grade\n  7. 在Activity里面调用Jni\n  8. 配置CmakeLists.txt文件\n\n我们先创建一个Hi.java文件,并在Hi.java文件中写一个native方法,如下:\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa151xv7vj30pa09ht9x.jpg)\n生成Hi的头文件\n```\n$ cd app/src/main/java\n\n```\n\n```\n$ javah -d ../cpp com.vv.ndk.Hi\n\n```\n\n创建一个Hi.cpp  c文件实现`com_vv_ndk_Hi.h` 头文件里面未实现的方法\n\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa1dpjsjij30rs04nwg5.jpg)\n\n``` c\n#include \"com_vv_ndk_Hi.h\"\nJNIEXPORT jstring JNICALL Java_com_vv_ndk_Hi_sayHi(JNIEnv *env, jclass jclass1){\n    return env->NewStringUTF(\"sat Hi\");\n}\n```\n\nHi.java文件中加入静态代码块\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa1gb32v3j30mo09habc.jpg)\n\n注意这个`System.loadLibrary` 加载的是你本地库的名字\n\n配置CmakeLists.txt文件\n```\n\ncmake_minimum_required(VERSION 3.4.1)\n\nadd_library(\n               hello\n               SHARED\n               src/main/cpp/Hello.cpp\n               src/main/cpp/Hi.cpp\n               )\n\nfind_library(\n              log-lib\n              log )\ntarget_link_libraries(\n                       hello\n                       ${log-lib} )\n\n```\n\nactivity里面调用\nxml文件\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.vv.ndk.MainActivity\">\n\n    <TextView\n        android:id=\"@+id/sample_text\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/textview\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n         />\n\n</android.support.constraint.ConstraintLayout>\n\n```\n\nactivity文件\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private TextView textView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextView tv = (TextView) findViewById(R.id.sample_text);\n        tv.setText(Hello.sayHello());\n\n        textView=findViewById(R.id.textview);\n        textView.setText(Hi.sayHi());\n    }\n}\n```\n运行效果\n![](https://ws1.sinaimg.cn/large/006tNc79ly1foa1p1d12yj308c0ett93.jpg)\n\n可以看到调用Hi文件的`sayHi()` 方法已经被调用了.\n\n## 编译多个SO库\n\n编译多个so库的cpp目录结构\n![](https://ws1.sinaimg.cn/large/006tNc79ly1foa6dkks6tj30jg0f9jvi.jpg)\n\n`one` 文件夹内的`CmakeLists.txt` 配置如下:\n\n```\nadd_library(one SHARED one.cpp)\n\ntarget_link_libraries(one ${log-lib} )\n```\n\n`two` 文件夹内`CmakeLists.txt` 配置如下:\n\n```\nadd_library(two SHARED two.cpp)\n\ntarget_link_libraries(two ${log-lib} )\n```\n\n`app` 项目的`CmakeLists.txt` 配置如下:\n\n```\n\ncmake_minimum_required(VERSION 3.4.1)\n\nadd_library(hello\n            SHARED\n            src/main/cpp/Hello.cpp\n            src/main/cpp/Hi.cpp)\n\nfind_library(log-lib log )\ntarget_link_libraries(hello ${log-lib} )\n\nADD_SUBDIRECTORY(src/main/cpp/one)\nADD_SUBDIRECTORY(src/main/cpp/two)\n```\nCmakeLists.txt文件支持继承,所以我们只需要在子配置文件中写不同的配置项就可以完成相应的配置.最后需要在项目的CmakeLists.txt文件中增加子配置文件的路径.\n\n然后我们用Make构建Module app生成字节码文件\n![](https://ws3.sinaimg.cn/large/006tNc79ly1foa6nrer8qj30o30cuwip.jpg)\n这样就可以在`/app/build/intermediates/cmake/debug/obj/arm64-v8a/` 路径下看到我们刚刚生成的so文件.\n![](https://ws2.sinaimg.cn/large/006tNc79ly1foa6r2xq61j30an0cmjs0.jpg)\n\n需要源码的同学可以直接从github上下载:[NDKLearnDemo](https://github.com/pvphero/NDKLearnDemo)\n\n\n\n\n\n\n\n\n",
        "slug": "AS3NDKCMakeLists",
        "published": 1,
        "updated": "2020-05-19T02:32:04.677Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1g000b52j9y4wvb0wv",
        "content": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我们在使用AndroidStudio 3.0开发NDK项目的时候CmakeLists.txt将是我们必须要用到的文件,如果你不懂怎么用CmakeLists配置NDK请先看之前的一篇博客:<a href=\"http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/\">AndroidStudio 3.0 NDK环境搭建</a>,如果已经了解CmakeLists配置NDK项目,ok,那我们接下来步入正题~<br><a id=\"more\"></a></p>\n<h1 id=\"CmakeLists源码\"><a href=\"#CmakeLists源码\" class=\"headerlink\" title=\"CmakeLists源码\"></a>CmakeLists源码</h1><p><code>CMakeLists.txt</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For more information about using CMake with Android Studio, read the</span><br><span class=\"line\"># documentation: https://d.android.com/studio/projects/add-native-code.html</span><br><span class=\"line\"></span><br><span class=\"line\"># Sets the minimum version of CMake required to build the native library.</span><br><span class=\"line\"></span><br><span class=\"line\">cmake_minimum_required(VERSION 3.4.1)</span><br><span class=\"line\"></span><br><span class=\"line\"># Creates and names a library, sets it as either STATIC</span><br><span class=\"line\"># or SHARED, and provides the relative paths to its source code.</span><br><span class=\"line\"># You can define multiple libraries, and CMake builds them for you.</span><br><span class=\"line\"># Gradle automatically packages shared libraries with your APK.</span><br><span class=\"line\"></span><br><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">             native-lib</span><br><span class=\"line\"></span><br><span class=\"line\">             # Sets the library as a shared library.</span><br><span class=\"line\">             SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">             # Provides a relative path to your source file(s).</span><br><span class=\"line\">             src/main/cpp/native-lib.cpp )</span><br><span class=\"line\"></span><br><span class=\"line\"># Searches for a specified prebuilt library and stores the path as a</span><br><span class=\"line\"># variable. Because CMake includes system libraries in the search path by</span><br><span class=\"line\"># default, you only need to specify the name of the public NDK library</span><br><span class=\"line\"># you want to add. CMake verifies that the library exists before</span><br><span class=\"line\"># completing its build.</span><br><span class=\"line\"></span><br><span class=\"line\">find_library( # Sets the name of the path variable.</span><br><span class=\"line\">              log-lib</span><br><span class=\"line\"></span><br><span class=\"line\">              # Specifies the name of the NDK library that</span><br><span class=\"line\">              # you want CMake to locate.</span><br><span class=\"line\">              log )</span><br><span class=\"line\"></span><br><span class=\"line\"># Specifies libraries CMake should link to your target library. You</span><br><span class=\"line\"># can link multiple libraries, such as libraries you define in this</span><br><span class=\"line\"># build script, prebuilt third-party libraries, or system libraries.</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries( # Specifies the target library.</span><br><span class=\"line\">                       native-lib</span><br><span class=\"line\"></span><br><span class=\"line\">                       # Links the target library to the log library</span><br><span class=\"line\">                       # included in the NDK.</span><br><span class=\"line\">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>源码很简单除了注释的代码外,核心的代码也就那么几句.</p>\n<ul>\n<li><p><code>cmake_minimum_required(VERSION 3.4.1)</code></p>\n<blockquote>\n<p> Sets the minimum version of CMake required to build the native library.</p>\n</blockquote>\n<p>用来设置编译本地native library的时候需要的Cmake最小版本.这个是创建AndroidStudio项目的时候自动生成,不需要太在意.</p>\n</li>\n<li><p><code>add_library()</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">             native-lib</span><br><span class=\"line\"></span><br><span class=\"line\">             # Sets the library as a shared library.</span><br><span class=\"line\">             SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">             # Provides a relative path to your source file(s).</span><br><span class=\"line\">             src/main/cpp/native-lib.cpp )</span><br></pre></td></tr></table></figure>\n<p><strong>native-lib</strong> : 设置本地lib的name<br><strong>SHARED</strong> : 表示编译生成的是动态链接库<br><strong>src/main/cpp/native-lib.cpp</strong> : 表示编译文件的相对路径,这里可以是一个文件的路径也可以是多个文件的路径</p>\n<ul>\n<li><code>find_library()</code></li>\n</ul>\n<p>这个的作用是用来让我们加一些编译本地NDK库的时候所用的到一些依赖库.<br><strong>log-lib</strong> 是这个库的别名,方便我们以后引用<br><strong>log</strong> 是我们调试的时候打印log的一个库</p>\n<ul>\n<li><code>target_link_libraries()</code><br>这个的目的是用来关联我们本地的库跟第三方的库.这里就是把native-lib库和log库关联起来.</li>\n</ul>\n<h1 id=\"自定义NDK的配置\"><a href=\"#自定义NDK的配置\" class=\"headerlink\" title=\"自定义NDK的配置\"></a>自定义NDK的配置</h1><h2 id=\"单个C-C-文件\"><a href=\"#单个C-C-文件\" class=\"headerlink\" title=\"单个C/C++文件\"></a>单个C/C++文件</h2><p>这个在之前的博客里有提到,可以翻看<a href=\"http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/\">AndroidStudio 3.0 NDK环境搭建</a></p>\n<h2 id=\"多个C-C-文件\"><a href=\"#多个C-C-文件\" class=\"headerlink\" title=\"多个C/C++文件\"></a>多个C/C++文件</h2><p>我们在实际项目中,C++文件可能不止一个,如果有多个C++文件,我们的CmakeLists应该怎么配置呢?其实前面说<code>add_library()</code> 的时候提到了,<strong>路径可以是多个文件的路径</strong>.<br>所以我们可以这么配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">               hello</span><br><span class=\"line\"></span><br><span class=\"line\">               # Sets the library as a shared library.</span><br><span class=\"line\">               SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">               # Provides a relative path to your source file(s).</span><br><span class=\"line\">               src/main/cpp/Hello.cpp</span><br><span class=\"line\">               src/main/cpp/Hi.cpp</span><br><span class=\"line\">               )</span><br></pre></td></tr></table></figure></p>\n<p>只需要在路径处增加一个路径,就配置好了.可能只说这个,大家会有点迷茫,可以放在项目中来看下,我们基于上一篇文章的项目,实现这个多个NDK文件的配置过程.<br>先回忆一下创建NDK项目的步骤:</p>\n<ol>\n<li>创建一个Java文件</li>\n<li>在这个类里面写一个native方法</li>\n<li>生成头文件(*.h)</li>\n<li>创建c文件并实现头文件里面的方法</li>\n<li>Java文件里面加入静态方法块</li>\n<li>配置grade</li>\n<li>在Activity里面调用Jni</li>\n<li>配置CmakeLists.txt文件</li>\n</ol>\n<p>我们先创建一个Hi.java文件,并在Hi.java文件中写一个native方法,如下:<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa151xv7vj30pa09ht9x.jpg\" alt><br>生成Hi的头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd app/src/main/java</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javah -d ../cpp com.vv.ndk.Hi</span><br></pre></td></tr></table></figure>\n<p>创建一个Hi.cpp  c文件实现<code>com_vv_ndk_Hi.h</code> 头文件里面未实现的方法</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa1dpjsjij30rs04nwg5.jpg\" alt></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"com_vv_ndk_Hi.h\"</span></span></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_vv_ndk_Hi_sayHi</span><span class=\"params\">(JNIEnv *env, jclass jclass1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"sat Hi\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Hi.java文件中加入静态代码块<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa1gb32v3j30mo09habc.jpg\" alt></p>\n<p>注意这个<code>System.loadLibrary</code> 加载的是你本地库的名字</p>\n<p>配置CmakeLists.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cmake_minimum_required(VERSION 3.4.1)</span><br><span class=\"line\"></span><br><span class=\"line\">add_library(</span><br><span class=\"line\">               hello</span><br><span class=\"line\">               SHARED</span><br><span class=\"line\">               src/main/cpp/Hello.cpp</span><br><span class=\"line\">               src/main/cpp/Hi.cpp</span><br><span class=\"line\">               )</span><br><span class=\"line\"></span><br><span class=\"line\">find_library(</span><br><span class=\"line\">              log-lib</span><br><span class=\"line\">              log )</span><br><span class=\"line\">target_link_libraries(</span><br><span class=\"line\">                       hello</span><br><span class=\"line\">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>activity里面调用<br>xml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context=&quot;com.vv.ndk.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/sample_text&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/textview&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Hello World!&quot;</span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>activity文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class=\"line\">        tv.setText(Hello.sayHello());</span><br><span class=\"line\"></span><br><span class=\"line\">        textView=findViewById(R.id.textview);</span><br><span class=\"line\">        textView.setText(Hi.sayHi());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行效果<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1foa1p1d12yj308c0ett93.jpg\" alt></p>\n<p>可以看到调用Hi文件的<code>sayHi()</code> 方法已经被调用了.</p>\n<h2 id=\"编译多个SO库\"><a href=\"#编译多个SO库\" class=\"headerlink\" title=\"编译多个SO库\"></a>编译多个SO库</h2><p>编译多个so库的cpp目录结构<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1foa6dkks6tj30jg0f9jvi.jpg\" alt></p>\n<p><code>one</code> 文件夹内的<code>CmakeLists.txt</code> 配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library(one SHARED one.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(one $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>\n<p><code>two</code> 文件夹内<code>CmakeLists.txt</code> 配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library(two SHARED two.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(two $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>\n<p><code>app</code> 项目的<code>CmakeLists.txt</code> 配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cmake_minimum_required(VERSION 3.4.1)</span><br><span class=\"line\"></span><br><span class=\"line\">add_library(hello</span><br><span class=\"line\">            SHARED</span><br><span class=\"line\">            src/main/cpp/Hello.cpp</span><br><span class=\"line\">            src/main/cpp/Hi.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">find_library(log-lib log )</span><br><span class=\"line\">target_link_libraries(hello $&#123;log-lib&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">ADD_SUBDIRECTORY(src/main/cpp/one)</span><br><span class=\"line\">ADD_SUBDIRECTORY(src/main/cpp/two)</span><br></pre></td></tr></table></figure>\n<p>CmakeLists.txt文件支持继承,所以我们只需要在子配置文件中写不同的配置项就可以完成相应的配置.最后需要在项目的CmakeLists.txt文件中增加子配置文件的路径.</p>\n<p>然后我们用Make构建Module app生成字节码文件<br><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1foa6nrer8qj30o30cuwip.jpg\" alt><br>这样就可以在<code>/app/build/intermediates/cmake/debug/obj/arm64-v8a/</code> 路径下看到我们刚刚生成的so文件.<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa6r2xq61j30an0cmjs0.jpg\" alt></p>\n<p>需要源码的同学可以直接从github上下载:<a href=\"https://github.com/pvphero/NDKLearnDemo\" target=\"_blank\" rel=\"noopener\">NDKLearnDemo</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我们在使用AndroidStudio 3.0开发NDK项目的时候CmakeLists.txt将是我们必须要用到的文件,如果你不懂怎么用CmakeLists配置NDK请先看之前的一篇博客:<a href=\"http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/\">AndroidStudio 3.0 NDK环境搭建</a>,如果已经了解CmakeLists配置NDK项目,ok,那我们接下来步入正题~<br>",
        "more": "</p>\n<h1 id=\"CmakeLists源码\"><a href=\"#CmakeLists源码\" class=\"headerlink\" title=\"CmakeLists源码\"></a>CmakeLists源码</h1><p><code>CMakeLists.txt</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For more information about using CMake with Android Studio, read the</span><br><span class=\"line\"># documentation: https://d.android.com/studio/projects/add-native-code.html</span><br><span class=\"line\"></span><br><span class=\"line\"># Sets the minimum version of CMake required to build the native library.</span><br><span class=\"line\"></span><br><span class=\"line\">cmake_minimum_required(VERSION 3.4.1)</span><br><span class=\"line\"></span><br><span class=\"line\"># Creates and names a library, sets it as either STATIC</span><br><span class=\"line\"># or SHARED, and provides the relative paths to its source code.</span><br><span class=\"line\"># You can define multiple libraries, and CMake builds them for you.</span><br><span class=\"line\"># Gradle automatically packages shared libraries with your APK.</span><br><span class=\"line\"></span><br><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">             native-lib</span><br><span class=\"line\"></span><br><span class=\"line\">             # Sets the library as a shared library.</span><br><span class=\"line\">             SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">             # Provides a relative path to your source file(s).</span><br><span class=\"line\">             src/main/cpp/native-lib.cpp )</span><br><span class=\"line\"></span><br><span class=\"line\"># Searches for a specified prebuilt library and stores the path as a</span><br><span class=\"line\"># variable. Because CMake includes system libraries in the search path by</span><br><span class=\"line\"># default, you only need to specify the name of the public NDK library</span><br><span class=\"line\"># you want to add. CMake verifies that the library exists before</span><br><span class=\"line\"># completing its build.</span><br><span class=\"line\"></span><br><span class=\"line\">find_library( # Sets the name of the path variable.</span><br><span class=\"line\">              log-lib</span><br><span class=\"line\"></span><br><span class=\"line\">              # Specifies the name of the NDK library that</span><br><span class=\"line\">              # you want CMake to locate.</span><br><span class=\"line\">              log )</span><br><span class=\"line\"></span><br><span class=\"line\"># Specifies libraries CMake should link to your target library. You</span><br><span class=\"line\"># can link multiple libraries, such as libraries you define in this</span><br><span class=\"line\"># build script, prebuilt third-party libraries, or system libraries.</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries( # Specifies the target library.</span><br><span class=\"line\">                       native-lib</span><br><span class=\"line\"></span><br><span class=\"line\">                       # Links the target library to the log library</span><br><span class=\"line\">                       # included in the NDK.</span><br><span class=\"line\">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>源码很简单除了注释的代码外,核心的代码也就那么几句.</p>\n<ul>\n<li><p><code>cmake_minimum_required(VERSION 3.4.1)</code></p>\n<blockquote>\n<p> Sets the minimum version of CMake required to build the native library.</p>\n</blockquote>\n<p>用来设置编译本地native library的时候需要的Cmake最小版本.这个是创建AndroidStudio项目的时候自动生成,不需要太在意.</p>\n</li>\n<li><p><code>add_library()</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">             native-lib</span><br><span class=\"line\"></span><br><span class=\"line\">             # Sets the library as a shared library.</span><br><span class=\"line\">             SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">             # Provides a relative path to your source file(s).</span><br><span class=\"line\">             src/main/cpp/native-lib.cpp )</span><br></pre></td></tr></table></figure>\n<p><strong>native-lib</strong> : 设置本地lib的name<br><strong>SHARED</strong> : 表示编译生成的是动态链接库<br><strong>src/main/cpp/native-lib.cpp</strong> : 表示编译文件的相对路径,这里可以是一个文件的路径也可以是多个文件的路径</p>\n<ul>\n<li><code>find_library()</code></li>\n</ul>\n<p>这个的作用是用来让我们加一些编译本地NDK库的时候所用的到一些依赖库.<br><strong>log-lib</strong> 是这个库的别名,方便我们以后引用<br><strong>log</strong> 是我们调试的时候打印log的一个库</p>\n<ul>\n<li><code>target_link_libraries()</code><br>这个的目的是用来关联我们本地的库跟第三方的库.这里就是把native-lib库和log库关联起来.</li>\n</ul>\n<h1 id=\"自定义NDK的配置\"><a href=\"#自定义NDK的配置\" class=\"headerlink\" title=\"自定义NDK的配置\"></a>自定义NDK的配置</h1><h2 id=\"单个C-C-文件\"><a href=\"#单个C-C-文件\" class=\"headerlink\" title=\"单个C/C++文件\"></a>单个C/C++文件</h2><p>这个在之前的博客里有提到,可以翻看<a href=\"http://pvphero.github.io/2018/02/08/AS3NDKEnvironment/\">AndroidStudio 3.0 NDK环境搭建</a></p>\n<h2 id=\"多个C-C-文件\"><a href=\"#多个C-C-文件\" class=\"headerlink\" title=\"多个C/C++文件\"></a>多个C/C++文件</h2><p>我们在实际项目中,C++文件可能不止一个,如果有多个C++文件,我们的CmakeLists应该怎么配置呢?其实前面说<code>add_library()</code> 的时候提到了,<strong>路径可以是多个文件的路径</strong>.<br>所以我们可以这么配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library( # Sets the name of the library.</span><br><span class=\"line\">               hello</span><br><span class=\"line\"></span><br><span class=\"line\">               # Sets the library as a shared library.</span><br><span class=\"line\">               SHARED</span><br><span class=\"line\"></span><br><span class=\"line\">               # Provides a relative path to your source file(s).</span><br><span class=\"line\">               src/main/cpp/Hello.cpp</span><br><span class=\"line\">               src/main/cpp/Hi.cpp</span><br><span class=\"line\">               )</span><br></pre></td></tr></table></figure></p>\n<p>只需要在路径处增加一个路径,就配置好了.可能只说这个,大家会有点迷茫,可以放在项目中来看下,我们基于上一篇文章的项目,实现这个多个NDK文件的配置过程.<br>先回忆一下创建NDK项目的步骤:</p>\n<ol>\n<li>创建一个Java文件</li>\n<li>在这个类里面写一个native方法</li>\n<li>生成头文件(*.h)</li>\n<li>创建c文件并实现头文件里面的方法</li>\n<li>Java文件里面加入静态方法块</li>\n<li>配置grade</li>\n<li>在Activity里面调用Jni</li>\n<li>配置CmakeLists.txt文件</li>\n</ol>\n<p>我们先创建一个Hi.java文件,并在Hi.java文件中写一个native方法,如下:<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa151xv7vj30pa09ht9x.jpg\" alt><br>生成Hi的头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd app/src/main/java</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javah -d ../cpp com.vv.ndk.Hi</span><br></pre></td></tr></table></figure>\n<p>创建一个Hi.cpp  c文件实现<code>com_vv_ndk_Hi.h</code> 头文件里面未实现的方法</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa1dpjsjij30rs04nwg5.jpg\" alt></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"com_vv_ndk_Hi.h\"</span></span></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_vv_ndk_Hi_sayHi</span><span class=\"params\">(JNIEnv *env, jclass jclass1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"sat Hi\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Hi.java文件中加入静态代码块<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa1gb32v3j30mo09habc.jpg\" alt></p>\n<p>注意这个<code>System.loadLibrary</code> 加载的是你本地库的名字</p>\n<p>配置CmakeLists.txt文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cmake_minimum_required(VERSION 3.4.1)</span><br><span class=\"line\"></span><br><span class=\"line\">add_library(</span><br><span class=\"line\">               hello</span><br><span class=\"line\">               SHARED</span><br><span class=\"line\">               src/main/cpp/Hello.cpp</span><br><span class=\"line\">               src/main/cpp/Hi.cpp</span><br><span class=\"line\">               )</span><br><span class=\"line\"></span><br><span class=\"line\">find_library(</span><br><span class=\"line\">              log-lib</span><br><span class=\"line\">              log )</span><br><span class=\"line\">target_link_libraries(</span><br><span class=\"line\">                       hello</span><br><span class=\"line\">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>activity里面调用<br>xml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context=&quot;com.vv.ndk.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/sample_text&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf=&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/textview&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Hello World!&quot;</span><br><span class=\"line\">         /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>activity文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class=\"line\">        tv.setText(Hello.sayHello());</span><br><span class=\"line\"></span><br><span class=\"line\">        textView=findViewById(R.id.textview);</span><br><span class=\"line\">        textView.setText(Hi.sayHi());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行效果<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1foa1p1d12yj308c0ett93.jpg\" alt></p>\n<p>可以看到调用Hi文件的<code>sayHi()</code> 方法已经被调用了.</p>\n<h2 id=\"编译多个SO库\"><a href=\"#编译多个SO库\" class=\"headerlink\" title=\"编译多个SO库\"></a>编译多个SO库</h2><p>编译多个so库的cpp目录结构<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1foa6dkks6tj30jg0f9jvi.jpg\" alt></p>\n<p><code>one</code> 文件夹内的<code>CmakeLists.txt</code> 配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library(one SHARED one.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(one $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>\n<p><code>two</code> 文件夹内<code>CmakeLists.txt</code> 配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_library(two SHARED two.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(two $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>\n<p><code>app</code> 项目的<code>CmakeLists.txt</code> 配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cmake_minimum_required(VERSION 3.4.1)</span><br><span class=\"line\"></span><br><span class=\"line\">add_library(hello</span><br><span class=\"line\">            SHARED</span><br><span class=\"line\">            src/main/cpp/Hello.cpp</span><br><span class=\"line\">            src/main/cpp/Hi.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\">find_library(log-lib log )</span><br><span class=\"line\">target_link_libraries(hello $&#123;log-lib&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">ADD_SUBDIRECTORY(src/main/cpp/one)</span><br><span class=\"line\">ADD_SUBDIRECTORY(src/main/cpp/two)</span><br></pre></td></tr></table></figure>\n<p>CmakeLists.txt文件支持继承,所以我们只需要在子配置文件中写不同的配置项就可以完成相应的配置.最后需要在项目的CmakeLists.txt文件中增加子配置文件的路径.</p>\n<p>然后我们用Make构建Module app生成字节码文件<br><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1foa6nrer8qj30o30cuwip.jpg\" alt><br>这样就可以在<code>/app/build/intermediates/cmake/debug/obj/arm64-v8a/</code> 路径下看到我们刚刚生成的so文件.<br><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1foa6r2xq61j30an0cmjs0.jpg\" alt></p>\n<p>需要源码的同学可以直接从github上下载:<a href=\"https://github.com/pvphero/NDKLearnDemo\" target=\"_blank\" rel=\"noopener\">NDKLearnDemo</a></p>"
      },
      {
        "title": "重学Java--Java泛型",
        "date": "2020-05-18T09:08:54.000Z",
        "_content": "\n# 1.为什么我们需要泛型？\n\n\n通过两端代码我们就可以知道为什么需要泛型\n\n\n```java\n public int addInt(int x,int y){\n        return x+y;\n    }\n\n    public float addFloat(float x,float y){\n        return x+y;\n    }\n```\n\n<!--more-->\n\n以上例子，求两个数的和。现在已经有int类型的求和跟float类型的求和，但是如果要实现一个double类型的和，就需要重新写一个**double**的**add**方法。如下：\n\n\n```java\n    //double\n    public double addDouble(double x,double y){\n        return x+y;\n    }\n```\n\n\n其实对于开发者来说，逻辑是一样的，只是参数不同，如果没有泛型，就需要重写类似的方法。\n\n\n\n\n所以泛型的好处：\n**适用于多种数据类型执行相同的代码。可以简化代码。**\n\n\n# 2.泛型类，泛型接口，泛型方法\n\n\n定义一个自己的泛型:\n\n\n## 1.泛型类\n\n\n```java\npublic class NormalGeneric<K> {\n    private K data;\n\n    public NormalGeneric() {\n    }\n\n    public NormalGeneric(K data) {\n        this.data = data;\n    }\n\n    public K getData() {\n        return data;\n    }\n\n    public void setData(K data) {\n        this.data = data;\n    }\n\n    public static void main(String[] args) {\n        NormalGeneric<String> normalGeneric = new NormalGeneric<>();\n        normalGeneric.setData(\"OK\");\n        //normalGeneric.setData(1);\n        System.out.println(normalGeneric.getData());\n        NormalGeneric normalGeneric1 = new NormalGeneric();\n        normalGeneric1.setData(1);\n        normalGeneric1.setData(\"dsf\");\n    }\n}\n```\n\n\n## 2.泛型接口\n\n\n```java\npublic interface Genertor<T> {\n    public T next();\n}\n```\n\n\n实现泛型接口的实现类。\n\n\n- 实现方式一：\n\n    ```java\n    public class ImplGenertor<T> implements Genertor<T> {\n        @Override\n        public T next() {\n            return null;\n        }\n    }\n    ```\n\n- 实现方式二：\n\n    ```java\n     public class ImplGenertor2 implements Genertor<String> {\n            @Override\n            public String next() {\n                return null;\n            }\n        }\n    ```\n\n\n可见，如果是泛型类实现泛型接口的话，那么返回值也是泛型。\n\n\n## 3.泛型方法\n\n\n泛型方法是完全独立的\n\n\n### 3.1 在普通类中的泛型方法代码如下：\n\n\n```java\npublic class GenericMethod {\n\n    public <T> T genericMethod(T...a){\n        return a[a.length/2];\n    }\n\n    public void test(int x,int y){\n        System.out.println(x+y);\n    }\n\n    public static void main(String[] args) {\n        GenericMethod genericMethod = new GenericMethod();\n        genericMethod.test(23,343);\n        System.out.println(genericMethod.<String>genericMethod(\"apple\",\"banana\"));\n        System.out.println(genericMethod.genericMethod(12,34));\n    }\n}\n```\n\n\n### 3.2 在泛型类里面使用泛型方法：\n\n\n```java\npublic class GenericMethod2 {\n    //这个类是个泛型类，在上面已经介绍过\n    public class Generic<T>{\n        private T key;\n        public Generic(T key) {\n            this.key = key;\n        }\n        public T getKey(){\n            return key;\n        }\n    }\n    \n    public <T,K> K showKeyName(Generic<T> container){\n     ...\n    }\n    \n    public static void main(String[] args) {\n\n\n    }\n}\n```\n\n\n上述代码中,\n\n\n```java\npublic T getKey(){\n\treturn key;\n}\n```\n\n\n虽然在方法中使用了泛型，但是这并不是一个泛型方法。\n这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。\n所以在这个方法中才可以继续使用 T 这个泛型。\n\n\n```java\n public <T,K> K showKeyName(Generic<T> container){\n     ...\n }\n```\n\n\n这才是一个真正的泛型方法。\n\n\n### 小结1：\n\n\n- 首先在public与返回值之间的必不可少，这表明这是一个泛型方法，\n- 并且声明了一个泛型T_ 这个T可以出现在这个泛型方法的任意位置._\n- 泛型的数量也可以为任意多个\n\n\n\n再看个代码示例：\n\n\n```java\npublic class GenericMethod3 {\n    static class Fruit{\n        @Override\n        public String toString() {\n            return \"fruit\";\n        }\n    }\n\n    static class Apple extends Fruit{\n        @Override\n        public String toString() {\n            return \"apple\";\n        }\n    }\n\n    static class Person{\n        @Override\n        public String toString() {\n            return \"Person\";\n        }\n    }\n\n    static class GenerateTest<T>{\n        //普通方法\n        public void show_1(T t){\n            System.out.println(t.toString());\n        }\n\n        //在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。\n        // 可以类型与T相同，也可以不同。\n        //由于泛型方法在声明的时候会声明泛型<E>，因此即使在泛型类中并未声明泛型，\n        // 编译器也能够正确识别泛型方法中识别的泛型。\n        public <E> void show_3(E t){\n            System.out.println(t.toString());\n        }\n\n        //在泛型类中声明了一个泛型方法，使用泛型T，\n        // 注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。\n        public <T> void show_2(T t){\n            System.out.println(t.toString());\n        }\n    }\n\n    public static void main(String[] args) {\n        Apple apple = new Apple();\n        Person person = new Person();\n\n        GenerateTest<Fruit> generateTest = new GenerateTest<>();\n        generateTest.show_1(apple);\n        //generateTest.show_1(person);\n\n        generateTest.show_2(apple);\n        generateTest.show_2(person);\n\n        generateTest.show_3(apple);\n        generateTest.show_3(person);\n    }\n}\n```\n\n\n![Xnip2020-04-24_13-23-18.jpg](https://cdn.nlark.com/yuque/0/2020/jpeg/1261993/1587706787742-1eb20c62-3cf1-452f-9092-2f97107f9062.jpeg#align=left&display=inline&height=353&margin=%5Bobject%20Object%5D&name=Xnip2020-04-24_13-23-18.jpg&originHeight=646&originWidth=1364&size=206580&status=done&style=none&width=746#align=left&display=inline&height=646&margin=%5Bobject%20Object%5D&originHeight=646&originWidth=1364&status=done&style=none&width=1364)\n\n\n### 小结2：\n\n\n泛型类里面定义泛型方法，参数可以完全不一样。\n上面的T影响泛型类的普通方法。\n但是对泛型方法没有影响。\n\n\n# 3.如何限定类型变量\n\n\n比如计算两个变量的最小值，最大值。\n\n\n![屏幕快照 2020-04-24 下午1.55.12.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1587707736212-76da455f-c265-4eb0-b1dc-c547d3878607.png#align=left&display=inline&height=283&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-24%20%E4%B8%8B%E5%8D%881.55.12.png&originHeight=328&originWidth=864&size=37264&status=done&style=none&width=746#align=left&display=inline&height=328&margin=%5Bobject%20Object%5D&originHeight=328&originWidth=864&status=done&style=none&width=864)\n但是怎么才能保证传入的变量一定有compareTo方法？\n为了解决这个问题，就引入了限定类型变量的泛型。\n代码如下：\n\n\n```java\n public static <T extends Comparable> T min(T a, T b){\n        if(a.compareTo(b)>0) {\n            return a;\n        } else {\n            return b;\n        }\n}\n```\n\n\n**T extends Comparable中**\nT表示应该绑定类型的子类型，后面的**Comparable**表示绑定类型，\n**子类型和绑定类型可以是类也可以是接口**。\n\n\n**但是如果类跟接口混用的话，规则如下：**\n\n\n- 类只能有一个\n- 并且类需要写到接口的前面\n- 限定类型的泛型，对泛型类，泛型方法同样适用\n\n\n\n代码如下：\n\n\n```java\n public static <T extends ArrayList & Comparable> T min(T a, T b) {\n        if (a.compareTo(b) > 0) return a;\n        else return b;\n }\n```\n\n\n# 4.泛型使用中的约束和局限性\n\n\n假设我们有以下泛型类：\n\n\n```java\npublic class Restrict<T> {\n    ...\n}\n```\n\n\n- 不能用基本类型实例化类型参数\n\n```java\n//错误代码示例\n//不能实例化类型变量 \npublic Restrict() {\n    this.data = new T();\n}\n```\n\n- 在静态域或者方法里面不能引用类型变量\n\n```java\n//错误代码示例\n//静态域或者方法里不能引用类型变量\nprivate static T instance;\n```\n\n  - 先执行static方法\n  - 再执行构造方法\n  - 所以先执行static T，根本不知道T的类型，所以行不通\n  - 但是如果是静态方法本身是泛型方法是可以的\n  \n```java\n//正确代码示例\nprivate static <T> T getInstance(){}\n```\n\n- 基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double\n\n错误的写法：\n\n```java\n     //错误代码示例\n    Restrict<double>\n```\n\n- 正确的写法：\n\n```java\n//正确代码示例\nRestrict<Double>\n```\n\n- 泛型里面不允许使用**instanceof**\n\n![屏幕快照 2020-04-28 下午2.44.25.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056330113-c11992b1-760c-42af-9833-857462135795.png#align=left&display=inline&height=168&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.44.25.png&originHeight=168&originWidth=1088&size=42395&status=done&style=none&width=1088#align=left&display=inline&height=168&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=1088&status=done&style=none&width=1088)\n- 泛型中可以定义反省数组，但是不能创建参数化类型的数组\n\n![屏幕快照 2020-04-28 下午2.52.27.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056771534-217f2090-b2ff-49f3-8c44-152cfa9e536e.png#align=left&display=inline&height=202&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.52.27.png&originHeight=202&originWidth=1112&size=51695&status=done&style=none&width=1112#align=left&display=inline&height=202&margin=%5Bobject%20Object%5D&originHeight=202&originWidth=1112&status=done&style=none&width=1112)\n- 不能捕获泛型类的实例\n\n![屏幕快照 2020-04-28 下午3.47.05.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060045684-c74ed072-4475-4c37-9f3f-41f889e3a328.png#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.05.png&originHeight=330&originWidth=1154&size=56276&status=done&style=none&width=1154#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&originHeight=330&originWidth=1154&status=done&style=none&width=1154)\n\n\n但是如果把异常抛出来，是可以，如下：\n\n![屏幕快照 2020-04-28 下午3.47.58.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060109008-f7eede8f-e412-456b-a28e-95b5c9fdb4a0.png#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.58.png&originHeight=330&originWidth=1000&size=40351&status=done&style=none&width=1000#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&originHeight=330&originWidth=1000&status=done&style=none&width=1000)\n\n\n\n### 小结：\n\n\n1. 不能用基本类型实例化类型参数。\n1. 在静态域或者方法里面不能引用类型变量。\n1. 基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double。\n1. 泛型里面不允许使用**instanceof。**\n1. 泛型中可以定义反省数组，但是不能创建参数化类型的数组。\n1. 不能捕获泛型类的实例。\n\n\n\n# 5.泛型类型能继承吗？\n\n\n例子如下：\n\n\n```java\npublic class Employee {\n    ....\n}\n\npublic class Worker extends Employee {\n}\n\npublic class Pair<T> {\n    ...\n}\n```\n\n\n```java\nPair<Employee> employeePair2 = new Pair<Worker>();\n```\n\n\n会报错。\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588061003533-d816417c-cef0-4507-ad47-96844d2e1a79.png#align=left&display=inline&height=597&margin=%5Bobject%20Object%5D&name=image.png&originHeight=404&originWidth=1358&size=80794&status=done&style=none&width=1358#align=left&display=inline&height=404&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=1358&status=done&style=none&width=1358)\n但是，泛型类是可以继承或者扩展其他类的！\n\n\n```java\n /*泛型类可以继承或者扩展其他泛型类，比如List和ArrayList*/\n    private static class ExtendPair<T> extends Pair<T>{\n\n    }\n```\n\n\n### 小结\n\n\n1. 泛型类无法协变的\n1. 泛型可以继承或者扩展其他的泛型类\n\n\n\n# 6.泛型中的通配符类型\n\n\n现有如下类的派生关系：\n\n\n![屏幕快照 2020-05-13 下午1.55.14.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589349360860-1646886c-a618-4c0a-80d7-7fe2478cfb2c.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14.png&originHeight=820&originWidth=1122&size=42212&status=done&style=none&width=1122#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1122&status=done&style=none&width=1122)\n\n\n代码如下:\n\n\n```java\n//我们有如下方法和泛型类\npublic static void print(GenericType<Fruit> p) {\n    System.out.println(p.getData().getColor());\n}\n\npublic class GenericType<T> {\n    private T data;\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n```\n\n\n```java\npublic class Food {\n    ...\n}\n\npublic class Fruit extends Food {\n  ...\n}\n\npublic class Apple extends Fruit {\n    ...\n}\n\npublic class Orange extends Fruit {\n    ...\n}\n\npublic class HongFuShi extends Apple {\n    ...\n}\n```\n\n\n但是使用的时候，`print(b)`是不允许的。正如之前提到的，`Orange`虽然是派生自`Fruit`，但是`GenericType<Orange>`和`GenericType<Fruit>`是没有任何关系的。\n\n\n```java\n\tpublic static void use() {\n        GenericType<Fruit> a = new GenericType<>();\n        print(a);\n        GenericType<Orange> b = new GenericType<>();\n        //print(b); 不允许\n    }\n```\n\n\n所以为了解决**泛型无法协变的问题的**的问题，就引入了泛型通配符的概念。\n\n\n> 1.协变指的就是Orange派生自Fruit，那么List也派生自List,但是泛型是不支持的。\n> 2.泛型T是确定的参数类型，一旦传了就定下来了，而通配符非常的灵活是不确定的类型，更多的情况用于扩充参数范围。\n> 3.通配符不是类型参数变量，通配符更像一种规定，规定你只能传哪些类型的参数。\n\n\n\n就上述代码，我们想要**print(b),**可以这么做:\n\n\n```java\n    public static void print2(GenericType<? extends Fruit> p) {\n        System.out.println(p.getData().getColor());\n    }\n```\n\n\n```java\n\tpublic static void use2() {\n        GenericType<Fruit> a = new GenericType<>();\n        print2(a);\n        GenericType<Orange> b = new GenericType<>();\n        print2(b);\n    }\n```\n\n\n这里的**？**就是通配符。\n\n\n## 6.1 上界通配符<? extends T>\n\n\n利用 `<? extends T>` 形式的通配符，可以实现泛型的向上转型。\n\n\n```java\n? extends Fruit 表示通配符的上界是Fruit\n```\n\n\n![屏幕快照 2020-05-13 下午1.55.14 2.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362208227-dd08601c-ce8b-4e81-826c-e33c403aeb5b.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202.png&originHeight=820&originWidth=1122&size=41069&status=done&style=none&width=1122#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1122&status=done&style=none&width=1122)\n\n\n> `GenericType<? extends Fruit>` 代表一个可以持有`Fruit`  及其子类（如：Apple，Orange）的实例的GenericTyp对象。\n\n\n\n### 6.1.1 如果`？`是`Fruit`的父类，会怎样？\n\n\n![屏幕快照 2020-05-13 下午3.30.36.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589355054634-b2bc98b9-0422-4cc2-b895-24361ef12265.png#align=left&display=inline&height=388&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%883.30.36.png&originHeight=388&originWidth=1762&size=117503&status=done&style=none&width=1762#align=left&display=inline&height=388&margin=%5Bobject%20Object%5D&originHeight=388&originWidth=1762&status=done&style=none&width=1762)\n\n\n### 6.1.2 上界只能外围取，不能往里放\n\n\n`GenericType<T>` 方法中有`getData()`和`setData()`方法。\n\n\n```java\npublic class GenericType<T> {\n    private T data;\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n```\n\n\n代码调用如下：\n\n\n```java\n\tpublic static void use2() {\n        GenericType<? extends Fruit> c = new GenericType<>();\n        Apple apple = new Apple();\n        Fruit fruit = new Fruit();\n        //c.setData(apple);//Error\n        //c.setData(fruit);//Error\n        Fruit x = c.getData();\n    }\n```\n\n\n![屏幕快照 2020-05-13 下午4.16.48.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589357826694-927eada9-2aef-4922-84d1-21061a84d1d3.png#align=left&display=inline&height=466&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%884.16.48.png&originHeight=466&originWidth=1412&size=91510&status=done&style=none&width=1412#align=left&display=inline&height=466&margin=%5Bobject%20Object%5D&originHeight=466&originWidth=1412&status=done&style=none&width=1412)\n\n\n> 我们发现往水果里面设置水果类型的方法`setData()` 会失效，但是获取某种水果类型的`getData()` 方法还有效。\n\n\n\n原因：\n`? extends T` 表示类型的上界，类型参数是T的子类或者他本身，那么可以肯定的说，get方法返回的一定是T，这个编译器是可以确定的。但是set方法只知道传入的是个T，具体是T还是T的哪个子类，编译器不能确定。\n\n\n> Java编译期只知道容器里面存放的是Fruit或者是Fruit的派生类，具体是什么类型，编译器并不知道。当编译器执行到 `c.setData(apple)` ，`GenericType` 并没有将值设置成apple，而是标记了一个占位符`capture #1` ,用来表示\n> 编译器捕获到一个Fruit类或者他的派生类，具体什么类型不知道。所以在`setdata()` 的时候传入的Apple和Fruit，编译器不确定是否能跟之前标记的`capture #1` 匹配。\n> `getData()` 方法，这个可以正常用其实就很好理解了，因为上界通配符只能往容器里面放Fruit类或者他的派生类，所以获取到的类都可以隐式转换为他们的基类(或者Object基类)\n\n\n\n## 6.2 下界通配符<? super T>\n\n\n下界通配符只能往容器中放T或者T的基类类型的数据。`<? super Apple>`\n\n\n![屏幕快照 2020-05-13 下午1.55.14 2 2.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362628740-a06ccaa9-fa95-4e0c-94d4-19187d8ed710.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202%202.png&originHeight=820&originWidth=1122&size=75592&status=done&style=none&width=1122#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1122&status=done&style=none&width=1122)\n\n\n代码如下：\n\n\n```java\n\tpublic static void printSuper(GenericType<? super Apple> p) {\n        System.out.println(p.getData());\n    }\n```\n\n\n### 6.2.1 下界范围\n\n\n```java\n\tpublic static void useSuper() {\n        GenericType<Fruit> fruitGenericType = new GenericType<>();\n        GenericType<Apple> appleGenericType = new GenericType<>();\n        GenericType<HongFuShi> hongFuShiGenericType = new GenericType<>();\n        GenericType<Orange> orangeGenericType = new GenericType<>();\n        printSuper(fruitGenericType);\n        printSuper(appleGenericType);\n//        printSuper(hongFuShiGenericType); //Error\n//        printSuper(orangeGenericType);    //Error\n    }\n```\n\n\n`printSuper(hongFuShiGenericType)`和\n`printSuper(orangeGenericType)`就会在编译期报错，因为超过了通配符的下界。\n\n\n![屏幕快照 2020-05-13 下午5.47.00.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589363237036-71cab071-3e00-45f3-8402-2a0e8c48bb04.png#align=left&display=inline&height=684&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%885.47.00.png&originHeight=684&originWidth=1762&size=224978&status=done&style=none&width=1762#align=left&display=inline&height=684&margin=%5Bobject%20Object%5D&originHeight=684&originWidth=1762&status=done&style=none&width=1762)\n\n\n### 6.2.2 下界不影响往里存，但往外取只能放在Object 对象里\n\n\n同样`GenericType<T>` 方法中有`getData()`和`setData()`方法。\n\n\n```java\npublic class GenericType<T> {\n    private T data;\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n```\n\n\n代码调用如下：\n\n\n```java\n \tpublic static void useSuper() {\n        //表示GenericType的类型参数的下界是Apple\n        GenericType<? super Apple> x = new GenericType<>();\n        x.setData(new Apple());\n        x.setData(new HongFuShi());\n        //x.setData(new Fruit()); // Error\n        Object data = x.getData();\n\n    }\n```\n\n\n![屏幕快照 2020-05-13 下午6.01.09.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589364251417-89dc052b-db4b-4c79-a722-4bfcf35a3110.png#align=left&display=inline&height=544&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%886.01.09.png&originHeight=544&originWidth=1352&size=116070&status=done&style=none&width=1352#align=left&display=inline&height=544&margin=%5Bobject%20Object%5D&originHeight=544&originWidth=1352&status=done&style=none&width=1352)\n\n\n我们发现`setData()`是可以正常调用的，`getDat()`方法返回了Object对象。但是为什么`setData()`的时候传入了Apple的父类，就会报错呢？以及为什么`getData()`只能用object来接收呢?\n\n\n原因：\n\n\n> `? super T` ,表示的类型的下界，也就是说表示的是T的基类。所以我们实际上是不知道这个类到底是什么，但是肯定是T的超类或者他本身。\n> 1. 因此我们使用`x.setData()`的时候，如果set的类是T的子类或者T，那么他们可以安全的向上转型为T。所以我们`x.setData()`可以放T的子类或者T本身。对于T的基类，编译器并不知道这个类对象是否是安全的，所以在使用下界通配符的时候是不能直接添加T的基类。\n> 1. 我们在使用`x.getData()`的时候，返回的值一定是T的超类或者他本身，但是要转成哪个超类，编译器不知道，唯一可以确定的，Object是所有类的基类，所以只有转成Object才是安全的。这就是我们在使用`getData()`的时候必须使用Object来接收原因。\n\n\n\n### 6.3 PECS\n\n\n> PECS:_Producer extends Consumer super （生产者使用extends，consumer使用super）_\n\n\n\n- 上界<? extends T>不能往里存，只能往外取(不能set，只能get)，适合频繁往外面读取内容的场景。\n- 下界<? super T>不影响往里存，但往外取只能放在Object对象里，适合经常往里面插入数据的场景。\n\n\n\n# 7.虚拟机如何实现泛型？\n\n\n> 泛型是JDK 1.5的一项新增特性，它的本质是参数化类型（Parametersized Type）的应用，Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n\n\n看下面一个简单的泛型例子：\n例子1:\n我们有如下类：\n\n\n```java\npublic class Apple extends Fruit {\n\t...\n}\n```\n\n\n```java\npublic class Orange extends Fruit {\n\t...\n}\n```\n\n\n```java\n\tpublic static void main(String[] args) {\n        ArrayList<Apple> apples = new ArrayList<>();\n        ArrayList<Orange> orange = new ArrayList<>();\n        System.out.println(apples.getClass() == orange.getClass());\n    }\n```\n\n\n上述例子中，apples只能存`Apple`，orange中只能存`Orange`，最好我们通过`xxx.getClass()`方法来获取他们的类信息，最后结果发现为true。说明泛型类型`Apple`和`Orange`都被擦除了，只剩下**原始类型**。\n\n\n例子2：\n\n\n```java\n \tpublic static void main(String[] args) {\n        Map<String,String> map = new HashMap<>();\n        map.put(\"Roy\",\"18\");\n        System.out.println(map.get(\"Roy\"));\n    }\n```\n\n\n把这段Java代码编译成Class文件，然后字节码反编译一下，发现所有的泛型都不见了。\n`javac xxxx.java`\n\n\n```java\n  \tpublic static void main(String[] var0) {\n        HashMap var1 = new HashMap();\n        var1.put(\"Roy\", \"18\");\n        System.out.println((String)var1.get(\"Roy\"));\n    }\n```\n\n\n待续。。。\n\n\n\n\n\n\n",
        "source": "_posts/20200518JavaGeneric.md",
        "raw": "---\ntitle: 重学Java--Java泛型\ndate: 2020-05-18 17:08:54\ntags:\n- Java\ncategories:\n- Java学习笔记\n---\n\n# 1.为什么我们需要泛型？\n\n\n通过两端代码我们就可以知道为什么需要泛型\n\n\n```java\n public int addInt(int x,int y){\n        return x+y;\n    }\n\n    public float addFloat(float x,float y){\n        return x+y;\n    }\n```\n\n<!--more-->\n\n以上例子，求两个数的和。现在已经有int类型的求和跟float类型的求和，但是如果要实现一个double类型的和，就需要重新写一个**double**的**add**方法。如下：\n\n\n```java\n    //double\n    public double addDouble(double x,double y){\n        return x+y;\n    }\n```\n\n\n其实对于开发者来说，逻辑是一样的，只是参数不同，如果没有泛型，就需要重写类似的方法。\n\n\n\n\n所以泛型的好处：\n**适用于多种数据类型执行相同的代码。可以简化代码。**\n\n\n# 2.泛型类，泛型接口，泛型方法\n\n\n定义一个自己的泛型:\n\n\n## 1.泛型类\n\n\n```java\npublic class NormalGeneric<K> {\n    private K data;\n\n    public NormalGeneric() {\n    }\n\n    public NormalGeneric(K data) {\n        this.data = data;\n    }\n\n    public K getData() {\n        return data;\n    }\n\n    public void setData(K data) {\n        this.data = data;\n    }\n\n    public static void main(String[] args) {\n        NormalGeneric<String> normalGeneric = new NormalGeneric<>();\n        normalGeneric.setData(\"OK\");\n        //normalGeneric.setData(1);\n        System.out.println(normalGeneric.getData());\n        NormalGeneric normalGeneric1 = new NormalGeneric();\n        normalGeneric1.setData(1);\n        normalGeneric1.setData(\"dsf\");\n    }\n}\n```\n\n\n## 2.泛型接口\n\n\n```java\npublic interface Genertor<T> {\n    public T next();\n}\n```\n\n\n实现泛型接口的实现类。\n\n\n- 实现方式一：\n\n    ```java\n    public class ImplGenertor<T> implements Genertor<T> {\n        @Override\n        public T next() {\n            return null;\n        }\n    }\n    ```\n\n- 实现方式二：\n\n    ```java\n     public class ImplGenertor2 implements Genertor<String> {\n            @Override\n            public String next() {\n                return null;\n            }\n        }\n    ```\n\n\n可见，如果是泛型类实现泛型接口的话，那么返回值也是泛型。\n\n\n## 3.泛型方法\n\n\n泛型方法是完全独立的\n\n\n### 3.1 在普通类中的泛型方法代码如下：\n\n\n```java\npublic class GenericMethod {\n\n    public <T> T genericMethod(T...a){\n        return a[a.length/2];\n    }\n\n    public void test(int x,int y){\n        System.out.println(x+y);\n    }\n\n    public static void main(String[] args) {\n        GenericMethod genericMethod = new GenericMethod();\n        genericMethod.test(23,343);\n        System.out.println(genericMethod.<String>genericMethod(\"apple\",\"banana\"));\n        System.out.println(genericMethod.genericMethod(12,34));\n    }\n}\n```\n\n\n### 3.2 在泛型类里面使用泛型方法：\n\n\n```java\npublic class GenericMethod2 {\n    //这个类是个泛型类，在上面已经介绍过\n    public class Generic<T>{\n        private T key;\n        public Generic(T key) {\n            this.key = key;\n        }\n        public T getKey(){\n            return key;\n        }\n    }\n    \n    public <T,K> K showKeyName(Generic<T> container){\n     ...\n    }\n    \n    public static void main(String[] args) {\n\n\n    }\n}\n```\n\n\n上述代码中,\n\n\n```java\npublic T getKey(){\n\treturn key;\n}\n```\n\n\n虽然在方法中使用了泛型，但是这并不是一个泛型方法。\n这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。\n所以在这个方法中才可以继续使用 T 这个泛型。\n\n\n```java\n public <T,K> K showKeyName(Generic<T> container){\n     ...\n }\n```\n\n\n这才是一个真正的泛型方法。\n\n\n### 小结1：\n\n\n- 首先在public与返回值之间的必不可少，这表明这是一个泛型方法，\n- 并且声明了一个泛型T_ 这个T可以出现在这个泛型方法的任意位置._\n- 泛型的数量也可以为任意多个\n\n\n\n再看个代码示例：\n\n\n```java\npublic class GenericMethod3 {\n    static class Fruit{\n        @Override\n        public String toString() {\n            return \"fruit\";\n        }\n    }\n\n    static class Apple extends Fruit{\n        @Override\n        public String toString() {\n            return \"apple\";\n        }\n    }\n\n    static class Person{\n        @Override\n        public String toString() {\n            return \"Person\";\n        }\n    }\n\n    static class GenerateTest<T>{\n        //普通方法\n        public void show_1(T t){\n            System.out.println(t.toString());\n        }\n\n        //在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。\n        // 可以类型与T相同，也可以不同。\n        //由于泛型方法在声明的时候会声明泛型<E>，因此即使在泛型类中并未声明泛型，\n        // 编译器也能够正确识别泛型方法中识别的泛型。\n        public <E> void show_3(E t){\n            System.out.println(t.toString());\n        }\n\n        //在泛型类中声明了一个泛型方法，使用泛型T，\n        // 注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。\n        public <T> void show_2(T t){\n            System.out.println(t.toString());\n        }\n    }\n\n    public static void main(String[] args) {\n        Apple apple = new Apple();\n        Person person = new Person();\n\n        GenerateTest<Fruit> generateTest = new GenerateTest<>();\n        generateTest.show_1(apple);\n        //generateTest.show_1(person);\n\n        generateTest.show_2(apple);\n        generateTest.show_2(person);\n\n        generateTest.show_3(apple);\n        generateTest.show_3(person);\n    }\n}\n```\n\n\n![Xnip2020-04-24_13-23-18.jpg](https://cdn.nlark.com/yuque/0/2020/jpeg/1261993/1587706787742-1eb20c62-3cf1-452f-9092-2f97107f9062.jpeg#align=left&display=inline&height=353&margin=%5Bobject%20Object%5D&name=Xnip2020-04-24_13-23-18.jpg&originHeight=646&originWidth=1364&size=206580&status=done&style=none&width=746#align=left&display=inline&height=646&margin=%5Bobject%20Object%5D&originHeight=646&originWidth=1364&status=done&style=none&width=1364)\n\n\n### 小结2：\n\n\n泛型类里面定义泛型方法，参数可以完全不一样。\n上面的T影响泛型类的普通方法。\n但是对泛型方法没有影响。\n\n\n# 3.如何限定类型变量\n\n\n比如计算两个变量的最小值，最大值。\n\n\n![屏幕快照 2020-04-24 下午1.55.12.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1587707736212-76da455f-c265-4eb0-b1dc-c547d3878607.png#align=left&display=inline&height=283&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-24%20%E4%B8%8B%E5%8D%881.55.12.png&originHeight=328&originWidth=864&size=37264&status=done&style=none&width=746#align=left&display=inline&height=328&margin=%5Bobject%20Object%5D&originHeight=328&originWidth=864&status=done&style=none&width=864)\n但是怎么才能保证传入的变量一定有compareTo方法？\n为了解决这个问题，就引入了限定类型变量的泛型。\n代码如下：\n\n\n```java\n public static <T extends Comparable> T min(T a, T b){\n        if(a.compareTo(b)>0) {\n            return a;\n        } else {\n            return b;\n        }\n}\n```\n\n\n**T extends Comparable中**\nT表示应该绑定类型的子类型，后面的**Comparable**表示绑定类型，\n**子类型和绑定类型可以是类也可以是接口**。\n\n\n**但是如果类跟接口混用的话，规则如下：**\n\n\n- 类只能有一个\n- 并且类需要写到接口的前面\n- 限定类型的泛型，对泛型类，泛型方法同样适用\n\n\n\n代码如下：\n\n\n```java\n public static <T extends ArrayList & Comparable> T min(T a, T b) {\n        if (a.compareTo(b) > 0) return a;\n        else return b;\n }\n```\n\n\n# 4.泛型使用中的约束和局限性\n\n\n假设我们有以下泛型类：\n\n\n```java\npublic class Restrict<T> {\n    ...\n}\n```\n\n\n- 不能用基本类型实例化类型参数\n\n```java\n//错误代码示例\n//不能实例化类型变量 \npublic Restrict() {\n    this.data = new T();\n}\n```\n\n- 在静态域或者方法里面不能引用类型变量\n\n```java\n//错误代码示例\n//静态域或者方法里不能引用类型变量\nprivate static T instance;\n```\n\n  - 先执行static方法\n  - 再执行构造方法\n  - 所以先执行static T，根本不知道T的类型，所以行不通\n  - 但是如果是静态方法本身是泛型方法是可以的\n  \n```java\n//正确代码示例\nprivate static <T> T getInstance(){}\n```\n\n- 基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double\n\n错误的写法：\n\n```java\n     //错误代码示例\n    Restrict<double>\n```\n\n- 正确的写法：\n\n```java\n//正确代码示例\nRestrict<Double>\n```\n\n- 泛型里面不允许使用**instanceof**\n\n![屏幕快照 2020-04-28 下午2.44.25.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056330113-c11992b1-760c-42af-9833-857462135795.png#align=left&display=inline&height=168&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.44.25.png&originHeight=168&originWidth=1088&size=42395&status=done&style=none&width=1088#align=left&display=inline&height=168&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=1088&status=done&style=none&width=1088)\n- 泛型中可以定义反省数组，但是不能创建参数化类型的数组\n\n![屏幕快照 2020-04-28 下午2.52.27.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056771534-217f2090-b2ff-49f3-8c44-152cfa9e536e.png#align=left&display=inline&height=202&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.52.27.png&originHeight=202&originWidth=1112&size=51695&status=done&style=none&width=1112#align=left&display=inline&height=202&margin=%5Bobject%20Object%5D&originHeight=202&originWidth=1112&status=done&style=none&width=1112)\n- 不能捕获泛型类的实例\n\n![屏幕快照 2020-04-28 下午3.47.05.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060045684-c74ed072-4475-4c37-9f3f-41f889e3a328.png#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.05.png&originHeight=330&originWidth=1154&size=56276&status=done&style=none&width=1154#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&originHeight=330&originWidth=1154&status=done&style=none&width=1154)\n\n\n但是如果把异常抛出来，是可以，如下：\n\n![屏幕快照 2020-04-28 下午3.47.58.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060109008-f7eede8f-e412-456b-a28e-95b5c9fdb4a0.png#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.58.png&originHeight=330&originWidth=1000&size=40351&status=done&style=none&width=1000#align=left&display=inline&height=330&margin=%5Bobject%20Object%5D&originHeight=330&originWidth=1000&status=done&style=none&width=1000)\n\n\n\n### 小结：\n\n\n1. 不能用基本类型实例化类型参数。\n1. 在静态域或者方法里面不能引用类型变量。\n1. 基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double。\n1. 泛型里面不允许使用**instanceof。**\n1. 泛型中可以定义反省数组，但是不能创建参数化类型的数组。\n1. 不能捕获泛型类的实例。\n\n\n\n# 5.泛型类型能继承吗？\n\n\n例子如下：\n\n\n```java\npublic class Employee {\n    ....\n}\n\npublic class Worker extends Employee {\n}\n\npublic class Pair<T> {\n    ...\n}\n```\n\n\n```java\nPair<Employee> employeePair2 = new Pair<Worker>();\n```\n\n\n会报错。\n![image.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1588061003533-d816417c-cef0-4507-ad47-96844d2e1a79.png#align=left&display=inline&height=597&margin=%5Bobject%20Object%5D&name=image.png&originHeight=404&originWidth=1358&size=80794&status=done&style=none&width=1358#align=left&display=inline&height=404&margin=%5Bobject%20Object%5D&originHeight=404&originWidth=1358&status=done&style=none&width=1358)\n但是，泛型类是可以继承或者扩展其他类的！\n\n\n```java\n /*泛型类可以继承或者扩展其他泛型类，比如List和ArrayList*/\n    private static class ExtendPair<T> extends Pair<T>{\n\n    }\n```\n\n\n### 小结\n\n\n1. 泛型类无法协变的\n1. 泛型可以继承或者扩展其他的泛型类\n\n\n\n# 6.泛型中的通配符类型\n\n\n现有如下类的派生关系：\n\n\n![屏幕快照 2020-05-13 下午1.55.14.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589349360860-1646886c-a618-4c0a-80d7-7fe2478cfb2c.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14.png&originHeight=820&originWidth=1122&size=42212&status=done&style=none&width=1122#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1122&status=done&style=none&width=1122)\n\n\n代码如下:\n\n\n```java\n//我们有如下方法和泛型类\npublic static void print(GenericType<Fruit> p) {\n    System.out.println(p.getData().getColor());\n}\n\npublic class GenericType<T> {\n    private T data;\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n```\n\n\n```java\npublic class Food {\n    ...\n}\n\npublic class Fruit extends Food {\n  ...\n}\n\npublic class Apple extends Fruit {\n    ...\n}\n\npublic class Orange extends Fruit {\n    ...\n}\n\npublic class HongFuShi extends Apple {\n    ...\n}\n```\n\n\n但是使用的时候，`print(b)`是不允许的。正如之前提到的，`Orange`虽然是派生自`Fruit`，但是`GenericType<Orange>`和`GenericType<Fruit>`是没有任何关系的。\n\n\n```java\n\tpublic static void use() {\n        GenericType<Fruit> a = new GenericType<>();\n        print(a);\n        GenericType<Orange> b = new GenericType<>();\n        //print(b); 不允许\n    }\n```\n\n\n所以为了解决**泛型无法协变的问题的**的问题，就引入了泛型通配符的概念。\n\n\n> 1.协变指的就是Orange派生自Fruit，那么List也派生自List,但是泛型是不支持的。\n> 2.泛型T是确定的参数类型，一旦传了就定下来了，而通配符非常的灵活是不确定的类型，更多的情况用于扩充参数范围。\n> 3.通配符不是类型参数变量，通配符更像一种规定，规定你只能传哪些类型的参数。\n\n\n\n就上述代码，我们想要**print(b),**可以这么做:\n\n\n```java\n    public static void print2(GenericType<? extends Fruit> p) {\n        System.out.println(p.getData().getColor());\n    }\n```\n\n\n```java\n\tpublic static void use2() {\n        GenericType<Fruit> a = new GenericType<>();\n        print2(a);\n        GenericType<Orange> b = new GenericType<>();\n        print2(b);\n    }\n```\n\n\n这里的**？**就是通配符。\n\n\n## 6.1 上界通配符<? extends T>\n\n\n利用 `<? extends T>` 形式的通配符，可以实现泛型的向上转型。\n\n\n```java\n? extends Fruit 表示通配符的上界是Fruit\n```\n\n\n![屏幕快照 2020-05-13 下午1.55.14 2.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362208227-dd08601c-ce8b-4e81-826c-e33c403aeb5b.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202.png&originHeight=820&originWidth=1122&size=41069&status=done&style=none&width=1122#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1122&status=done&style=none&width=1122)\n\n\n> `GenericType<? extends Fruit>` 代表一个可以持有`Fruit`  及其子类（如：Apple，Orange）的实例的GenericTyp对象。\n\n\n\n### 6.1.1 如果`？`是`Fruit`的父类，会怎样？\n\n\n![屏幕快照 2020-05-13 下午3.30.36.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589355054634-b2bc98b9-0422-4cc2-b895-24361ef12265.png#align=left&display=inline&height=388&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%883.30.36.png&originHeight=388&originWidth=1762&size=117503&status=done&style=none&width=1762#align=left&display=inline&height=388&margin=%5Bobject%20Object%5D&originHeight=388&originWidth=1762&status=done&style=none&width=1762)\n\n\n### 6.1.2 上界只能外围取，不能往里放\n\n\n`GenericType<T>` 方法中有`getData()`和`setData()`方法。\n\n\n```java\npublic class GenericType<T> {\n    private T data;\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n```\n\n\n代码调用如下：\n\n\n```java\n\tpublic static void use2() {\n        GenericType<? extends Fruit> c = new GenericType<>();\n        Apple apple = new Apple();\n        Fruit fruit = new Fruit();\n        //c.setData(apple);//Error\n        //c.setData(fruit);//Error\n        Fruit x = c.getData();\n    }\n```\n\n\n![屏幕快照 2020-05-13 下午4.16.48.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589357826694-927eada9-2aef-4922-84d1-21061a84d1d3.png#align=left&display=inline&height=466&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%884.16.48.png&originHeight=466&originWidth=1412&size=91510&status=done&style=none&width=1412#align=left&display=inline&height=466&margin=%5Bobject%20Object%5D&originHeight=466&originWidth=1412&status=done&style=none&width=1412)\n\n\n> 我们发现往水果里面设置水果类型的方法`setData()` 会失效，但是获取某种水果类型的`getData()` 方法还有效。\n\n\n\n原因：\n`? extends T` 表示类型的上界，类型参数是T的子类或者他本身，那么可以肯定的说，get方法返回的一定是T，这个编译器是可以确定的。但是set方法只知道传入的是个T，具体是T还是T的哪个子类，编译器不能确定。\n\n\n> Java编译期只知道容器里面存放的是Fruit或者是Fruit的派生类，具体是什么类型，编译器并不知道。当编译器执行到 `c.setData(apple)` ，`GenericType` 并没有将值设置成apple，而是标记了一个占位符`capture #1` ,用来表示\n> 编译器捕获到一个Fruit类或者他的派生类，具体什么类型不知道。所以在`setdata()` 的时候传入的Apple和Fruit，编译器不确定是否能跟之前标记的`capture #1` 匹配。\n> `getData()` 方法，这个可以正常用其实就很好理解了，因为上界通配符只能往容器里面放Fruit类或者他的派生类，所以获取到的类都可以隐式转换为他们的基类(或者Object基类)\n\n\n\n## 6.2 下界通配符<? super T>\n\n\n下界通配符只能往容器中放T或者T的基类类型的数据。`<? super Apple>`\n\n\n![屏幕快照 2020-05-13 下午1.55.14 2 2.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362628740-a06ccaa9-fa95-4e0c-94d4-19187d8ed710.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202%202.png&originHeight=820&originWidth=1122&size=75592&status=done&style=none&width=1122#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1122&status=done&style=none&width=1122)\n\n\n代码如下：\n\n\n```java\n\tpublic static void printSuper(GenericType<? super Apple> p) {\n        System.out.println(p.getData());\n    }\n```\n\n\n### 6.2.1 下界范围\n\n\n```java\n\tpublic static void useSuper() {\n        GenericType<Fruit> fruitGenericType = new GenericType<>();\n        GenericType<Apple> appleGenericType = new GenericType<>();\n        GenericType<HongFuShi> hongFuShiGenericType = new GenericType<>();\n        GenericType<Orange> orangeGenericType = new GenericType<>();\n        printSuper(fruitGenericType);\n        printSuper(appleGenericType);\n//        printSuper(hongFuShiGenericType); //Error\n//        printSuper(orangeGenericType);    //Error\n    }\n```\n\n\n`printSuper(hongFuShiGenericType)`和\n`printSuper(orangeGenericType)`就会在编译期报错，因为超过了通配符的下界。\n\n\n![屏幕快照 2020-05-13 下午5.47.00.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589363237036-71cab071-3e00-45f3-8402-2a0e8c48bb04.png#align=left&display=inline&height=684&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%885.47.00.png&originHeight=684&originWidth=1762&size=224978&status=done&style=none&width=1762#align=left&display=inline&height=684&margin=%5Bobject%20Object%5D&originHeight=684&originWidth=1762&status=done&style=none&width=1762)\n\n\n### 6.2.2 下界不影响往里存，但往外取只能放在Object 对象里\n\n\n同样`GenericType<T>` 方法中有`getData()`和`setData()`方法。\n\n\n```java\npublic class GenericType<T> {\n    private T data;\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n```\n\n\n代码调用如下：\n\n\n```java\n \tpublic static void useSuper() {\n        //表示GenericType的类型参数的下界是Apple\n        GenericType<? super Apple> x = new GenericType<>();\n        x.setData(new Apple());\n        x.setData(new HongFuShi());\n        //x.setData(new Fruit()); // Error\n        Object data = x.getData();\n\n    }\n```\n\n\n![屏幕快照 2020-05-13 下午6.01.09.png](https://cdn.nlark.com/yuque/0/2020/png/1261993/1589364251417-89dc052b-db4b-4c79-a722-4bfcf35a3110.png#align=left&display=inline&height=544&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%886.01.09.png&originHeight=544&originWidth=1352&size=116070&status=done&style=none&width=1352#align=left&display=inline&height=544&margin=%5Bobject%20Object%5D&originHeight=544&originWidth=1352&status=done&style=none&width=1352)\n\n\n我们发现`setData()`是可以正常调用的，`getDat()`方法返回了Object对象。但是为什么`setData()`的时候传入了Apple的父类，就会报错呢？以及为什么`getData()`只能用object来接收呢?\n\n\n原因：\n\n\n> `? super T` ,表示的类型的下界，也就是说表示的是T的基类。所以我们实际上是不知道这个类到底是什么，但是肯定是T的超类或者他本身。\n> 1. 因此我们使用`x.setData()`的时候，如果set的类是T的子类或者T，那么他们可以安全的向上转型为T。所以我们`x.setData()`可以放T的子类或者T本身。对于T的基类，编译器并不知道这个类对象是否是安全的，所以在使用下界通配符的时候是不能直接添加T的基类。\n> 1. 我们在使用`x.getData()`的时候，返回的值一定是T的超类或者他本身，但是要转成哪个超类，编译器不知道，唯一可以确定的，Object是所有类的基类，所以只有转成Object才是安全的。这就是我们在使用`getData()`的时候必须使用Object来接收原因。\n\n\n\n### 6.3 PECS\n\n\n> PECS:_Producer extends Consumer super （生产者使用extends，consumer使用super）_\n\n\n\n- 上界<? extends T>不能往里存，只能往外取(不能set，只能get)，适合频繁往外面读取内容的场景。\n- 下界<? super T>不影响往里存，但往外取只能放在Object对象里，适合经常往里面插入数据的场景。\n\n\n\n# 7.虚拟机如何实现泛型？\n\n\n> 泛型是JDK 1.5的一项新增特性，它的本质是参数化类型（Parametersized Type）的应用，Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。\n\n\n\n看下面一个简单的泛型例子：\n例子1:\n我们有如下类：\n\n\n```java\npublic class Apple extends Fruit {\n\t...\n}\n```\n\n\n```java\npublic class Orange extends Fruit {\n\t...\n}\n```\n\n\n```java\n\tpublic static void main(String[] args) {\n        ArrayList<Apple> apples = new ArrayList<>();\n        ArrayList<Orange> orange = new ArrayList<>();\n        System.out.println(apples.getClass() == orange.getClass());\n    }\n```\n\n\n上述例子中，apples只能存`Apple`，orange中只能存`Orange`，最好我们通过`xxx.getClass()`方法来获取他们的类信息，最后结果发现为true。说明泛型类型`Apple`和`Orange`都被擦除了，只剩下**原始类型**。\n\n\n例子2：\n\n\n```java\n \tpublic static void main(String[] args) {\n        Map<String,String> map = new HashMap<>();\n        map.put(\"Roy\",\"18\");\n        System.out.println(map.get(\"Roy\"));\n    }\n```\n\n\n把这段Java代码编译成Class文件，然后字节码反编译一下，发现所有的泛型都不见了。\n`javac xxxx.java`\n\n\n```java\n  \tpublic static void main(String[] var0) {\n        HashMap var1 = new HashMap();\n        var1.put(\"Roy\", \"18\");\n        System.out.println((String)var1.get(\"Roy\"));\n    }\n```\n\n\n待续。。。\n\n\n\n\n\n\n",
        "slug": "20200518JavaGeneric",
        "published": 1,
        "updated": "2020-05-19T02:32:04.677Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1h000c52j9whecyxya",
        "content": "<h1 id=\"1-为什么我们需要泛型？\"><a href=\"#1-为什么我们需要泛型？\" class=\"headerlink\" title=\"1.为什么我们需要泛型？\"></a>1.为什么我们需要泛型？</h1><p>通过两端代码我们就可以知道为什么需要泛型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addInt</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">addFloat</span><span class=\"params\">(<span class=\"keyword\">float</span> x,<span class=\"keyword\">float</span> y)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>以上例子，求两个数的和。现在已经有int类型的求和跟float类型的求和，但是如果要实现一个double类型的和，就需要重新写一个<strong>double</strong>的<strong>add</strong>方法。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//double</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">addDouble</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实对于开发者来说，逻辑是一样的，只是参数不同，如果没有泛型，就需要重写类似的方法。</p>\n<p>所以泛型的好处：<br><strong>适用于多种数据类型执行相同的代码。可以简化代码。</strong></p>\n<h1 id=\"2-泛型类，泛型接口，泛型方法\"><a href=\"#2-泛型类，泛型接口，泛型方法\" class=\"headerlink\" title=\"2.泛型类，泛型接口，泛型方法\"></a>2.泛型类，泛型接口，泛型方法</h1><p>定义一个自己的泛型:</p>\n<h2 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1.泛型类\"></a>1.泛型类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NormalGeneric</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> K data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NormalGeneric</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NormalGeneric</span><span class=\"params\">(K data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(K data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        NormalGeneric&lt;String&gt; normalGeneric = <span class=\"keyword\">new</span> NormalGeneric&lt;&gt;();</span><br><span class=\"line\">        normalGeneric.setData(<span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//normalGeneric.setData(1);</span></span><br><span class=\"line\">        System.out.println(normalGeneric.getData());</span><br><span class=\"line\">        NormalGeneric normalGeneric1 = <span class=\"keyword\">new</span> NormalGeneric();</span><br><span class=\"line\">        normalGeneric1.setData(<span class=\"number\">1</span>);</span><br><span class=\"line\">        normalGeneric1.setData(<span class=\"string\">\"dsf\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-泛型接口\"><a href=\"#2-泛型接口\" class=\"headerlink\" title=\"2.泛型接口\"></a>2.泛型接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Genertor</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现泛型接口的实现类。</p>\n<ul>\n<li><p>实现方式一：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImplGenertor</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Genertor</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现方式二：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImplGenertor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Genertor</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可见，如果是泛型类实现泛型接口的话，那么返回值也是泛型。</p>\n<h2 id=\"3-泛型方法\"><a href=\"#3-泛型方法\" class=\"headerlink\" title=\"3.泛型方法\"></a>3.泛型方法</h2><p>泛型方法是完全独立的</p>\n<h3 id=\"3-1-在普通类中的泛型方法代码如下：\"><a href=\"#3-1-在普通类中的泛型方法代码如下：\" class=\"headerlink\" title=\"3.1 在普通类中的泛型方法代码如下：\"></a>3.1 在普通类中的泛型方法代码如下：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethod</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">genericMethod</span><span class=\"params\">(T...a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[a.length/<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(x+y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GenericMethod genericMethod = <span class=\"keyword\">new</span> GenericMethod();</span><br><span class=\"line\">        genericMethod.test(<span class=\"number\">23</span>,<span class=\"number\">343</span>);</span><br><span class=\"line\">        System.out.println(genericMethod.&lt;String&gt;genericMethod(<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"banana\"</span>));</span><br><span class=\"line\">        System.out.println(genericMethod.genericMethod(<span class=\"number\">12</span>,<span class=\"number\">34</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-在泛型类里面使用泛型方法：\"><a href=\"#3-2-在泛型类里面使用泛型方法：\" class=\"headerlink\" title=\"3.2 在泛型类里面使用泛型方法：\"></a>3.2 在泛型类里面使用泛型方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethod2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这个类是个泛型类，在上面已经介绍过</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T key;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Generic</span><span class=\"params\">(T key)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getKey</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T,K&gt; <span class=\"function\">K <span class=\"title\">showKeyName</span><span class=\"params\">(Generic&lt;T&gt; container)</span></span>&#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getKey</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然在方法中使用了泛型，但是这并不是一个泛型方法。<br>这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。<br>所以在这个方法中才可以继续使用 T 这个泛型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T,K&gt; <span class=\"function\">K <span class=\"title\">showKeyName</span><span class=\"params\">(Generic&lt;T&gt; container)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这才是一个真正的泛型方法。</p>\n<h3 id=\"小结1：\"><a href=\"#小结1：\" class=\"headerlink\" title=\"小结1：\"></a>小结1：</h3><ul>\n<li>首先在public与返回值之间的必不可少，这表明这是一个泛型方法，</li>\n<li>并且声明了一个泛型T_ 这个T可以出现在这个泛型方法的任意位置._</li>\n<li>泛型的数量也可以为任意多个</li>\n</ul>\n<p>再看个代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethod3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"fruit\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"apple\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Person\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenerateTest</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//普通方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show_1</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\">            System.out.println(t.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。</span></span><br><span class=\"line\">        <span class=\"comment\">// 可以类型与T相同，也可以不同。</span></span><br><span class=\"line\">        <span class=\"comment\">//由于泛型方法在声明的时候会声明泛型&lt;E&gt;，因此即使在泛型类中并未声明泛型，</span></span><br><span class=\"line\">        <span class=\"comment\">// 编译器也能够正确识别泛型方法中识别的泛型。</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> &lt;E&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_3</span><span class=\"params\">(E t)</span></span>&#123;</span><br><span class=\"line\">            System.out.println(t.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在泛型类中声明了一个泛型方法，使用泛型T，</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_2</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\">            System.out.println(t.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Apple apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">        GenerateTest&lt;Fruit&gt; generateTest = <span class=\"keyword\">new</span> GenerateTest&lt;&gt;();</span><br><span class=\"line\">        generateTest.show_1(apple);</span><br><span class=\"line\">        <span class=\"comment\">//generateTest.show_1(person);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        generateTest.show_2(apple);</span><br><span class=\"line\">        generateTest.show_2(person);</span><br><span class=\"line\"></span><br><span class=\"line\">        generateTest.show_3(apple);</span><br><span class=\"line\">        generateTest.show_3(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/1261993/1587706787742-1eb20c62-3cf1-452f-9092-2f97107f9062.jpeg#align=left&amp;display=inline&amp;height=353&amp;margin=%5Bobject%20Object%5D&amp;name=Xnip2020-04-24_13-23-18.jpg&amp;originHeight=646&amp;originWidth=1364&amp;size=206580&amp;status=done&amp;style=none&amp;width=746#align=left&amp;display=inline&amp;height=646&amp;margin=%5Bobject%20Object%5D&amp;originHeight=646&amp;originWidth=1364&amp;status=done&amp;style=none&amp;width=1364\" alt=\"Xnip2020-04-24_13-23-18.jpg\"></p>\n<h3 id=\"小结2：\"><a href=\"#小结2：\" class=\"headerlink\" title=\"小结2：\"></a>小结2：</h3><p>泛型类里面定义泛型方法，参数可以完全不一样。<br>上面的T影响泛型类的普通方法。<br>但是对泛型方法没有影响。</p>\n<h1 id=\"3-如何限定类型变量\"><a href=\"#3-如何限定类型变量\" class=\"headerlink\" title=\"3.如何限定类型变量\"></a>3.如何限定类型变量</h1><p>比如计算两个变量的最小值，最大值。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1587707736212-76da455f-c265-4eb0-b1dc-c547d3878607.png#align=left&amp;display=inline&amp;height=283&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-24%20%E4%B8%8B%E5%8D%881.55.12.png&amp;originHeight=328&amp;originWidth=864&amp;size=37264&amp;status=done&amp;style=none&amp;width=746#align=left&amp;display=inline&amp;height=328&amp;margin=%5Bobject%20Object%5D&amp;originHeight=328&amp;originWidth=864&amp;status=done&amp;style=none&amp;width=864\" alt=\"屏幕快照 2020-04-24 下午1.55.12.png\"><br>但是怎么才能保证传入的变量一定有compareTo方法？<br>为了解决这个问题，就引入了限定类型变量的泛型。<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&gt; <span class=\"function\">T <span class=\"title\">min</span><span class=\"params\">(T a, T b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.compareTo(b)&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>T extends Comparable中</strong><br>T表示应该绑定类型的子类型，后面的<strong>Comparable</strong>表示绑定类型，<br><strong>子类型和绑定类型可以是类也可以是接口</strong>。</p>\n<p><strong>但是如果类跟接口混用的话，规则如下：</strong></p>\n<ul>\n<li>类只能有一个</li>\n<li>并且类需要写到接口的前面</li>\n<li>限定类型的泛型，对泛型类，泛型方法同样适用</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ArrayList &amp; Comparable&gt; <span class=\"function\">T <span class=\"title\">min</span><span class=\"params\">(T a, T b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (a.compareTo(b) &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-泛型使用中的约束和局限性\"><a href=\"#4-泛型使用中的约束和局限性\" class=\"headerlink\" title=\"4.泛型使用中的约束和局限性\"></a>4.泛型使用中的约束和局限性</h1><p>假设我们有以下泛型类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Restrict</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不能用基本类型实例化类型参数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//不能实例化类型变量 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Restrict</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> T();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在静态域或者方法里面不能引用类型变量</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//静态域或者方法里不能引用类型变量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T instance;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先执行static方法</li>\n<li>再执行构造方法</li>\n<li>所以先执行static T，根本不知道T的类型，所以行不通</li>\n<li>但是如果是静态方法本身是泛型方法是可以的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确代码示例</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double</li>\n</ul>\n<p>错误的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//错误代码示例</span></span><br><span class=\"line\">Restrict&lt;<span class=\"keyword\">double</span>&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>正确的写法：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确代码示例</span></span><br><span class=\"line\">Restrict&lt;Double&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>泛型里面不允许使用<strong>instanceof</strong></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056330113-c11992b1-760c-42af-9833-857462135795.png#align=left&amp;display=inline&amp;height=168&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.44.25.png&amp;originHeight=168&amp;originWidth=1088&amp;size=42395&amp;status=done&amp;style=none&amp;width=1088#align=left&amp;display=inline&amp;height=168&amp;margin=%5Bobject%20Object%5D&amp;originHeight=168&amp;originWidth=1088&amp;status=done&amp;style=none&amp;width=1088\" alt=\"屏幕快照 2020-04-28 下午2.44.25.png\"></p>\n<ul>\n<li>泛型中可以定义反省数组，但是不能创建参数化类型的数组</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056771534-217f2090-b2ff-49f3-8c44-152cfa9e536e.png#align=left&amp;display=inline&amp;height=202&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.52.27.png&amp;originHeight=202&amp;originWidth=1112&amp;size=51695&amp;status=done&amp;style=none&amp;width=1112#align=left&amp;display=inline&amp;height=202&amp;margin=%5Bobject%20Object%5D&amp;originHeight=202&amp;originWidth=1112&amp;status=done&amp;style=none&amp;width=1112\" alt=\"屏幕快照 2020-04-28 下午2.52.27.png\"></p>\n<ul>\n<li>不能捕获泛型类的实例</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060045684-c74ed072-4475-4c37-9f3f-41f889e3a328.png#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.05.png&amp;originHeight=330&amp;originWidth=1154&amp;size=56276&amp;status=done&amp;style=none&amp;width=1154#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;originHeight=330&amp;originWidth=1154&amp;status=done&amp;style=none&amp;width=1154\" alt=\"屏幕快照 2020-04-28 下午3.47.05.png\"></p>\n<p>但是如果把异常抛出来，是可以，如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060109008-f7eede8f-e412-456b-a28e-95b5c9fdb4a0.png#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.58.png&amp;originHeight=330&amp;originWidth=1000&amp;size=40351&amp;status=done&amp;style=none&amp;width=1000#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;originHeight=330&amp;originWidth=1000&amp;status=done&amp;style=none&amp;width=1000\" alt=\"屏幕快照 2020-04-28 下午3.47.58.png\"></p>\n<h3 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><ol>\n<li>不能用基本类型实例化类型参数。</li>\n<li>在静态域或者方法里面不能引用类型变量。</li>\n<li>基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double。</li>\n<li>泛型里面不允许使用<strong>instanceof。</strong></li>\n<li>泛型中可以定义反省数组，但是不能创建参数化类型的数组。</li>\n<li>不能捕获泛型类的实例。</li>\n</ol>\n<h1 id=\"5-泛型类型能继承吗？\"><a href=\"#5-泛型类型能继承吗？\" class=\"headerlink\" title=\"5.泛型类型能继承吗？\"></a>5.泛型类型能继承吗？</h1><p>例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pair&lt;Employee&gt; employeePair2 = <span class=\"keyword\">new</span> Pair&lt;Worker&gt;();</span><br></pre></td></tr></table></figure>\n<p>会报错。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588061003533-d816417c-cef0-4507-ad47-96844d2e1a79.png#align=left&amp;display=inline&amp;height=597&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=404&amp;originWidth=1358&amp;size=80794&amp;status=done&amp;style=none&amp;width=1358#align=left&amp;display=inline&amp;height=404&amp;margin=%5Bobject%20Object%5D&amp;originHeight=404&amp;originWidth=1358&amp;status=done&amp;style=none&amp;width=1358\" alt=\"image.png\"><br>但是，泛型类是可以继承或者扩展其他类的！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*泛型类可以继承或者扩展其他泛型类，比如List和ArrayList*/</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendPair</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ol>\n<li>泛型类无法协变的</li>\n<li>泛型可以继承或者扩展其他的泛型类</li>\n</ol>\n<h1 id=\"6-泛型中的通配符类型\"><a href=\"#6-泛型中的通配符类型\" class=\"headerlink\" title=\"6.泛型中的通配符类型\"></a>6.泛型中的通配符类型</h1><p>现有如下类的派生关系：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589349360860-1646886c-a618-4c0a-80d7-7fe2478cfb2c.png#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14.png&amp;originHeight=820&amp;originWidth=1122&amp;size=42212&amp;status=done&amp;style=none&amp;width=1122#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;originHeight=820&amp;originWidth=1122&amp;status=done&amp;style=none&amp;width=1122\" alt=\"屏幕快照 2020-05-13 下午1.55.14.png\"></p>\n<p>代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们有如下方法和泛型类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(GenericType&lt;Fruit&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(p.getData().getColor());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericType</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span> <span class=\"keyword\">extends</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HongFuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Apple</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是使用的时候，<code>print(b)</code>是不允许的。正如之前提到的，<code>Orange</code>虽然是派生自<code>Fruit</code>，但是<code>GenericType&lt;Orange&gt;</code>和<code>GenericType&lt;Fruit&gt;</code>是没有任何关系的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       GenericType&lt;Fruit&gt; a = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       print(a);</span><br><span class=\"line\">       GenericType&lt;Orange&gt; b = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       <span class=\"comment\">//print(b); 不允许</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>所以为了解决<strong>泛型无法协变的问题的</strong>的问题，就引入了泛型通配符的概念。</p>\n<blockquote>\n<p>1.协变指的就是Orange派生自Fruit，那么List也派生自List,但是泛型是不支持的。<br>2.泛型T是确定的参数类型，一旦传了就定下来了，而通配符非常的灵活是不确定的类型，更多的情况用于扩充参数范围。<br>3.通配符不是类型参数变量，通配符更像一种规定，规定你只能传哪些类型的参数。</p>\n</blockquote>\n<p>就上述代码，我们想要<strong>print(b),</strong>可以这么做:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print2</span><span class=\"params\">(GenericType&lt;? extends Fruit&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(p.getData().getColor());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">use2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       GenericType&lt;Fruit&gt; a = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       print2(a);</span><br><span class=\"line\">       GenericType&lt;Orange&gt; b = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       print2(b);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这里的<strong>？</strong>就是通配符。</p>\n<h2 id=\"6-1-上界通配符-lt-extends-T-gt\"><a href=\"#6-1-上界通配符-lt-extends-T-gt\" class=\"headerlink\" title=\"6.1 上界通配符&lt;? extends T&gt;\"></a>6.1 上界通配符&lt;? extends T&gt;</h2><p>利用 <code>&lt;? extends T&gt;</code> 形式的通配符，可以实现泛型的向上转型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? extends Fruit 表示通配符的上界是Fruit</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362208227-dd08601c-ce8b-4e81-826c-e33c403aeb5b.png#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202.png&amp;originHeight=820&amp;originWidth=1122&amp;size=41069&amp;status=done&amp;style=none&amp;width=1122#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;originHeight=820&amp;originWidth=1122&amp;status=done&amp;style=none&amp;width=1122\" alt=\"屏幕快照 2020-05-13 下午1.55.14 2.png\"></p>\n<blockquote>\n<p><code>GenericType&lt;? extends Fruit&gt;</code> 代表一个可以持有<code>Fruit</code>  及其子类（如：Apple，Orange）的实例的GenericTyp对象。</p>\n</blockquote>\n<h3 id=\"6-1-1-如果？是Fruit的父类，会怎样？\"><a href=\"#6-1-1-如果？是Fruit的父类，会怎样？\" class=\"headerlink\" title=\"6.1.1 如果？是Fruit的父类，会怎样？\"></a>6.1.1 如果<code>？</code>是<code>Fruit</code>的父类，会怎样？</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589355054634-b2bc98b9-0422-4cc2-b895-24361ef12265.png#align=left&amp;display=inline&amp;height=388&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%883.30.36.png&amp;originHeight=388&amp;originWidth=1762&amp;size=117503&amp;status=done&amp;style=none&amp;width=1762#align=left&amp;display=inline&amp;height=388&amp;margin=%5Bobject%20Object%5D&amp;originHeight=388&amp;originWidth=1762&amp;status=done&amp;style=none&amp;width=1762\" alt=\"屏幕快照 2020-05-13 下午3.30.36.png\"></p>\n<h3 id=\"6-1-2-上界只能外围取，不能往里放\"><a href=\"#6-1-2-上界只能外围取，不能往里放\" class=\"headerlink\" title=\"6.1.2 上界只能外围取，不能往里放\"></a>6.1.2 上界只能外围取，不能往里放</h3><p><code>GenericType&lt;T&gt;</code> 方法中有<code>getData()</code>和<code>setData()</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericType</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码调用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">use2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       GenericType&lt;? extends Fruit&gt; c = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       Apple apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">       Fruit fruit = <span class=\"keyword\">new</span> Fruit();</span><br><span class=\"line\">       <span class=\"comment\">//c.setData(apple);//Error</span></span><br><span class=\"line\">       <span class=\"comment\">//c.setData(fruit);//Error</span></span><br><span class=\"line\">       Fruit x = c.getData();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589357826694-927eada9-2aef-4922-84d1-21061a84d1d3.png#align=left&amp;display=inline&amp;height=466&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%884.16.48.png&amp;originHeight=466&amp;originWidth=1412&amp;size=91510&amp;status=done&amp;style=none&amp;width=1412#align=left&amp;display=inline&amp;height=466&amp;margin=%5Bobject%20Object%5D&amp;originHeight=466&amp;originWidth=1412&amp;status=done&amp;style=none&amp;width=1412\" alt=\"屏幕快照 2020-05-13 下午4.16.48.png\"></p>\n<blockquote>\n<p>我们发现往水果里面设置水果类型的方法<code>setData()</code> 会失效，但是获取某种水果类型的<code>getData()</code> 方法还有效。</p>\n</blockquote>\n<p>原因：<br><code>? extends T</code> 表示类型的上界，类型参数是T的子类或者他本身，那么可以肯定的说，get方法返回的一定是T，这个编译器是可以确定的。但是set方法只知道传入的是个T，具体是T还是T的哪个子类，编译器不能确定。</p>\n<blockquote>\n<p>Java编译期只知道容器里面存放的是Fruit或者是Fruit的派生类，具体是什么类型，编译器并不知道。当编译器执行到 <code>c.setData(apple)</code> ，<code>GenericType</code> 并没有将值设置成apple，而是标记了一个占位符<code>capture #1</code> ,用来表示<br>编译器捕获到一个Fruit类或者他的派生类，具体什么类型不知道。所以在<code>setdata()</code> 的时候传入的Apple和Fruit，编译器不确定是否能跟之前标记的<code>capture #1</code> 匹配。<br><code>getData()</code> 方法，这个可以正常用其实就很好理解了，因为上界通配符只能往容器里面放Fruit类或者他的派生类，所以获取到的类都可以隐式转换为他们的基类(或者Object基类)</p>\n</blockquote>\n<h2 id=\"6-2-下界通配符-lt-super-T-gt\"><a href=\"#6-2-下界通配符-lt-super-T-gt\" class=\"headerlink\" title=\"6.2 下界通配符&lt;? super T&gt;\"></a>6.2 下界通配符&lt;? super T&gt;</h2><p>下界通配符只能往容器中放T或者T的基类类型的数据。<code>&lt;? super Apple&gt;</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362628740-a06ccaa9-fa95-4e0c-94d4-19187d8ed710.png#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202%202.png&amp;originHeight=820&amp;originWidth=1122&amp;size=75592&amp;status=done&amp;style=none&amp;width=1122#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;originHeight=820&amp;originWidth=1122&amp;status=done&amp;style=none&amp;width=1122\" alt=\"屏幕快照 2020-05-13 下午1.55.14 2 2.png\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printSuper</span><span class=\"params\">(GenericType&lt;? <span class=\"keyword\">super</span> Apple&gt; p)</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(p.getData());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-1-下界范围\"><a href=\"#6-2-1-下界范围\" class=\"headerlink\" title=\"6.2.1 下界范围\"></a>6.2.1 下界范围</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">useSuper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        GenericType&lt;Fruit&gt; fruitGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        GenericType&lt;Apple&gt; appleGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        GenericType&lt;HongFuShi&gt; hongFuShiGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        GenericType&lt;Orange&gt; orangeGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        printSuper(fruitGenericType);</span><br><span class=\"line\">        printSuper(appleGenericType);</span><br><span class=\"line\"><span class=\"comment\">//        printSuper(hongFuShiGenericType); //Error</span></span><br><span class=\"line\"><span class=\"comment\">//        printSuper(orangeGenericType);    //Error</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>printSuper(hongFuShiGenericType)</code>和<br><code>printSuper(orangeGenericType)</code>就会在编译期报错，因为超过了通配符的下界。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589363237036-71cab071-3e00-45f3-8402-2a0e8c48bb04.png#align=left&amp;display=inline&amp;height=684&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%885.47.00.png&amp;originHeight=684&amp;originWidth=1762&amp;size=224978&amp;status=done&amp;style=none&amp;width=1762#align=left&amp;display=inline&amp;height=684&amp;margin=%5Bobject%20Object%5D&amp;originHeight=684&amp;originWidth=1762&amp;status=done&amp;style=none&amp;width=1762\" alt=\"屏幕快照 2020-05-13 下午5.47.00.png\"></p>\n<h3 id=\"6-2-2-下界不影响往里存，但往外取只能放在Object-对象里\"><a href=\"#6-2-2-下界不影响往里存，但往外取只能放在Object-对象里\" class=\"headerlink\" title=\"6.2.2 下界不影响往里存，但往外取只能放在Object 对象里\"></a>6.2.2 下界不影响往里存，但往外取只能放在Object 对象里</h3><p>同样<code>GenericType&lt;T&gt;</code> 方法中有<code>getData()</code>和<code>setData()</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericType</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码调用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">useSuper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//表示GenericType的类型参数的下界是Apple</span></span><br><span class=\"line\">      GenericType&lt;? <span class=\"keyword\">super</span> Apple&gt; x = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">      x.setData(<span class=\"keyword\">new</span> Apple());</span><br><span class=\"line\">      x.setData(<span class=\"keyword\">new</span> HongFuShi());</span><br><span class=\"line\">      <span class=\"comment\">//x.setData(new Fruit()); // Error</span></span><br><span class=\"line\">      Object data = x.getData();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589364251417-89dc052b-db4b-4c79-a722-4bfcf35a3110.png#align=left&amp;display=inline&amp;height=544&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%886.01.09.png&amp;originHeight=544&amp;originWidth=1352&amp;size=116070&amp;status=done&amp;style=none&amp;width=1352#align=left&amp;display=inline&amp;height=544&amp;margin=%5Bobject%20Object%5D&amp;originHeight=544&amp;originWidth=1352&amp;status=done&amp;style=none&amp;width=1352\" alt=\"屏幕快照 2020-05-13 下午6.01.09.png\"></p>\n<p>我们发现<code>setData()</code>是可以正常调用的，<code>getDat()</code>方法返回了Object对象。但是为什么<code>setData()</code>的时候传入了Apple的父类，就会报错呢？以及为什么<code>getData()</code>只能用object来接收呢?</p>\n<p>原因：</p>\n<blockquote>\n<p><code>? super T</code> ,表示的类型的下界，也就是说表示的是T的基类。所以我们实际上是不知道这个类到底是什么，但是肯定是T的超类或者他本身。</p>\n<ol>\n<li>因此我们使用<code>x.setData()</code>的时候，如果set的类是T的子类或者T，那么他们可以安全的向上转型为T。所以我们<code>x.setData()</code>可以放T的子类或者T本身。对于T的基类，编译器并不知道这个类对象是否是安全的，所以在使用下界通配符的时候是不能直接添加T的基类。</li>\n<li>我们在使用<code>x.getData()</code>的时候，返回的值一定是T的超类或者他本身，但是要转成哪个超类，编译器不知道，唯一可以确定的，Object是所有类的基类，所以只有转成Object才是安全的。这就是我们在使用<code>getData()</code>的时候必须使用Object来接收原因。</li>\n</ol>\n</blockquote>\n<h3 id=\"6-3-PECS\"><a href=\"#6-3-PECS\" class=\"headerlink\" title=\"6.3 PECS\"></a>6.3 PECS</h3><blockquote>\n<p>PECS:<em>Producer extends Consumer super （生产者使用extends，consumer使用super）</em></p>\n</blockquote>\n<ul>\n<li>上界&lt;? extends T&gt;不能往里存，只能往外取(不能set，只能get)，适合频繁往外面读取内容的场景。</li>\n<li>下界&lt;? super T&gt;不影响往里存，但往外取只能放在Object对象里，适合经常往里面插入数据的场景。</li>\n</ul>\n<h1 id=\"7-虚拟机如何实现泛型？\"><a href=\"#7-虚拟机如何实现泛型？\" class=\"headerlink\" title=\"7.虚拟机如何实现泛型？\"></a>7.虚拟机如何实现泛型？</h1><blockquote>\n<p>泛型是JDK 1.5的一项新增特性，它的本质是参数化类型（Parametersized Type）的应用，Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。</p>\n</blockquote>\n<p>看下面一个简单的泛型例子：<br>例子1:<br>我们有如下类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       ArrayList&lt;Apple&gt; apples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">       ArrayList&lt;Orange&gt; orange = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">       System.out.println(apples.getClass() == orange.getClass());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>上述例子中，apples只能存<code>Apple</code>，orange中只能存<code>Orange</code>，最好我们通过<code>xxx.getClass()</code>方法来获取他们的类信息，最后结果发现为true。说明泛型类型<code>Apple</code>和<code>Orange</code>都被擦除了，只剩下<strong>原始类型</strong>。</p>\n<p>例子2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">      map.put(<span class=\"string\">\"Roy\"</span>,<span class=\"string\">\"18\"</span>);</span><br><span class=\"line\">      System.out.println(map.get(<span class=\"string\">\"Roy\"</span>));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>把这段Java代码编译成Class文件，然后字节码反编译一下，发现所有的泛型都不见了。<br><code>javac xxxx.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] var0)</span> </span>&#123;</span><br><span class=\"line\">     HashMap var1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">     var1.put(<span class=\"string\">\"Roy\"</span>, <span class=\"string\">\"18\"</span>);</span><br><span class=\"line\">     System.out.println((String)var1.get(<span class=\"string\">\"Roy\"</span>));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"1-为什么我们需要泛型？\"><a href=\"#1-为什么我们需要泛型？\" class=\"headerlink\" title=\"1.为什么我们需要泛型？\"></a>1.为什么我们需要泛型？</h1><p>通过两端代码我们就可以知道为什么需要泛型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addInt</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">addFloat</span><span class=\"params\">(<span class=\"keyword\">float</span> x,<span class=\"keyword\">float</span> y)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>",
        "more": "<p>以上例子，求两个数的和。现在已经有int类型的求和跟float类型的求和，但是如果要实现一个double类型的和，就需要重新写一个<strong>double</strong>的<strong>add</strong>方法。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//double</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">addDouble</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实对于开发者来说，逻辑是一样的，只是参数不同，如果没有泛型，就需要重写类似的方法。</p>\n<p>所以泛型的好处：<br><strong>适用于多种数据类型执行相同的代码。可以简化代码。</strong></p>\n<h1 id=\"2-泛型类，泛型接口，泛型方法\"><a href=\"#2-泛型类，泛型接口，泛型方法\" class=\"headerlink\" title=\"2.泛型类，泛型接口，泛型方法\"></a>2.泛型类，泛型接口，泛型方法</h1><p>定义一个自己的泛型:</p>\n<h2 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1.泛型类\"></a>1.泛型类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NormalGeneric</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> K data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NormalGeneric</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NormalGeneric</span><span class=\"params\">(K data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(K data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        NormalGeneric&lt;String&gt; normalGeneric = <span class=\"keyword\">new</span> NormalGeneric&lt;&gt;();</span><br><span class=\"line\">        normalGeneric.setData(<span class=\"string\">\"OK\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//normalGeneric.setData(1);</span></span><br><span class=\"line\">        System.out.println(normalGeneric.getData());</span><br><span class=\"line\">        NormalGeneric normalGeneric1 = <span class=\"keyword\">new</span> NormalGeneric();</span><br><span class=\"line\">        normalGeneric1.setData(<span class=\"number\">1</span>);</span><br><span class=\"line\">        normalGeneric1.setData(<span class=\"string\">\"dsf\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-泛型接口\"><a href=\"#2-泛型接口\" class=\"headerlink\" title=\"2.泛型接口\"></a>2.泛型接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Genertor</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现泛型接口的实现类。</p>\n<ul>\n<li><p>实现方式一：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImplGenertor</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Genertor</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现方式二：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImplGenertor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Genertor</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可见，如果是泛型类实现泛型接口的话，那么返回值也是泛型。</p>\n<h2 id=\"3-泛型方法\"><a href=\"#3-泛型方法\" class=\"headerlink\" title=\"3.泛型方法\"></a>3.泛型方法</h2><p>泛型方法是完全独立的</p>\n<h3 id=\"3-1-在普通类中的泛型方法代码如下：\"><a href=\"#3-1-在普通类中的泛型方法代码如下：\" class=\"headerlink\" title=\"3.1 在普通类中的泛型方法代码如下：\"></a>3.1 在普通类中的泛型方法代码如下：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethod</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">genericMethod</span><span class=\"params\">(T...a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[a.length/<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(x+y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GenericMethod genericMethod = <span class=\"keyword\">new</span> GenericMethod();</span><br><span class=\"line\">        genericMethod.test(<span class=\"number\">23</span>,<span class=\"number\">343</span>);</span><br><span class=\"line\">        System.out.println(genericMethod.&lt;String&gt;genericMethod(<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"banana\"</span>));</span><br><span class=\"line\">        System.out.println(genericMethod.genericMethod(<span class=\"number\">12</span>,<span class=\"number\">34</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-在泛型类里面使用泛型方法：\"><a href=\"#3-2-在泛型类里面使用泛型方法：\" class=\"headerlink\" title=\"3.2 在泛型类里面使用泛型方法：\"></a>3.2 在泛型类里面使用泛型方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethod2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这个类是个泛型类，在上面已经介绍过</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T key;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Generic</span><span class=\"params\">(T key)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getKey</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T,K&gt; <span class=\"function\">K <span class=\"title\">showKeyName</span><span class=\"params\">(Generic&lt;T&gt; container)</span></span>&#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getKey</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然在方法中使用了泛型，但是这并不是一个泛型方法。<br>这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。<br>所以在这个方法中才可以继续使用 T 这个泛型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T,K&gt; <span class=\"function\">K <span class=\"title\">showKeyName</span><span class=\"params\">(Generic&lt;T&gt; container)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这才是一个真正的泛型方法。</p>\n<h3 id=\"小结1：\"><a href=\"#小结1：\" class=\"headerlink\" title=\"小结1：\"></a>小结1：</h3><ul>\n<li>首先在public与返回值之间的必不可少，这表明这是一个泛型方法，</li>\n<li>并且声明了一个泛型T_ 这个T可以出现在这个泛型方法的任意位置._</li>\n<li>泛型的数量也可以为任意多个</li>\n</ul>\n<p>再看个代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethod3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"fruit\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"apple\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Person\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenerateTest</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//普通方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show_1</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\">            System.out.println(t.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。</span></span><br><span class=\"line\">        <span class=\"comment\">// 可以类型与T相同，也可以不同。</span></span><br><span class=\"line\">        <span class=\"comment\">//由于泛型方法在声明的时候会声明泛型&lt;E&gt;，因此即使在泛型类中并未声明泛型，</span></span><br><span class=\"line\">        <span class=\"comment\">// 编译器也能够正确识别泛型方法中识别的泛型。</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> &lt;E&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_3</span><span class=\"params\">(E t)</span></span>&#123;</span><br><span class=\"line\">            System.out.println(t.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在泛型类中声明了一个泛型方法，使用泛型T，</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_2</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\">            System.out.println(t.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Apple apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">        GenerateTest&lt;Fruit&gt; generateTest = <span class=\"keyword\">new</span> GenerateTest&lt;&gt;();</span><br><span class=\"line\">        generateTest.show_1(apple);</span><br><span class=\"line\">        <span class=\"comment\">//generateTest.show_1(person);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        generateTest.show_2(apple);</span><br><span class=\"line\">        generateTest.show_2(person);</span><br><span class=\"line\"></span><br><span class=\"line\">        generateTest.show_3(apple);</span><br><span class=\"line\">        generateTest.show_3(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/1261993/1587706787742-1eb20c62-3cf1-452f-9092-2f97107f9062.jpeg#align=left&amp;display=inline&amp;height=353&amp;margin=%5Bobject%20Object%5D&amp;name=Xnip2020-04-24_13-23-18.jpg&amp;originHeight=646&amp;originWidth=1364&amp;size=206580&amp;status=done&amp;style=none&amp;width=746#align=left&amp;display=inline&amp;height=646&amp;margin=%5Bobject%20Object%5D&amp;originHeight=646&amp;originWidth=1364&amp;status=done&amp;style=none&amp;width=1364\" alt=\"Xnip2020-04-24_13-23-18.jpg\"></p>\n<h3 id=\"小结2：\"><a href=\"#小结2：\" class=\"headerlink\" title=\"小结2：\"></a>小结2：</h3><p>泛型类里面定义泛型方法，参数可以完全不一样。<br>上面的T影响泛型类的普通方法。<br>但是对泛型方法没有影响。</p>\n<h1 id=\"3-如何限定类型变量\"><a href=\"#3-如何限定类型变量\" class=\"headerlink\" title=\"3.如何限定类型变量\"></a>3.如何限定类型变量</h1><p>比如计算两个变量的最小值，最大值。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1587707736212-76da455f-c265-4eb0-b1dc-c547d3878607.png#align=left&amp;display=inline&amp;height=283&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-24%20%E4%B8%8B%E5%8D%881.55.12.png&amp;originHeight=328&amp;originWidth=864&amp;size=37264&amp;status=done&amp;style=none&amp;width=746#align=left&amp;display=inline&amp;height=328&amp;margin=%5Bobject%20Object%5D&amp;originHeight=328&amp;originWidth=864&amp;status=done&amp;style=none&amp;width=864\" alt=\"屏幕快照 2020-04-24 下午1.55.12.png\"><br>但是怎么才能保证传入的变量一定有compareTo方法？<br>为了解决这个问题，就引入了限定类型变量的泛型。<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&gt; <span class=\"function\">T <span class=\"title\">min</span><span class=\"params\">(T a, T b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a.compareTo(b)&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>T extends Comparable中</strong><br>T表示应该绑定类型的子类型，后面的<strong>Comparable</strong>表示绑定类型，<br><strong>子类型和绑定类型可以是类也可以是接口</strong>。</p>\n<p><strong>但是如果类跟接口混用的话，规则如下：</strong></p>\n<ul>\n<li>类只能有一个</li>\n<li>并且类需要写到接口的前面</li>\n<li>限定类型的泛型，对泛型类，泛型方法同样适用</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ArrayList &amp; Comparable&gt; <span class=\"function\">T <span class=\"title\">min</span><span class=\"params\">(T a, T b)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (a.compareTo(b) &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-泛型使用中的约束和局限性\"><a href=\"#4-泛型使用中的约束和局限性\" class=\"headerlink\" title=\"4.泛型使用中的约束和局限性\"></a>4.泛型使用中的约束和局限性</h1><p>假设我们有以下泛型类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Restrict</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不能用基本类型实例化类型参数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//不能实例化类型变量 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Restrict</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> T();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在静态域或者方法里面不能引用类型变量</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//静态域或者方法里不能引用类型变量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T instance;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先执行static方法</li>\n<li>再执行构造方法</li>\n<li>所以先执行static T，根本不知道T的类型，所以行不通</li>\n<li>但是如果是静态方法本身是泛型方法是可以的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确代码示例</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double</li>\n</ul>\n<p>错误的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//错误代码示例</span></span><br><span class=\"line\">Restrict&lt;<span class=\"keyword\">double</span>&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>正确的写法：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确代码示例</span></span><br><span class=\"line\">Restrict&lt;Double&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>泛型里面不允许使用<strong>instanceof</strong></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056330113-c11992b1-760c-42af-9833-857462135795.png#align=left&amp;display=inline&amp;height=168&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.44.25.png&amp;originHeight=168&amp;originWidth=1088&amp;size=42395&amp;status=done&amp;style=none&amp;width=1088#align=left&amp;display=inline&amp;height=168&amp;margin=%5Bobject%20Object%5D&amp;originHeight=168&amp;originWidth=1088&amp;status=done&amp;style=none&amp;width=1088\" alt=\"屏幕快照 2020-04-28 下午2.44.25.png\"></p>\n<ul>\n<li>泛型中可以定义反省数组，但是不能创建参数化类型的数组</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588056771534-217f2090-b2ff-49f3-8c44-152cfa9e536e.png#align=left&amp;display=inline&amp;height=202&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%882.52.27.png&amp;originHeight=202&amp;originWidth=1112&amp;size=51695&amp;status=done&amp;style=none&amp;width=1112#align=left&amp;display=inline&amp;height=202&amp;margin=%5Bobject%20Object%5D&amp;originHeight=202&amp;originWidth=1112&amp;status=done&amp;style=none&amp;width=1112\" alt=\"屏幕快照 2020-04-28 下午2.52.27.png\"></p>\n<ul>\n<li>不能捕获泛型类的实例</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060045684-c74ed072-4475-4c37-9f3f-41f889e3a328.png#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.05.png&amp;originHeight=330&amp;originWidth=1154&amp;size=56276&amp;status=done&amp;style=none&amp;width=1154#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;originHeight=330&amp;originWidth=1154&amp;status=done&amp;style=none&amp;width=1154\" alt=\"屏幕快照 2020-04-28 下午3.47.05.png\"></p>\n<p>但是如果把异常抛出来，是可以，如下：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588060109008-f7eede8f-e412-456b-a28e-95b5c9fdb4a0.png#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-04-28%20%E4%B8%8B%E5%8D%883.47.58.png&amp;originHeight=330&amp;originWidth=1000&amp;size=40351&amp;status=done&amp;style=none&amp;width=1000#align=left&amp;display=inline&amp;height=330&amp;margin=%5Bobject%20Object%5D&amp;originHeight=330&amp;originWidth=1000&amp;status=done&amp;style=none&amp;width=1000\" alt=\"屏幕快照 2020-04-28 下午3.47.58.png\"></p>\n<h3 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><ol>\n<li>不能用基本类型实例化类型参数。</li>\n<li>在静态域或者方法里面不能引用类型变量。</li>\n<li>基础类型不允许做实例化参数的，例如：double不能用在泛型参数里，必须用double的包装类Double。</li>\n<li>泛型里面不允许使用<strong>instanceof。</strong></li>\n<li>泛型中可以定义反省数组，但是不能创建参数化类型的数组。</li>\n<li>不能捕获泛型类的实例。</li>\n</ol>\n<h1 id=\"5-泛型类型能继承吗？\"><a href=\"#5-泛型类型能继承吗？\" class=\"headerlink\" title=\"5.泛型类型能继承吗？\"></a>5.泛型类型能继承吗？</h1><p>例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pair&lt;Employee&gt; employeePair2 = <span class=\"keyword\">new</span> Pair&lt;Worker&gt;();</span><br></pre></td></tr></table></figure>\n<p>会报错。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1588061003533-d816417c-cef0-4507-ad47-96844d2e1a79.png#align=left&amp;display=inline&amp;height=597&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=404&amp;originWidth=1358&amp;size=80794&amp;status=done&amp;style=none&amp;width=1358#align=left&amp;display=inline&amp;height=404&amp;margin=%5Bobject%20Object%5D&amp;originHeight=404&amp;originWidth=1358&amp;status=done&amp;style=none&amp;width=1358\" alt=\"image.png\"><br>但是，泛型类是可以继承或者扩展其他类的！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*泛型类可以继承或者扩展其他泛型类，比如List和ArrayList*/</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendPair</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ol>\n<li>泛型类无法协变的</li>\n<li>泛型可以继承或者扩展其他的泛型类</li>\n</ol>\n<h1 id=\"6-泛型中的通配符类型\"><a href=\"#6-泛型中的通配符类型\" class=\"headerlink\" title=\"6.泛型中的通配符类型\"></a>6.泛型中的通配符类型</h1><p>现有如下类的派生关系：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589349360860-1646886c-a618-4c0a-80d7-7fe2478cfb2c.png#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14.png&amp;originHeight=820&amp;originWidth=1122&amp;size=42212&amp;status=done&amp;style=none&amp;width=1122#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;originHeight=820&amp;originWidth=1122&amp;status=done&amp;style=none&amp;width=1122\" alt=\"屏幕快照 2020-05-13 下午1.55.14.png\"></p>\n<p>代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们有如下方法和泛型类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(GenericType&lt;Fruit&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(p.getData().getColor());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericType</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span> <span class=\"keyword\">extends</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HongFuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Apple</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是使用的时候，<code>print(b)</code>是不允许的。正如之前提到的，<code>Orange</code>虽然是派生自<code>Fruit</code>，但是<code>GenericType&lt;Orange&gt;</code>和<code>GenericType&lt;Fruit&gt;</code>是没有任何关系的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       GenericType&lt;Fruit&gt; a = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       print(a);</span><br><span class=\"line\">       GenericType&lt;Orange&gt; b = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       <span class=\"comment\">//print(b); 不允许</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>所以为了解决<strong>泛型无法协变的问题的</strong>的问题，就引入了泛型通配符的概念。</p>\n<blockquote>\n<p>1.协变指的就是Orange派生自Fruit，那么List也派生自List,但是泛型是不支持的。<br>2.泛型T是确定的参数类型，一旦传了就定下来了，而通配符非常的灵活是不确定的类型，更多的情况用于扩充参数范围。<br>3.通配符不是类型参数变量，通配符更像一种规定，规定你只能传哪些类型的参数。</p>\n</blockquote>\n<p>就上述代码，我们想要<strong>print(b),</strong>可以这么做:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print2</span><span class=\"params\">(GenericType&lt;? extends Fruit&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(p.getData().getColor());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">use2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       GenericType&lt;Fruit&gt; a = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       print2(a);</span><br><span class=\"line\">       GenericType&lt;Orange&gt; b = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       print2(b);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这里的<strong>？</strong>就是通配符。</p>\n<h2 id=\"6-1-上界通配符-lt-extends-T-gt\"><a href=\"#6-1-上界通配符-lt-extends-T-gt\" class=\"headerlink\" title=\"6.1 上界通配符&lt;? extends T&gt;\"></a>6.1 上界通配符&lt;? extends T&gt;</h2><p>利用 <code>&lt;? extends T&gt;</code> 形式的通配符，可以实现泛型的向上转型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? extends Fruit 表示通配符的上界是Fruit</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362208227-dd08601c-ce8b-4e81-826c-e33c403aeb5b.png#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202.png&amp;originHeight=820&amp;originWidth=1122&amp;size=41069&amp;status=done&amp;style=none&amp;width=1122#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;originHeight=820&amp;originWidth=1122&amp;status=done&amp;style=none&amp;width=1122\" alt=\"屏幕快照 2020-05-13 下午1.55.14 2.png\"></p>\n<blockquote>\n<p><code>GenericType&lt;? extends Fruit&gt;</code> 代表一个可以持有<code>Fruit</code>  及其子类（如：Apple，Orange）的实例的GenericTyp对象。</p>\n</blockquote>\n<h3 id=\"6-1-1-如果？是Fruit的父类，会怎样？\"><a href=\"#6-1-1-如果？是Fruit的父类，会怎样？\" class=\"headerlink\" title=\"6.1.1 如果？是Fruit的父类，会怎样？\"></a>6.1.1 如果<code>？</code>是<code>Fruit</code>的父类，会怎样？</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589355054634-b2bc98b9-0422-4cc2-b895-24361ef12265.png#align=left&amp;display=inline&amp;height=388&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%883.30.36.png&amp;originHeight=388&amp;originWidth=1762&amp;size=117503&amp;status=done&amp;style=none&amp;width=1762#align=left&amp;display=inline&amp;height=388&amp;margin=%5Bobject%20Object%5D&amp;originHeight=388&amp;originWidth=1762&amp;status=done&amp;style=none&amp;width=1762\" alt=\"屏幕快照 2020-05-13 下午3.30.36.png\"></p>\n<h3 id=\"6-1-2-上界只能外围取，不能往里放\"><a href=\"#6-1-2-上界只能外围取，不能往里放\" class=\"headerlink\" title=\"6.1.2 上界只能外围取，不能往里放\"></a>6.1.2 上界只能外围取，不能往里放</h3><p><code>GenericType&lt;T&gt;</code> 方法中有<code>getData()</code>和<code>setData()</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericType</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码调用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">use2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       GenericType&lt;? extends Fruit&gt; c = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">       Apple apple = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\">       Fruit fruit = <span class=\"keyword\">new</span> Fruit();</span><br><span class=\"line\">       <span class=\"comment\">//c.setData(apple);//Error</span></span><br><span class=\"line\">       <span class=\"comment\">//c.setData(fruit);//Error</span></span><br><span class=\"line\">       Fruit x = c.getData();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589357826694-927eada9-2aef-4922-84d1-21061a84d1d3.png#align=left&amp;display=inline&amp;height=466&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%884.16.48.png&amp;originHeight=466&amp;originWidth=1412&amp;size=91510&amp;status=done&amp;style=none&amp;width=1412#align=left&amp;display=inline&amp;height=466&amp;margin=%5Bobject%20Object%5D&amp;originHeight=466&amp;originWidth=1412&amp;status=done&amp;style=none&amp;width=1412\" alt=\"屏幕快照 2020-05-13 下午4.16.48.png\"></p>\n<blockquote>\n<p>我们发现往水果里面设置水果类型的方法<code>setData()</code> 会失效，但是获取某种水果类型的<code>getData()</code> 方法还有效。</p>\n</blockquote>\n<p>原因：<br><code>? extends T</code> 表示类型的上界，类型参数是T的子类或者他本身，那么可以肯定的说，get方法返回的一定是T，这个编译器是可以确定的。但是set方法只知道传入的是个T，具体是T还是T的哪个子类，编译器不能确定。</p>\n<blockquote>\n<p>Java编译期只知道容器里面存放的是Fruit或者是Fruit的派生类，具体是什么类型，编译器并不知道。当编译器执行到 <code>c.setData(apple)</code> ，<code>GenericType</code> 并没有将值设置成apple，而是标记了一个占位符<code>capture #1</code> ,用来表示<br>编译器捕获到一个Fruit类或者他的派生类，具体什么类型不知道。所以在<code>setdata()</code> 的时候传入的Apple和Fruit，编译器不确定是否能跟之前标记的<code>capture #1</code> 匹配。<br><code>getData()</code> 方法，这个可以正常用其实就很好理解了，因为上界通配符只能往容器里面放Fruit类或者他的派生类，所以获取到的类都可以隐式转换为他们的基类(或者Object基类)</p>\n</blockquote>\n<h2 id=\"6-2-下界通配符-lt-super-T-gt\"><a href=\"#6-2-下界通配符-lt-super-T-gt\" class=\"headerlink\" title=\"6.2 下界通配符&lt;? super T&gt;\"></a>6.2 下界通配符&lt;? super T&gt;</h2><p>下界通配符只能往容器中放T或者T的基类类型的数据。<code>&lt;? super Apple&gt;</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589362628740-a06ccaa9-fa95-4e0c-94d4-19187d8ed710.png#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%881.55.14%202%202.png&amp;originHeight=820&amp;originWidth=1122&amp;size=75592&amp;status=done&amp;style=none&amp;width=1122#align=left&amp;display=inline&amp;height=820&amp;margin=%5Bobject%20Object%5D&amp;originHeight=820&amp;originWidth=1122&amp;status=done&amp;style=none&amp;width=1122\" alt=\"屏幕快照 2020-05-13 下午1.55.14 2 2.png\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printSuper</span><span class=\"params\">(GenericType&lt;? <span class=\"keyword\">super</span> Apple&gt; p)</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(p.getData());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-1-下界范围\"><a href=\"#6-2-1-下界范围\" class=\"headerlink\" title=\"6.2.1 下界范围\"></a>6.2.1 下界范围</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">useSuper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        GenericType&lt;Fruit&gt; fruitGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        GenericType&lt;Apple&gt; appleGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        GenericType&lt;HongFuShi&gt; hongFuShiGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        GenericType&lt;Orange&gt; orangeGenericType = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">        printSuper(fruitGenericType);</span><br><span class=\"line\">        printSuper(appleGenericType);</span><br><span class=\"line\"><span class=\"comment\">//        printSuper(hongFuShiGenericType); //Error</span></span><br><span class=\"line\"><span class=\"comment\">//        printSuper(orangeGenericType);    //Error</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>printSuper(hongFuShiGenericType)</code>和<br><code>printSuper(orangeGenericType)</code>就会在编译期报错，因为超过了通配符的下界。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589363237036-71cab071-3e00-45f3-8402-2a0e8c48bb04.png#align=left&amp;display=inline&amp;height=684&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%885.47.00.png&amp;originHeight=684&amp;originWidth=1762&amp;size=224978&amp;status=done&amp;style=none&amp;width=1762#align=left&amp;display=inline&amp;height=684&amp;margin=%5Bobject%20Object%5D&amp;originHeight=684&amp;originWidth=1762&amp;status=done&amp;style=none&amp;width=1762\" alt=\"屏幕快照 2020-05-13 下午5.47.00.png\"></p>\n<h3 id=\"6-2-2-下界不影响往里存，但往外取只能放在Object-对象里\"><a href=\"#6-2-2-下界不影响往里存，但往外取只能放在Object-对象里\" class=\"headerlink\" title=\"6.2.2 下界不影响往里存，但往外取只能放在Object 对象里\"></a>6.2.2 下界不影响往里存，但往外取只能放在Object 对象里</h3><p>同样<code>GenericType&lt;T&gt;</code> 方法中有<code>getData()</code>和<code>setData()</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericType</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码调用如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">useSuper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//表示GenericType的类型参数的下界是Apple</span></span><br><span class=\"line\">      GenericType&lt;? <span class=\"keyword\">super</span> Apple&gt; x = <span class=\"keyword\">new</span> GenericType&lt;&gt;();</span><br><span class=\"line\">      x.setData(<span class=\"keyword\">new</span> Apple());</span><br><span class=\"line\">      x.setData(<span class=\"keyword\">new</span> HongFuShi());</span><br><span class=\"line\">      <span class=\"comment\">//x.setData(new Fruit()); // Error</span></span><br><span class=\"line\">      Object data = x.getData();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1261993/1589364251417-89dc052b-db4b-4c79-a722-4bfcf35a3110.png#align=left&amp;display=inline&amp;height=544&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-05-13%20%E4%B8%8B%E5%8D%886.01.09.png&amp;originHeight=544&amp;originWidth=1352&amp;size=116070&amp;status=done&amp;style=none&amp;width=1352#align=left&amp;display=inline&amp;height=544&amp;margin=%5Bobject%20Object%5D&amp;originHeight=544&amp;originWidth=1352&amp;status=done&amp;style=none&amp;width=1352\" alt=\"屏幕快照 2020-05-13 下午6.01.09.png\"></p>\n<p>我们发现<code>setData()</code>是可以正常调用的，<code>getDat()</code>方法返回了Object对象。但是为什么<code>setData()</code>的时候传入了Apple的父类，就会报错呢？以及为什么<code>getData()</code>只能用object来接收呢?</p>\n<p>原因：</p>\n<blockquote>\n<p><code>? super T</code> ,表示的类型的下界，也就是说表示的是T的基类。所以我们实际上是不知道这个类到底是什么，但是肯定是T的超类或者他本身。</p>\n<ol>\n<li>因此我们使用<code>x.setData()</code>的时候，如果set的类是T的子类或者T，那么他们可以安全的向上转型为T。所以我们<code>x.setData()</code>可以放T的子类或者T本身。对于T的基类，编译器并不知道这个类对象是否是安全的，所以在使用下界通配符的时候是不能直接添加T的基类。</li>\n<li>我们在使用<code>x.getData()</code>的时候，返回的值一定是T的超类或者他本身，但是要转成哪个超类，编译器不知道，唯一可以确定的，Object是所有类的基类，所以只有转成Object才是安全的。这就是我们在使用<code>getData()</code>的时候必须使用Object来接收原因。</li>\n</ol>\n</blockquote>\n<h3 id=\"6-3-PECS\"><a href=\"#6-3-PECS\" class=\"headerlink\" title=\"6.3 PECS\"></a>6.3 PECS</h3><blockquote>\n<p>PECS:<em>Producer extends Consumer super （生产者使用extends，consumer使用super）</em></p>\n</blockquote>\n<ul>\n<li>上界&lt;? extends T&gt;不能往里存，只能往外取(不能set，只能get)，适合频繁往外面读取内容的场景。</li>\n<li>下界&lt;? super T&gt;不影响往里存，但往外取只能放在Object对象里，适合经常往里面插入数据的场景。</li>\n</ul>\n<h1 id=\"7-虚拟机如何实现泛型？\"><a href=\"#7-虚拟机如何实现泛型？\" class=\"headerlink\" title=\"7.虚拟机如何实现泛型？\"></a>7.虚拟机如何实现泛型？</h1><blockquote>\n<p>泛型是JDK 1.5的一项新增特性，它的本质是参数化类型（Parametersized Type）的应用，Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会在编译器在编译的时候去掉。这个过程就称为类型擦除。</p>\n</blockquote>\n<p>看下面一个简单的泛型例子：<br>例子1:<br>我们有如下类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       ArrayList&lt;Apple&gt; apples = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">       ArrayList&lt;Orange&gt; orange = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">       System.out.println(apples.getClass() == orange.getClass());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>上述例子中，apples只能存<code>Apple</code>，orange中只能存<code>Orange</code>，最好我们通过<code>xxx.getClass()</code>方法来获取他们的类信息，最后结果发现为true。说明泛型类型<code>Apple</code>和<code>Orange</code>都被擦除了，只剩下<strong>原始类型</strong>。</p>\n<p>例子2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">      map.put(<span class=\"string\">\"Roy\"</span>,<span class=\"string\">\"18\"</span>);</span><br><span class=\"line\">      System.out.println(map.get(<span class=\"string\">\"Roy\"</span>));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>把这段Java代码编译成Class文件，然后字节码反编译一下，发现所有的泛型都不见了。<br><code>javac xxxx.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] var0)</span> </span>&#123;</span><br><span class=\"line\">     HashMap var1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">     var1.put(<span class=\"string\">\"Roy\"</span>, <span class=\"string\">\"18\"</span>);</span><br><span class=\"line\">     System.out.println((String)var1.get(<span class=\"string\">\"Roy\"</span>));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>"
      },
      {
        "title": "Android IllegalStateException: Fragment not attached to Activity",
        "date": "2016-07-04T07:22:29.000Z",
        "_content": "\n``` java\njava.lang.IllegalStateException\nFragment QuestionCollectSimpleFragment{42283040} not attached to Activity\n```\n<!--more-->\n## 问题的产生\n项目中,加载一个fragment,然后迅速点击系统自带的返回或者自带的返回按钮弹出提示时自动退出.\n## 异常分析\n定位代码发现,该问题的产生的原因是在调用资源文件getResource()时发生的crash.\n\n该问题产生的原因是因为fragment加载的时候还没有Attach到他所被管理的activity上就去加载Resource导致的.\n## 解决方法\n在调用getResource()方法时判断下改fragment是否attach到他所管理的activity上.使用isAdded() 方法.\n``` java\nif(isAdded()){\n    getResources().getString(R.string.xxx);\n}\n```\n",
        "source": "_posts/Android-IllegalStateException-Fragment-not-attached-to-Activity.md",
        "raw": "---\ntitle: 'Android IllegalStateException: Fragment not attached to Activity' \ndate: 2016-07-04 15:22:29\ntags:\n- Android \n- fragment\ncategories:\n- Android开发笔记\n---\n\n``` java\njava.lang.IllegalStateException\nFragment QuestionCollectSimpleFragment{42283040} not attached to Activity\n```\n<!--more-->\n## 问题的产生\n项目中,加载一个fragment,然后迅速点击系统自带的返回或者自带的返回按钮弹出提示时自动退出.\n## 异常分析\n定位代码发现,该问题的产生的原因是在调用资源文件getResource()时发生的crash.\n\n该问题产生的原因是因为fragment加载的时候还没有Attach到他所被管理的activity上就去加载Resource导致的.\n## 解决方法\n在调用getResource()方法时判断下改fragment是否attach到他所管理的activity上.使用isAdded() 方法.\n``` java\nif(isAdded()){\n    getResources().getString(R.string.xxx);\n}\n```\n",
        "slug": "Android-IllegalStateException-Fragment-not-attached-to-Activity",
        "published": 1,
        "updated": "2020-05-19T02:32:04.678Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1i000d52j94h9z1l33",
        "content": "<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.IllegalStateException</span><br><span class=\"line\">Fragment QuestionCollectSimpleFragment&#123;<span class=\"number\">42283040</span>&#125; not attached to Activity</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"问题的产生\"><a href=\"#问题的产生\" class=\"headerlink\" title=\"问题的产生\"></a>问题的产生</h2><p>项目中,加载一个fragment,然后迅速点击系统自带的返回或者自带的返回按钮弹出提示时自动退出.</p>\n<h2 id=\"异常分析\"><a href=\"#异常分析\" class=\"headerlink\" title=\"异常分析\"></a>异常分析</h2><p>定位代码发现,该问题的产生的原因是在调用资源文件getResource()时发生的crash.</p>\n<p>该问题产生的原因是因为fragment加载的时候还没有Attach到他所被管理的activity上就去加载Resource导致的.</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在调用getResource()方法时判断下改fragment是否attach到他所管理的activity上.使用isAdded() 方法.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(isAdded())&#123;</span><br><span class=\"line\">    getResources().getString(R.string.xxx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.IllegalStateException</span><br><span class=\"line\">Fragment QuestionCollectSimpleFragment&#123;<span class=\"number\">42283040</span>&#125; not attached to Activity</span><br></pre></td></tr></table></figure>",
        "more": "<h2 id=\"问题的产生\"><a href=\"#问题的产生\" class=\"headerlink\" title=\"问题的产生\"></a>问题的产生</h2><p>项目中,加载一个fragment,然后迅速点击系统自带的返回或者自带的返回按钮弹出提示时自动退出.</p>\n<h2 id=\"异常分析\"><a href=\"#异常分析\" class=\"headerlink\" title=\"异常分析\"></a>异常分析</h2><p>定位代码发现,该问题的产生的原因是在调用资源文件getResource()时发生的crash.</p>\n<p>该问题产生的原因是因为fragment加载的时候还没有Attach到他所被管理的activity上就去加载Resource导致的.</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在调用getResource()方法时判断下改fragment是否attach到他所管理的activity上.使用isAdded() 方法.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(isAdded())&#123;</span><br><span class=\"line\">    getResources().getString(R.string.xxx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"
      },
      {
        "title": "Android使用Intent跳转的时候,如何清除堆栈里所有的Activity",
        "date": "2016-04-27T03:27:17.000Z",
        "_content": "\n我在开发一块下单送货软件的时候遇到的这个问题.场景描述,用户从首页选择里订单,进入了订单确认页面,确认后进入了选择支付页面,支付成功以后需要返回首页.如何在进入首页的时候清除堆栈里所有的Activity?说说有效的方法吧.FLAG_ACTIVITY_CLEAR_TOP\n<!--more-->\n``` java\nIntent intent = new Intent(A.this,B.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);\nstartActivity(intent);\n\n```\n\n**看看里面的安卓源码**\n``` java\n /**\n     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},\n     * this flag will cause any existing task that would be associated with the\n     * activity to be cleared before the activity is started.  That is, the activity\n     * becomes the new root of an otherwise empty task, and any old activities\n     * are finished.  This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}.\n     */\n    public static final int FLAG_ACTIVITY_CLEAR_TASK = 0X00008000;\n```\n\n源码中明确说明如果在startActivity的时候传递FLAG_ACTIVITY_CLEAR_TASK这个标志,那么这个标志将会清除之前所有已经打开的activity.然后将会变成另外一个空栈的root,然后其他的Activitys就都被关闭了.这个方法必须跟着{@link #FLAG_ACTIVITY_NEW_TASK}一起使用.\n\n\n## 我的博客地址\n[GitHub Blog](http://pvphero.github.io/)\n[Coding Blog](http://shenzhenwei.coding.me/)\n[CSDN Blog](http://blog.csdn.net/pvpheroszw)\n",
        "source": "_posts/AndroidIntentJump.md",
        "raw": "---\ntitle: Android使用Intent跳转的时候,如何清除堆栈里所有的Activity\ndate: 2016-04-27 11:27:17\ntags:\n- Android \n- Intent\n- setFlags\ncategories:\n- Android开发笔记\n---\n\n我在开发一块下单送货软件的时候遇到的这个问题.场景描述,用户从首页选择里订单,进入了订单确认页面,确认后进入了选择支付页面,支付成功以后需要返回首页.如何在进入首页的时候清除堆栈里所有的Activity?说说有效的方法吧.FLAG_ACTIVITY_CLEAR_TOP\n<!--more-->\n``` java\nIntent intent = new Intent(A.this,B.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);\nstartActivity(intent);\n\n```\n\n**看看里面的安卓源码**\n``` java\n /**\n     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},\n     * this flag will cause any existing task that would be associated with the\n     * activity to be cleared before the activity is started.  That is, the activity\n     * becomes the new root of an otherwise empty task, and any old activities\n     * are finished.  This can only be used in conjunction with {@link #FLAG_ACTIVITY_NEW_TASK}.\n     */\n    public static final int FLAG_ACTIVITY_CLEAR_TASK = 0X00008000;\n```\n\n源码中明确说明如果在startActivity的时候传递FLAG_ACTIVITY_CLEAR_TASK这个标志,那么这个标志将会清除之前所有已经打开的activity.然后将会变成另外一个空栈的root,然后其他的Activitys就都被关闭了.这个方法必须跟着{@link #FLAG_ACTIVITY_NEW_TASK}一起使用.\n\n\n## 我的博客地址\n[GitHub Blog](http://pvphero.github.io/)\n[Coding Blog](http://shenzhenwei.coding.me/)\n[CSDN Blog](http://blog.csdn.net/pvpheroszw)\n",
        "slug": "AndroidIntentJump",
        "published": 1,
        "updated": "2020-05-19T02:32:04.678Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1j000e52j9mi8pu5io",
        "content": "<p>我在开发一块下单送货软件的时候遇到的这个问题.场景描述,用户从首页选择里订单,进入了订单确认页面,确认后进入了选择支付页面,支付成功以后需要返回首页.如何在进入首页的时候清除堆栈里所有的Activity?说说有效的方法吧.FLAG_ACTIVITY_CLEAR_TOP<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(A.<span class=\"keyword\">this</span>,B.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure></p>\n<p><strong>看看里面的安卓源码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * If set in an Intent passed to &#123;<span class=\"doctag\">@link</span> Context#startActivity Context.startActivity()&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    * this flag will cause any existing task that would be associated with the</span></span><br><span class=\"line\"><span class=\"comment\">    * activity to be cleared before the activity is started.  That is, the activity</span></span><br><span class=\"line\"><span class=\"comment\">    * becomes the new root of an otherwise empty task, and any old activities</span></span><br><span class=\"line\"><span class=\"comment\">    * are finished.  This can only be used in conjunction with &#123;<span class=\"doctag\">@link</span> #FLAG_ACTIVITY_NEW_TASK&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_ACTIVITY_CLEAR_TASK = <span class=\"number\">0X00008000</span>;</span><br></pre></td></tr></table></figure></p>\n<p>源码中明确说明如果在startActivity的时候传递FLAG_ACTIVITY_CLEAR_TASK这个标志,那么这个标志将会清除之前所有已经打开的activity.然后将会变成另外一个空栈的root,然后其他的Activitys就都被关闭了.这个方法必须跟着{@link #FLAG_ACTIVITY_NEW_TASK}一起使用.</p>\n<h2 id=\"我的博客地址\"><a href=\"#我的博客地址\" class=\"headerlink\" title=\"我的博客地址\"></a>我的博客地址</h2><p><a href=\"http://pvphero.github.io/\">GitHub Blog</a><br><a href=\"http://shenzhenwei.coding.me/\" target=\"_blank\" rel=\"noopener\">Coding Blog</a><br><a href=\"http://blog.csdn.net/pvpheroszw\" target=\"_blank\" rel=\"noopener\">CSDN Blog</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>我在开发一块下单送货软件的时候遇到的这个问题.场景描述,用户从首页选择里订单,进入了订单确认页面,确认后进入了选择支付页面,支付成功以后需要返回首页.如何在进入首页的时候清除堆栈里所有的Activity?说说有效的方法吧.FLAG_ACTIVITY_CLEAR_TOP<br>",
        "more": "<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(A.<span class=\"keyword\">this</span>,B.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure></p>\n<p><strong>看看里面的安卓源码</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * If set in an Intent passed to &#123;<span class=\"doctag\">@link</span> Context#startActivity Context.startActivity()&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    * this flag will cause any existing task that would be associated with the</span></span><br><span class=\"line\"><span class=\"comment\">    * activity to be cleared before the activity is started.  That is, the activity</span></span><br><span class=\"line\"><span class=\"comment\">    * becomes the new root of an otherwise empty task, and any old activities</span></span><br><span class=\"line\"><span class=\"comment\">    * are finished.  This can only be used in conjunction with &#123;<span class=\"doctag\">@link</span> #FLAG_ACTIVITY_NEW_TASK&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_ACTIVITY_CLEAR_TASK = <span class=\"number\">0X00008000</span>;</span><br></pre></td></tr></table></figure></p>\n<p>源码中明确说明如果在startActivity的时候传递FLAG_ACTIVITY_CLEAR_TASK这个标志,那么这个标志将会清除之前所有已经打开的activity.然后将会变成另外一个空栈的root,然后其他的Activitys就都被关闭了.这个方法必须跟着{@link #FLAG_ACTIVITY_NEW_TASK}一起使用.</p>\n<h2 id=\"我的博客地址\"><a href=\"#我的博客地址\" class=\"headerlink\" title=\"我的博客地址\"></a>我的博客地址</h2><p><a href=\"http://pvphero.github.io/\">GitHub Blog</a><br><a href=\"http://shenzhenwei.coding.me/\" target=\"_blank\" rel=\"noopener\">Coding Blog</a><br><a href=\"http://blog.csdn.net/pvpheroszw\" target=\"_blank\" rel=\"noopener\">CSDN Blog</a></p>"
      },
      {
        "title": "Anroid Intent跳转系统设置页面",
        "date": "2018-01-18T09:20:01.000Z",
        "_content": "\n我们的app支持18种语言,为了测试能很快的跳转到语言的切换页面.所以专门扒拉了一下intent跳转系统所有设置页面的方法,记录下来,以后忘记了可以直接查看.\n<!--more-->\n就是这么漂,就是这么酷炫~\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fnks2wr9xzg308w06ox6p.gif)\n# android.provider.Settings\n``` java\n\n1.   ACTION_ACCESSIBILITY_SETTINGS ：    // 跳转系统的辅助功能界面\n\n           Intent intent =  new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);\n           startActivity(intent);\n\n2.    ACTION_ADD_ACCOUNT ：               // 显示添加帐户创建一个新的帐户屏幕。【测试跳转到微信登录界面】\n\n           Intent intent =  new Intent(Settings.ACTION_ADD_ACCOUNT);\n           startActivity(intent);\n\n3.   ACTION_AIRPLANE_MODE_SETTINGS：       // 飞行模式，无线网和网络设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_AIRPLANE_MODE_SETTINGS);\n           startActivity(intent);\n\n        或者：\n\n     ACTION_WIRELESS_SETTINGS  ：\n\n                Intent intent =  new Intent(Settings.ACTION_WIFI_SETTINGS);\n                startActivity(intent);\n\n4.    ACTION_APN_SETTINGS：                 //  跳转 APN设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_APN_SETTINGS);\n           startActivity(intent);\n\n5.   【需要参数】 ACTION_APPLICATION_DETAILS_SETTINGS：   // 根据包名跳转到系统自带的应用程序信息界面\n\n               Uri packageURI = Uri.parse(\"package:\" + \"com.tencent.WBlog\");\n               Intent intent =  new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,packageURI);\n               startActivity(intent);\n\n6.    ACTION_APPLICATION_DEVELOPMENT_SETTINGS :  // 跳转开发人员选项界面\n\n           Intent intent =  new Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS);\n           startActivity(intent);\n\n7.    ACTION_APPLICATION_SETTINGS ：      // 跳转应用程序列表界面\n\n           Intent intent =  new Intent(Settings.ACTION_APPLICATION_SETTINGS);\n           startActivity(intent);\n\n       或者：\n\n      ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS   // 跳转到应用程序界面【所有的】\n\n             Intent intent =  new Intent(Settings.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS);\n             startActivity(intent);\n\n       或者：\n\n       ACTION_MANAGE_APPLICATIONS_SETTINGS  ：//  跳转 应用程序列表界面【已安装的】\n\n             Intent intent =  new Intent(Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);\n             startActivity(intent);\n\n\n\n8.    ACTION_BLUETOOTH_SETTINGS  ：      // 跳转系统的蓝牙设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_BLUETOOTH_SETTINGS);\n           startActivity(intent);\n\n9.    ACTION_DATA_ROAMING_SETTINGS ：   //  跳转到移动网络设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);\n           startActivity(intent);\n\n10.    ACTION_DATE_SETTINGS ：           //  跳转日期时间设置界面\n\n            Intent intent =  new Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);\n            startActivity(intent);\n\n11.    ACTION_DEVICE_INFO_SETTINGS  ：    // 跳转手机状态界面\n\n            Intent intent =  new Intent(Settings.ACTION_DEVICE_INFO_SETTINGS);\n            startActivity(intent);\n\n12.    ACTION_DISPLAY_SETTINGS  ：        // 跳转手机显示界面\n\n            Intent intent =  new Intent(Settings.ACTION_DISPLAY_SETTINGS);\n            startActivity(intent);\n\n13.    ACTION_DREAM_SETTINGS     【API 18及以上 没测试】\n\n            Intent intent =  new Intent(Settings.ACTION_DREAM_SETTINGS);\n            startActivity(intent);\n\n\n14.    ACTION_INPUT_METHOD_SETTINGS ：    // 跳转语言和输入设备\n\n            Intent intent =  new Intent(Settings.ACTION_INPUT_METHOD_SETTINGS);\n            startActivity(intent);\n\n15.    ACTION_INPUT_METHOD_SUBTYPE_SETTINGS  【API 11及以上】  //  跳转 语言选择界面 【多国语言选择】\n\n             Intent intent =  new Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS);\n             startActivity(intent);\n\n16.    ACTION_INTERNAL_STORAGE_SETTINGS         // 跳转存储设置界面【内部存储】\n\n             Intent intent =  new Intent(Settings.ACTION_INTERNAL_STORAGE_SETTINGS);\n             startActivity(intent);\n\n      或者：\n\n        ACTION_MEMORY_CARD_SETTINGS    ：   // 跳转 存储设置 【记忆卡存储】\n\n             Intent intent =  new Intent(Settings.ACTION_MEMORY_CARD_SETTINGS);\n             startActivity(intent);\n\n\n17.    ACTION_LOCALE_SETTINGS  ：         // 跳转语言选择界面【仅有English 和 中文两种选择】\n\n              Intent intent =  new Intent(Settings.ACTION_LOCALE_SETTINGS);\n              startActivity(intent);\n\n\n18.     ACTION_LOCATION_SOURCE_SETTINGS :    //  跳转位置服务界面【管理已安装的应用程序。】\n\n              Intent intent =  new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\n              startActivity(intent);\n\n19.    ACTION_NETWORK_OPERATOR_SETTINGS ： // 跳转到 显示设置选择网络运营商。\n\n              Intent intent =  new Intent(Settings.ACTION_NETWORK_OPERATOR_SETTINGS);\n              startActivity(intent);\n\n20.    ACTION_NFCSHARING_SETTINGS  ：       // 显示NFC共享设置。 【API 14及以上】\n\n              Intent intent =  new Intent(Settings.ACTION_NFCSHARING_SETTINGS);\n              startActivity(intent);\n\n21.    ACTION_NFC_SETTINGS  ：           // 显示NFC设置。这显示了用户界面,允许NFC打开或关闭。  【API 16及以上】\n\n              Intent intent =  new Intent(Settings.ACTION_NFC_SETTINGS);\n              startActivity(intent);\n\n22.    ACTION_PRIVACY_SETTINGS ：       //  跳转到备份和重置界面\n\n              Intent intent =  new Intent(Settings.ACTION_PRIVACY_SETTINGS);\n              startActivity(intent);\n\n23.    ACTION_QUICK_LAUNCH_SETTINGS  ： // 跳转快速启动设置界面\n\n               Intent intent =  new Intent(Settings.ACTION_QUICK_LAUNCH_SETTINGS);\n               startActivity(intent);\n\n24.    ACTION_SEARCH_SETTINGS    ：    // 跳转到 搜索设置界面\n\n               Intent intent =  new Intent(Settings.ACTION_SEARCH_SETTINGS);\n               startActivity(intent);\n\n25.    ACTION_SECURITY_SETTINGS  ：     // 跳转到安全设置界面\n\n               Intent intent =  new Intent(Settings.ACTION_SECURITY_SETTINGS);\n               startActivity(intent);\n\n26.    ACTION_SETTINGS   ：                // 跳转到设置界面\n\n                Intent intent =  new Intent(Settings.ACTION_SETTINGS);\n                startActivity(intent);\n\n27.   ACTION_SOUND_SETTINGS                // 跳转到声音设置界面\n\n                 Intent intent =  new Intent(Settings.ACTION_SOUND_SETTINGS);\n                 startActivity(intent);\n\n28.   ACTION_SYNC_SETTINGS ：             // 跳转账户同步界面\n\n                Intent intent =  new Intent(Settings.ACTION_SYNC_SETTINGS);\n                startActivity(intent);\n\n29.     ACTION_USER_DICTIONARY_SETTINGS ：  //  跳转用户字典界面\n\n                Intent intent =  new Intent(Settings.ACTION_USER_DICTIONARY_SETTINGS);\n                startActivity(intent);\n\n30.     ACTION_WIFI_IP_SETTINGS  ：         // 跳转到IP设定界面\n\n                 Intent intent =  new Intent(Settings.ACTION_WIFI_IP_SETTINGS);\n                 startActivity(intent);\n\n31.     ACTION_WIFI_SETTINGS  ：            //  跳转Wifi列表设置\n\n                 Intent intent = new Intent(Settings.ACTION_WIFI_SETTINGS);\n                 startActivity(intent);\n```\n\n# 跳转方式\n``` java\n    Intent intent = new Intent(Settings.*********);\n    startActivity(intent);\n```\n\n# 举个例子\n方法都贴完了怎么能不举个栗子,撸码爽爽\n\n**MainActivity.java**\n```java\nimport android.content.Intent;\nimport android.provider.Settings;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(Settings.ACTION_LOCALE_SETTINGS);\n                startActivity(intent);\n            }\n        });\n    }\n}\n```\n\n**activity_main**\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"语言选择\"/>\n</android.support.constraint.ConstraintLayout>\n\n```\n\n# 实现效果\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fnkw9y61gdj30u01hc0ty.jpg)\n\n",
        "source": "_posts/AndroidIntentJumpToSysSettings.md",
        "raw": "---\ntitle: Anroid Intent跳转系统设置页面\ndate: 2018-01-18 17:20:01\ntags:\n- Android\ncategories:\n- Android开发笔记\n---\n\n我们的app支持18种语言,为了测试能很快的跳转到语言的切换页面.所以专门扒拉了一下intent跳转系统所有设置页面的方法,记录下来,以后忘记了可以直接查看.\n<!--more-->\n就是这么漂,就是这么酷炫~\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fnks2wr9xzg308w06ox6p.gif)\n# android.provider.Settings\n``` java\n\n1.   ACTION_ACCESSIBILITY_SETTINGS ：    // 跳转系统的辅助功能界面\n\n           Intent intent =  new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);\n           startActivity(intent);\n\n2.    ACTION_ADD_ACCOUNT ：               // 显示添加帐户创建一个新的帐户屏幕。【测试跳转到微信登录界面】\n\n           Intent intent =  new Intent(Settings.ACTION_ADD_ACCOUNT);\n           startActivity(intent);\n\n3.   ACTION_AIRPLANE_MODE_SETTINGS：       // 飞行模式，无线网和网络设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_AIRPLANE_MODE_SETTINGS);\n           startActivity(intent);\n\n        或者：\n\n     ACTION_WIRELESS_SETTINGS  ：\n\n                Intent intent =  new Intent(Settings.ACTION_WIFI_SETTINGS);\n                startActivity(intent);\n\n4.    ACTION_APN_SETTINGS：                 //  跳转 APN设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_APN_SETTINGS);\n           startActivity(intent);\n\n5.   【需要参数】 ACTION_APPLICATION_DETAILS_SETTINGS：   // 根据包名跳转到系统自带的应用程序信息界面\n\n               Uri packageURI = Uri.parse(\"package:\" + \"com.tencent.WBlog\");\n               Intent intent =  new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,packageURI);\n               startActivity(intent);\n\n6.    ACTION_APPLICATION_DEVELOPMENT_SETTINGS :  // 跳转开发人员选项界面\n\n           Intent intent =  new Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS);\n           startActivity(intent);\n\n7.    ACTION_APPLICATION_SETTINGS ：      // 跳转应用程序列表界面\n\n           Intent intent =  new Intent(Settings.ACTION_APPLICATION_SETTINGS);\n           startActivity(intent);\n\n       或者：\n\n      ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS   // 跳转到应用程序界面【所有的】\n\n             Intent intent =  new Intent(Settings.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS);\n             startActivity(intent);\n\n       或者：\n\n       ACTION_MANAGE_APPLICATIONS_SETTINGS  ：//  跳转 应用程序列表界面【已安装的】\n\n             Intent intent =  new Intent(Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);\n             startActivity(intent);\n\n\n\n8.    ACTION_BLUETOOTH_SETTINGS  ：      // 跳转系统的蓝牙设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_BLUETOOTH_SETTINGS);\n           startActivity(intent);\n\n9.    ACTION_DATA_ROAMING_SETTINGS ：   //  跳转到移动网络设置界面\n\n           Intent intent =  new Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);\n           startActivity(intent);\n\n10.    ACTION_DATE_SETTINGS ：           //  跳转日期时间设置界面\n\n            Intent intent =  new Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);\n            startActivity(intent);\n\n11.    ACTION_DEVICE_INFO_SETTINGS  ：    // 跳转手机状态界面\n\n            Intent intent =  new Intent(Settings.ACTION_DEVICE_INFO_SETTINGS);\n            startActivity(intent);\n\n12.    ACTION_DISPLAY_SETTINGS  ：        // 跳转手机显示界面\n\n            Intent intent =  new Intent(Settings.ACTION_DISPLAY_SETTINGS);\n            startActivity(intent);\n\n13.    ACTION_DREAM_SETTINGS     【API 18及以上 没测试】\n\n            Intent intent =  new Intent(Settings.ACTION_DREAM_SETTINGS);\n            startActivity(intent);\n\n\n14.    ACTION_INPUT_METHOD_SETTINGS ：    // 跳转语言和输入设备\n\n            Intent intent =  new Intent(Settings.ACTION_INPUT_METHOD_SETTINGS);\n            startActivity(intent);\n\n15.    ACTION_INPUT_METHOD_SUBTYPE_SETTINGS  【API 11及以上】  //  跳转 语言选择界面 【多国语言选择】\n\n             Intent intent =  new Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS);\n             startActivity(intent);\n\n16.    ACTION_INTERNAL_STORAGE_SETTINGS         // 跳转存储设置界面【内部存储】\n\n             Intent intent =  new Intent(Settings.ACTION_INTERNAL_STORAGE_SETTINGS);\n             startActivity(intent);\n\n      或者：\n\n        ACTION_MEMORY_CARD_SETTINGS    ：   // 跳转 存储设置 【记忆卡存储】\n\n             Intent intent =  new Intent(Settings.ACTION_MEMORY_CARD_SETTINGS);\n             startActivity(intent);\n\n\n17.    ACTION_LOCALE_SETTINGS  ：         // 跳转语言选择界面【仅有English 和 中文两种选择】\n\n              Intent intent =  new Intent(Settings.ACTION_LOCALE_SETTINGS);\n              startActivity(intent);\n\n\n18.     ACTION_LOCATION_SOURCE_SETTINGS :    //  跳转位置服务界面【管理已安装的应用程序。】\n\n              Intent intent =  new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\n              startActivity(intent);\n\n19.    ACTION_NETWORK_OPERATOR_SETTINGS ： // 跳转到 显示设置选择网络运营商。\n\n              Intent intent =  new Intent(Settings.ACTION_NETWORK_OPERATOR_SETTINGS);\n              startActivity(intent);\n\n20.    ACTION_NFCSHARING_SETTINGS  ：       // 显示NFC共享设置。 【API 14及以上】\n\n              Intent intent =  new Intent(Settings.ACTION_NFCSHARING_SETTINGS);\n              startActivity(intent);\n\n21.    ACTION_NFC_SETTINGS  ：           // 显示NFC设置。这显示了用户界面,允许NFC打开或关闭。  【API 16及以上】\n\n              Intent intent =  new Intent(Settings.ACTION_NFC_SETTINGS);\n              startActivity(intent);\n\n22.    ACTION_PRIVACY_SETTINGS ：       //  跳转到备份和重置界面\n\n              Intent intent =  new Intent(Settings.ACTION_PRIVACY_SETTINGS);\n              startActivity(intent);\n\n23.    ACTION_QUICK_LAUNCH_SETTINGS  ： // 跳转快速启动设置界面\n\n               Intent intent =  new Intent(Settings.ACTION_QUICK_LAUNCH_SETTINGS);\n               startActivity(intent);\n\n24.    ACTION_SEARCH_SETTINGS    ：    // 跳转到 搜索设置界面\n\n               Intent intent =  new Intent(Settings.ACTION_SEARCH_SETTINGS);\n               startActivity(intent);\n\n25.    ACTION_SECURITY_SETTINGS  ：     // 跳转到安全设置界面\n\n               Intent intent =  new Intent(Settings.ACTION_SECURITY_SETTINGS);\n               startActivity(intent);\n\n26.    ACTION_SETTINGS   ：                // 跳转到设置界面\n\n                Intent intent =  new Intent(Settings.ACTION_SETTINGS);\n                startActivity(intent);\n\n27.   ACTION_SOUND_SETTINGS                // 跳转到声音设置界面\n\n                 Intent intent =  new Intent(Settings.ACTION_SOUND_SETTINGS);\n                 startActivity(intent);\n\n28.   ACTION_SYNC_SETTINGS ：             // 跳转账户同步界面\n\n                Intent intent =  new Intent(Settings.ACTION_SYNC_SETTINGS);\n                startActivity(intent);\n\n29.     ACTION_USER_DICTIONARY_SETTINGS ：  //  跳转用户字典界面\n\n                Intent intent =  new Intent(Settings.ACTION_USER_DICTIONARY_SETTINGS);\n                startActivity(intent);\n\n30.     ACTION_WIFI_IP_SETTINGS  ：         // 跳转到IP设定界面\n\n                 Intent intent =  new Intent(Settings.ACTION_WIFI_IP_SETTINGS);\n                 startActivity(intent);\n\n31.     ACTION_WIFI_SETTINGS  ：            //  跳转Wifi列表设置\n\n                 Intent intent = new Intent(Settings.ACTION_WIFI_SETTINGS);\n                 startActivity(intent);\n```\n\n# 跳转方式\n``` java\n    Intent intent = new Intent(Settings.*********);\n    startActivity(intent);\n```\n\n# 举个例子\n方法都贴完了怎么能不举个栗子,撸码爽爽\n\n**MainActivity.java**\n```java\nimport android.content.Intent;\nimport android.provider.Settings;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(Settings.ACTION_LOCALE_SETTINGS);\n                startActivity(intent);\n            }\n        });\n    }\n}\n```\n\n**activity_main**\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"语言选择\"/>\n</android.support.constraint.ConstraintLayout>\n\n```\n\n# 实现效果\n![](https://ws1.sinaimg.cn/large/006tNc79ly1fnkw9y61gdj30u01hc0ty.jpg)\n\n",
        "slug": "AndroidIntentJumpToSysSettings",
        "published": 1,
        "updated": "2020-05-19T02:32:04.678Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1k000f52j9j6e6sslq",
        "content": "<p>我们的app支持18种语言,为了测试能很快的跳转到语言的切换页面.所以专门扒拉了一下intent跳转系统所有设置页面的方法,记录下来,以后忘记了可以直接查看.<br><a id=\"more\"></a><br>就是这么漂,就是这么酷炫~<br><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fnks2wr9xzg308w06ox6p.gif\" alt></p>\n<h1 id=\"android-provider-Settings\"><a href=\"#android-provider-Settings\" class=\"headerlink\" title=\"android.provider.Settings\"></a>android.provider.Settings</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.   ACTION_ACCESSIBILITY_SETTINGS ：    <span class=\"comment\">// 跳转系统的辅助功能界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.    ACTION_ADD_ACCOUNT ：               <span class=\"comment\">// 显示添加帐户创建一个新的帐户屏幕。【测试跳转到微信登录界面】</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_ADD_ACCOUNT);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>.   ACTION_AIRPLANE_MODE_SETTINGS：       <span class=\"comment\">// 飞行模式，无线网和网络设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_AIRPLANE_MODE_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">        或者：</span><br><span class=\"line\"></span><br><span class=\"line\">     ACTION_WIRELESS_SETTINGS  ：</span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_WIFI_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>.    ACTION_APN_SETTINGS：                 <span class=\"comment\">//  跳转 APN设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APN_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>.   【需要参数】 ACTION_APPLICATION_DETAILS_SETTINGS：   <span class=\"comment\">// 根据包名跳转到系统自带的应用程序信息界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Uri packageURI = Uri.parse(<span class=\"string\">\"package:\"</span> + <span class=\"string\">\"com.tencent.WBlog\"</span>);</span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,packageURI);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span>.    ACTION_APPLICATION_DEVELOPMENT_SETTINGS :  <span class=\"comment\">// 跳转开发人员选项界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7</span>.    ACTION_APPLICATION_SETTINGS ：      <span class=\"comment\">// 跳转应用程序列表界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">       或者：</span><br><span class=\"line\"></span><br><span class=\"line\">      ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS   <span class=\"comment\">// 跳转到应用程序界面【所有的】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">       或者：</span><br><span class=\"line\"></span><br><span class=\"line\">       ACTION_MANAGE_APPLICATIONS_SETTINGS  ：<span class=\"comment\">//  跳转 应用程序列表界面【已安装的】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8</span>.    ACTION_BLUETOOTH_SETTINGS  ：      <span class=\"comment\">// 跳转系统的蓝牙设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_BLUETOOTH_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9</span>.    ACTION_DATA_ROAMING_SETTINGS ：   <span class=\"comment\">//  跳转到移动网络设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span>.    ACTION_DATE_SETTINGS ：           <span class=\"comment\">//  跳转日期时间设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11</span>.    ACTION_DEVICE_INFO_SETTINGS  ：    <span class=\"comment\">// 跳转手机状态界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DEVICE_INFO_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12</span>.    ACTION_DISPLAY_SETTINGS  ：        <span class=\"comment\">// 跳转手机显示界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DISPLAY_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13</span>.    ACTION_DREAM_SETTINGS     【API <span class=\"number\">18</span>及以上 没测试】</span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DREAM_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">14</span>.    ACTION_INPUT_METHOD_SETTINGS ：    <span class=\"comment\">// 跳转语言和输入设备</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_INPUT_METHOD_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">15</span>.    ACTION_INPUT_METHOD_SUBTYPE_SETTINGS  【API <span class=\"number\">11</span>及以上】  <span class=\"comment\">//  跳转 语言选择界面 【多国语言选择】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">16</span>.    ACTION_INTERNAL_STORAGE_SETTINGS         <span class=\"comment\">// 跳转存储设置界面【内部存储】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_INTERNAL_STORAGE_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">      或者：</span><br><span class=\"line\"></span><br><span class=\"line\">        ACTION_MEMORY_CARD_SETTINGS    ：   <span class=\"comment\">// 跳转 存储设置 【记忆卡存储】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_MEMORY_CARD_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">17</span>.    ACTION_LOCALE_SETTINGS  ：         <span class=\"comment\">// 跳转语言选择界面【仅有English 和 中文两种选择】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_LOCALE_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">18</span>.     ACTION_LOCATION_SOURCE_SETTINGS :    <span class=\"comment\">//  跳转位置服务界面【管理已安装的应用程序。】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">19</span>.    ACTION_NETWORK_OPERATOR_SETTINGS ： <span class=\"comment\">// 跳转到 显示设置选择网络运营商。</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_NETWORK_OPERATOR_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">20</span>.    ACTION_NFCSHARING_SETTINGS  ：       <span class=\"comment\">// 显示NFC共享设置。 【API 14及以上】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_NFCSHARING_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">21</span>.    ACTION_NFC_SETTINGS  ：           <span class=\"comment\">// 显示NFC设置。这显示了用户界面,允许NFC打开或关闭。  【API 16及以上】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_NFC_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">22</span>.    ACTION_PRIVACY_SETTINGS ：       <span class=\"comment\">//  跳转到备份和重置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_PRIVACY_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">23</span>.    ACTION_QUICK_LAUNCH_SETTINGS  ： <span class=\"comment\">// 跳转快速启动设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_QUICK_LAUNCH_SETTINGS);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">24</span>.    ACTION_SEARCH_SETTINGS    ：    <span class=\"comment\">// 跳转到 搜索设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SEARCH_SETTINGS);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">25</span>.    ACTION_SECURITY_SETTINGS  ：     <span class=\"comment\">// 跳转到安全设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SECURITY_SETTINGS);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">26</span>.    ACTION_SETTINGS   ：                <span class=\"comment\">// 跳转到设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">27</span>.   ACTION_SOUND_SETTINGS                <span class=\"comment\">// 跳转到声音设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SOUND_SETTINGS);</span><br><span class=\"line\">                 startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">28</span>.   ACTION_SYNC_SETTINGS ：             <span class=\"comment\">// 跳转账户同步界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SYNC_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">29</span>.     ACTION_USER_DICTIONARY_SETTINGS ：  <span class=\"comment\">//  跳转用户字典界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_USER_DICTIONARY_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">30</span>.     ACTION_WIFI_IP_SETTINGS  ：         <span class=\"comment\">// 跳转到IP设定界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_WIFI_IP_SETTINGS);</span><br><span class=\"line\">                 startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">31</span>.     ACTION_WIFI_SETTINGS  ：            <span class=\"comment\">//  跳转Wifi列表设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_WIFI_SETTINGS);</span><br><span class=\"line\">                 startActivity(intent);</span><br></pre></td></tr></table></figure>\n<h1 id=\"跳转方式\"><a href=\"#跳转方式\" class=\"headerlink\" title=\"跳转方式\"></a>跳转方式</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Settings.*********);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<h1 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h1><p>方法都贴完了怎么能不举个栗子,撸码爽爽</p>\n<p><strong>MainActivity.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.provider.Settings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        findViewById(R.id.button).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_LOCALE_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>activity_main</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;android.support.constraint.ConstraintLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/button\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"语言选择\"</span>/&gt;</span><br><span class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h1><p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fnkw9y61gdj30u01hc0ty.jpg\" alt></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>我们的app支持18种语言,为了测试能很快的跳转到语言的切换页面.所以专门扒拉了一下intent跳转系统所有设置页面的方法,记录下来,以后忘记了可以直接查看.<br>",
        "more": "<br>就是这么漂,就是这么酷炫~<br><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fnks2wr9xzg308w06ox6p.gif\" alt></p>\n<h1 id=\"android-provider-Settings\"><a href=\"#android-provider-Settings\" class=\"headerlink\" title=\"android.provider.Settings\"></a>android.provider.Settings</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.   ACTION_ACCESSIBILITY_SETTINGS ：    <span class=\"comment\">// 跳转系统的辅助功能界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.    ACTION_ADD_ACCOUNT ：               <span class=\"comment\">// 显示添加帐户创建一个新的帐户屏幕。【测试跳转到微信登录界面】</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_ADD_ACCOUNT);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>.   ACTION_AIRPLANE_MODE_SETTINGS：       <span class=\"comment\">// 飞行模式，无线网和网络设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_AIRPLANE_MODE_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">        或者：</span><br><span class=\"line\"></span><br><span class=\"line\">     ACTION_WIRELESS_SETTINGS  ：</span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_WIFI_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>.    ACTION_APN_SETTINGS：                 <span class=\"comment\">//  跳转 APN设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APN_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>.   【需要参数】 ACTION_APPLICATION_DETAILS_SETTINGS：   <span class=\"comment\">// 根据包名跳转到系统自带的应用程序信息界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Uri packageURI = Uri.parse(<span class=\"string\">\"package:\"</span> + <span class=\"string\">\"com.tencent.WBlog\"</span>);</span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,packageURI);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span>.    ACTION_APPLICATION_DEVELOPMENT_SETTINGS :  <span class=\"comment\">// 跳转开发人员选项界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7</span>.    ACTION_APPLICATION_SETTINGS ：      <span class=\"comment\">// 跳转应用程序列表界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_APPLICATION_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">       或者：</span><br><span class=\"line\"></span><br><span class=\"line\">      ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS   <span class=\"comment\">// 跳转到应用程序界面【所有的】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">       或者：</span><br><span class=\"line\"></span><br><span class=\"line\">       ACTION_MANAGE_APPLICATIONS_SETTINGS  ：<span class=\"comment\">//  跳转 应用程序列表界面【已安装的】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8</span>.    ACTION_BLUETOOTH_SETTINGS  ：      <span class=\"comment\">// 跳转系统的蓝牙设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_BLUETOOTH_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9</span>.    ACTION_DATA_ROAMING_SETTINGS ：   <span class=\"comment\">//  跳转到移动网络设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">           Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);</span><br><span class=\"line\">           startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span>.    ACTION_DATE_SETTINGS ：           <span class=\"comment\">//  跳转日期时间设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DATA_ROAMING_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11</span>.    ACTION_DEVICE_INFO_SETTINGS  ：    <span class=\"comment\">// 跳转手机状态界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DEVICE_INFO_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12</span>.    ACTION_DISPLAY_SETTINGS  ：        <span class=\"comment\">// 跳转手机显示界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DISPLAY_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13</span>.    ACTION_DREAM_SETTINGS     【API <span class=\"number\">18</span>及以上 没测试】</span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_DREAM_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">14</span>.    ACTION_INPUT_METHOD_SETTINGS ：    <span class=\"comment\">// 跳转语言和输入设备</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_INPUT_METHOD_SETTINGS);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">15</span>.    ACTION_INPUT_METHOD_SUBTYPE_SETTINGS  【API <span class=\"number\">11</span>及以上】  <span class=\"comment\">//  跳转 语言选择界面 【多国语言选择】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">16</span>.    ACTION_INTERNAL_STORAGE_SETTINGS         <span class=\"comment\">// 跳转存储设置界面【内部存储】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_INTERNAL_STORAGE_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\">      或者：</span><br><span class=\"line\"></span><br><span class=\"line\">        ACTION_MEMORY_CARD_SETTINGS    ：   <span class=\"comment\">// 跳转 存储设置 【记忆卡存储】</span></span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_MEMORY_CARD_SETTINGS);</span><br><span class=\"line\">             startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">17</span>.    ACTION_LOCALE_SETTINGS  ：         <span class=\"comment\">// 跳转语言选择界面【仅有English 和 中文两种选择】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_LOCALE_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">18</span>.     ACTION_LOCATION_SOURCE_SETTINGS :    <span class=\"comment\">//  跳转位置服务界面【管理已安装的应用程序。】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">19</span>.    ACTION_NETWORK_OPERATOR_SETTINGS ： <span class=\"comment\">// 跳转到 显示设置选择网络运营商。</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_NETWORK_OPERATOR_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">20</span>.    ACTION_NFCSHARING_SETTINGS  ：       <span class=\"comment\">// 显示NFC共享设置。 【API 14及以上】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_NFCSHARING_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">21</span>.    ACTION_NFC_SETTINGS  ：           <span class=\"comment\">// 显示NFC设置。这显示了用户界面,允许NFC打开或关闭。  【API 16及以上】</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_NFC_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">22</span>.    ACTION_PRIVACY_SETTINGS ：       <span class=\"comment\">//  跳转到备份和重置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">              Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_PRIVACY_SETTINGS);</span><br><span class=\"line\">              startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">23</span>.    ACTION_QUICK_LAUNCH_SETTINGS  ： <span class=\"comment\">// 跳转快速启动设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_QUICK_LAUNCH_SETTINGS);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">24</span>.    ACTION_SEARCH_SETTINGS    ：    <span class=\"comment\">// 跳转到 搜索设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SEARCH_SETTINGS);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">25</span>.    ACTION_SECURITY_SETTINGS  ：     <span class=\"comment\">// 跳转到安全设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">               Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SECURITY_SETTINGS);</span><br><span class=\"line\">               startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">26</span>.    ACTION_SETTINGS   ：                <span class=\"comment\">// 跳转到设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">27</span>.   ACTION_SOUND_SETTINGS                <span class=\"comment\">// 跳转到声音设置界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SOUND_SETTINGS);</span><br><span class=\"line\">                 startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">28</span>.   ACTION_SYNC_SETTINGS ：             <span class=\"comment\">// 跳转账户同步界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_SYNC_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">29</span>.     ACTION_USER_DICTIONARY_SETTINGS ：  <span class=\"comment\">//  跳转用户字典界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_USER_DICTIONARY_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">30</span>.     ACTION_WIFI_IP_SETTINGS  ：         <span class=\"comment\">// 跳转到IP设定界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 Intent intent =  <span class=\"keyword\">new</span> Intent(Settings.ACTION_WIFI_IP_SETTINGS);</span><br><span class=\"line\">                 startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">31</span>.     ACTION_WIFI_SETTINGS  ：            <span class=\"comment\">//  跳转Wifi列表设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_WIFI_SETTINGS);</span><br><span class=\"line\">                 startActivity(intent);</span><br></pre></td></tr></table></figure>\n<h1 id=\"跳转方式\"><a href=\"#跳转方式\" class=\"headerlink\" title=\"跳转方式\"></a>跳转方式</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Settings.*********);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<h1 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h1><p>方法都贴完了怎么能不举个栗子,撸码爽爽</p>\n<p><strong>MainActivity.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.provider.Settings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        findViewById(R.id.button).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_LOCALE_SETTINGS);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>activity_main</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;android.support.constraint.ConstraintLayout</span><br><span class=\"line\">    xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/button\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"语言选择\"</span>/&gt;</span><br><span class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h1><p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1fnkw9y61gdj30u01hc0ty.jpg\" alt></p>"
      },
      {
        "title": "关于Android 7.0系统通知声音不能播放",
        "date": "2017-07-31T07:18:56.000Z",
        "_content": "\n由于沉迷于撸(nong)码(yao),很久没有更新过博客了,甚是惭愧.公司的项目比较高大上,主要面对老外开发,所以要适配各种版本的Android机,项目里有个闹钟提醒患者吃药的功能,但是这个功能获取系统通知铃声在Android 6.0以下好好的,换了个7.0的手机却不能播放出声音了.Android的锅,我们不背,我们不背![这里写图片描述](http://img.blog.csdn.net/20170727174234464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)...但是能解决的还是解决下吧.\n\n<!--more-->\n# 问题现象及问题定位\nNotificationCompat.Builder.setSound(URI)的时候,发现没有发出任何声音,但是却显示出了一个错误.\n![这里写图片描述](http://img.blog.csdn.net/20170727214940263?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 问题分析\n> 将系统铃声设置为系统通知铃声需要两个操作\n\n>> - 通过RingtoneManager.ACTION_RINGTONE_PICKER,获取\"/system/media/audio/notifications\"路径下的音乐的URI\n\n>> - 调用RingtoneManager.setActualDefaultRingtoneUri()，传入相应的uri和需要设置的铃声类型即可。\n\n如果你使用的是file: Uri,在targetSdkVersion>=24(Android 7.0以上)的时候是不适用的.因为Android 7.0的Uri会检查播放的声音是否是[file:Uri禁用值](https://commonsware.com/blog/2016/03/14/psa-file-scheme-ban-n-developer-preview.html)\n\n# 问题的解决方法\n\n只需要在调用声音的前面加一句**黑代码** 就可以完美解决\n\n``` java\n\tgrantUriPermission(\"com.android.systemui\", soundUri,\n                            Intent.FLAG_GRANT_READ_URI_PERMISSION);\n```\n 这里的soundUri就是你调取系统声音的Uri\n\n# 贴码\n\n说那么多没用的,不如撸一把代码.为了方便大家直接使用做了一个简单的demo,方便大家参考.\n\n也可以从github上直接下载下来,[RingStom](https://github.com/pvphero/RingStom)\n\n- 布局activity_main.xml文件\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    >\n\n    <Button\n        android:id=\"@+id/buttonRingtone\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"设置来电铃声\"\n        />\n    <Button\n        android:id=\"@+id/buttonAlarm\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"设置闹钟铃声\"\n        />\n    <Button\n        android:id=\"@+id/buttonNotification\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"设置通知铃声\"\n        />\n\n</LinearLayout>\n\n```\n\n- 相关的java代码\n\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    /* 3个按钮 */\n    private Button mButtonRingtone;\n    private Button mButtonAlarm;\n    private Button mButtonNotification;\n\n    /* 自定义的类型 */\n    public static final int CODE_RINGSTONE = 0;\n    public static final int CODE_ALARM = 1;\n    public static final int CODE_NOTIFICATION = 2;\n    /**\n     *  来电铃声文件夹\n     *  /system/media/audio/ringtones       系统来电铃声\n     *  /sdcard/music/ringtones             用户来电铃声\n     */\n    private String strRingtoneFolder = \"/system/media/audio/ringtones\";\n//  private String strRingtoneFolder = \"/sdcard/music/ringtones\";\n    /**\n     *  闹钟铃声文件夹\n     *  /system/media/audio/alarms          系统闹钟铃声\n     *  /sdcard/music/alarms                用户闹钟铃声\n     */\n    private String strAlarmFolder = \"/system/media/audio/alarms\";\n//  private String strAlarmFolder = \"/sdcard/music/alarms \";\n    /**\n     *  闹钟铃声文件夹\n     *  /system/media/audio/notifications       系统通知铃声\n     *  /sdcard/music/notifications             用户通知铃声\n     */\n    private String strNotificationFolder = \"/system/media/audio/notifications\";\n//  private String strNotificationFolder = \"/sdcard/music/notifications\";\n\n\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mButtonRingtone = (Button) findViewById(R.id.buttonRingtone);\n        mButtonAlarm = (Button) findViewById(R.id.buttonAlarm);\n        mButtonNotification = (Button) findViewById(R.id.buttonNotification);\n        mButtonRingtone.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (hasFolder(strRingtoneFolder)) {\n                    // 打开系统铃声设置\n                    Intent intent = new Intent(\n                            RingtoneManager.ACTION_RINGTONE_PICKER);\n                    // 类型为来电RINGTONE\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,\n                            RingtoneManager.TYPE_RINGTONE);\n                    // 设置显示的title\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,\n                            \"设置来电铃声\");\n                    // 当设置完成之后返回到当前的Activity\n                    startActivityForResult(intent, CODE_RINGSTONE);\n                }\n            }\n        });\n        mButtonAlarm.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (hasFolder(strAlarmFolder)) {\n                    // 打开系统铃声设置\n                    Intent intent = new Intent(\n                            RingtoneManager.ACTION_RINGTONE_PICKER);\n                    // 设置铃声类型和title\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,\n                            RingtoneManager.TYPE_ALARM);\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,\n                            \"设置闹钟铃声\");\n                    // 当设置完成之后返回到当前的Activity\n                    startActivityForResult(intent, CODE_ALARM);\n                }\n            }\n        });\n        mButtonNotification.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (hasFolder(strNotificationFolder)) {\n                    // 打开系统铃声设置\n                    Intent intent = new Intent(\n                            RingtoneManager.ACTION_RINGTONE_PICKER);\n                    // 设置铃声类型和title\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,\n                            RingtoneManager.TYPE_NOTIFICATION);\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,\n                            \" 设置通知铃声\");\n                    // 当设置完成之后返回到当前的Activity\n                    startActivityForResult(intent, CODE_NOTIFICATION);\n                }\n            }\n        });\n    }\n    /**\n     * 当设置铃声之后的回调函数\n     */\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode != RESULT_OK) {\n            return;\n        }\n        // 得到我们选择的铃声\n        Uri pickedUri = data\n                .getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);\n        if (pickedUri != null) {\n            switch (requestCode) {\n                case CODE_RINGSTONE:\n                    // 将我们选择的铃声设置成为默认来电铃声\n                    RingtoneManager.setActualDefaultRingtoneUri(this,\n                            RingtoneManager.TYPE_RINGTONE, pickedUri);\n                    break;\n                case CODE_ALARM:\n                    // 将我们选择的铃声设置成为默认闹钟铃声\n                    RingtoneManager.setActualDefaultRingtoneUri(this,\n                            RingtoneManager.TYPE_ALARM, pickedUri);\n                    break;\n                case CODE_NOTIFICATION:\n                    // 将我们选择的铃声设置成为默认通知铃声\n                    /**\n                     * 敲黑板:黑代码解决Android 7.0 调用系统通知无法播放声音的问题\n                     */\n                    grantUriPermission(\"com.android.systemui\", pickedUri,\n                            Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                    RingtoneManager.setActualDefaultRingtoneUri(this,\n                            RingtoneManager.TYPE_NOTIFICATION, pickedUri);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * 检测是否存在指定的文件夹,如果不存在则创建\n     *\n     * @param strFolder\n     *            文件夹路径\n     */\n    private boolean hasFolder(String strFolder) {\n        boolean btmp = false;\n        File f = new File(strFolder);\n        if (!f.exists()) {\n            if (f.mkdirs()) {\n                btmp = true;\n            } else {\n                btmp = false;\n            }\n        } else {\n            btmp = true;\n        }\n        return btmp;\n    }\n}\n```\n\n希望这篇博客可以带你们入坑~2333333",
        "source": "_posts/AndroidNotificationSound.md",
        "raw": "---\ntitle: 关于Android 7.0系统通知声音不能播放\ndate: 2017-07-31 15:18:56\ntags:\n- Android\ncategories:\n- Android开发笔记\n---\n\n由于沉迷于撸(nong)码(yao),很久没有更新过博客了,甚是惭愧.公司的项目比较高大上,主要面对老外开发,所以要适配各种版本的Android机,项目里有个闹钟提醒患者吃药的功能,但是这个功能获取系统通知铃声在Android 6.0以下好好的,换了个7.0的手机却不能播放出声音了.Android的锅,我们不背,我们不背![这里写图片描述](http://img.blog.csdn.net/20170727174234464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)...但是能解决的还是解决下吧.\n\n<!--more-->\n# 问题现象及问题定位\nNotificationCompat.Builder.setSound(URI)的时候,发现没有发出任何声音,但是却显示出了一个错误.\n![这里写图片描述](http://img.blog.csdn.net/20170727214940263?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 问题分析\n> 将系统铃声设置为系统通知铃声需要两个操作\n\n>> - 通过RingtoneManager.ACTION_RINGTONE_PICKER,获取\"/system/media/audio/notifications\"路径下的音乐的URI\n\n>> - 调用RingtoneManager.setActualDefaultRingtoneUri()，传入相应的uri和需要设置的铃声类型即可。\n\n如果你使用的是file: Uri,在targetSdkVersion>=24(Android 7.0以上)的时候是不适用的.因为Android 7.0的Uri会检查播放的声音是否是[file:Uri禁用值](https://commonsware.com/blog/2016/03/14/psa-file-scheme-ban-n-developer-preview.html)\n\n# 问题的解决方法\n\n只需要在调用声音的前面加一句**黑代码** 就可以完美解决\n\n``` java\n\tgrantUriPermission(\"com.android.systemui\", soundUri,\n                            Intent.FLAG_GRANT_READ_URI_PERMISSION);\n```\n 这里的soundUri就是你调取系统声音的Uri\n\n# 贴码\n\n说那么多没用的,不如撸一把代码.为了方便大家直接使用做了一个简单的demo,方便大家参考.\n\n也可以从github上直接下载下来,[RingStom](https://github.com/pvphero/RingStom)\n\n- 布局activity_main.xml文件\n``` java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    >\n\n    <Button\n        android:id=\"@+id/buttonRingtone\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"设置来电铃声\"\n        />\n    <Button\n        android:id=\"@+id/buttonAlarm\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"设置闹钟铃声\"\n        />\n    <Button\n        android:id=\"@+id/buttonNotification\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"设置通知铃声\"\n        />\n\n</LinearLayout>\n\n```\n\n- 相关的java代码\n\n``` java\npublic class MainActivity extends AppCompatActivity {\n\n    /* 3个按钮 */\n    private Button mButtonRingtone;\n    private Button mButtonAlarm;\n    private Button mButtonNotification;\n\n    /* 自定义的类型 */\n    public static final int CODE_RINGSTONE = 0;\n    public static final int CODE_ALARM = 1;\n    public static final int CODE_NOTIFICATION = 2;\n    /**\n     *  来电铃声文件夹\n     *  /system/media/audio/ringtones       系统来电铃声\n     *  /sdcard/music/ringtones             用户来电铃声\n     */\n    private String strRingtoneFolder = \"/system/media/audio/ringtones\";\n//  private String strRingtoneFolder = \"/sdcard/music/ringtones\";\n    /**\n     *  闹钟铃声文件夹\n     *  /system/media/audio/alarms          系统闹钟铃声\n     *  /sdcard/music/alarms                用户闹钟铃声\n     */\n    private String strAlarmFolder = \"/system/media/audio/alarms\";\n//  private String strAlarmFolder = \"/sdcard/music/alarms \";\n    /**\n     *  闹钟铃声文件夹\n     *  /system/media/audio/notifications       系统通知铃声\n     *  /sdcard/music/notifications             用户通知铃声\n     */\n    private String strNotificationFolder = \"/system/media/audio/notifications\";\n//  private String strNotificationFolder = \"/sdcard/music/notifications\";\n\n\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mButtonRingtone = (Button) findViewById(R.id.buttonRingtone);\n        mButtonAlarm = (Button) findViewById(R.id.buttonAlarm);\n        mButtonNotification = (Button) findViewById(R.id.buttonNotification);\n        mButtonRingtone.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (hasFolder(strRingtoneFolder)) {\n                    // 打开系统铃声设置\n                    Intent intent = new Intent(\n                            RingtoneManager.ACTION_RINGTONE_PICKER);\n                    // 类型为来电RINGTONE\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,\n                            RingtoneManager.TYPE_RINGTONE);\n                    // 设置显示的title\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,\n                            \"设置来电铃声\");\n                    // 当设置完成之后返回到当前的Activity\n                    startActivityForResult(intent, CODE_RINGSTONE);\n                }\n            }\n        });\n        mButtonAlarm.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (hasFolder(strAlarmFolder)) {\n                    // 打开系统铃声设置\n                    Intent intent = new Intent(\n                            RingtoneManager.ACTION_RINGTONE_PICKER);\n                    // 设置铃声类型和title\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,\n                            RingtoneManager.TYPE_ALARM);\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,\n                            \"设置闹钟铃声\");\n                    // 当设置完成之后返回到当前的Activity\n                    startActivityForResult(intent, CODE_ALARM);\n                }\n            }\n        });\n        mButtonNotification.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (hasFolder(strNotificationFolder)) {\n                    // 打开系统铃声设置\n                    Intent intent = new Intent(\n                            RingtoneManager.ACTION_RINGTONE_PICKER);\n                    // 设置铃声类型和title\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,\n                            RingtoneManager.TYPE_NOTIFICATION);\n                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,\n                            \" 设置通知铃声\");\n                    // 当设置完成之后返回到当前的Activity\n                    startActivityForResult(intent, CODE_NOTIFICATION);\n                }\n            }\n        });\n    }\n    /**\n     * 当设置铃声之后的回调函数\n     */\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode != RESULT_OK) {\n            return;\n        }\n        // 得到我们选择的铃声\n        Uri pickedUri = data\n                .getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);\n        if (pickedUri != null) {\n            switch (requestCode) {\n                case CODE_RINGSTONE:\n                    // 将我们选择的铃声设置成为默认来电铃声\n                    RingtoneManager.setActualDefaultRingtoneUri(this,\n                            RingtoneManager.TYPE_RINGTONE, pickedUri);\n                    break;\n                case CODE_ALARM:\n                    // 将我们选择的铃声设置成为默认闹钟铃声\n                    RingtoneManager.setActualDefaultRingtoneUri(this,\n                            RingtoneManager.TYPE_ALARM, pickedUri);\n                    break;\n                case CODE_NOTIFICATION:\n                    // 将我们选择的铃声设置成为默认通知铃声\n                    /**\n                     * 敲黑板:黑代码解决Android 7.0 调用系统通知无法播放声音的问题\n                     */\n                    grantUriPermission(\"com.android.systemui\", pickedUri,\n                            Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                    RingtoneManager.setActualDefaultRingtoneUri(this,\n                            RingtoneManager.TYPE_NOTIFICATION, pickedUri);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * 检测是否存在指定的文件夹,如果不存在则创建\n     *\n     * @param strFolder\n     *            文件夹路径\n     */\n    private boolean hasFolder(String strFolder) {\n        boolean btmp = false;\n        File f = new File(strFolder);\n        if (!f.exists()) {\n            if (f.mkdirs()) {\n                btmp = true;\n            } else {\n                btmp = false;\n            }\n        } else {\n            btmp = true;\n        }\n        return btmp;\n    }\n}\n```\n\n希望这篇博客可以带你们入坑~2333333",
        "slug": "AndroidNotificationSound",
        "published": 1,
        "updated": "2020-05-19T02:32:04.679Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj1k000g52j9zvwsa8vq",
        "content": "<p>由于沉迷于撸(nong)码(yao),很久没有更新过博客了,甚是惭愧.公司的项目比较高大上,主要面对老外开发,所以要适配各种版本的Android机,项目里有个闹钟提醒患者吃药的功能,但是这个功能获取系统通知铃声在Android 6.0以下好好的,换了个7.0的手机却不能播放出声音了.Android的锅,我们不背,我们不背<img src=\"http://img.blog.csdn.net/20170727174234464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">…但是能解决的还是解决下吧.</p>\n<a id=\"more\"></a>\n<h1 id=\"问题现象及问题定位\"><a href=\"#问题现象及问题定位\" class=\"headerlink\" title=\"问题现象及问题定位\"></a>问题现象及问题定位</h1><p>NotificationCompat.Builder.setSound(URI)的时候,发现没有发出任何声音,但是却显示出了一个错误.<br><img src=\"http://img.blog.csdn.net/20170727214940263?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><blockquote>\n<p>将系统铃声设置为系统通知铃声需要两个操作</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>通过RingtoneManager.ACTION_RINGTONE_PICKER,获取”/system/media/audio/notifications”路径下的音乐的URI</li>\n</ul>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>调用RingtoneManager.setActualDefaultRingtoneUri()，传入相应的uri和需要设置的铃声类型即可。</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>如果你使用的是file: Uri,在targetSdkVersion&gt;=24(Android 7.0以上)的时候是不适用的.因为Android 7.0的Uri会检查播放的声音是否是<a href=\"https://commonsware.com/blog/2016/03/14/psa-file-scheme-ban-n-developer-preview.html\" target=\"_blank\" rel=\"noopener\">file:Uri禁用值</a></p>\n<h1 id=\"问题的解决方法\"><a href=\"#问题的解决方法\" class=\"headerlink\" title=\"问题的解决方法\"></a>问题的解决方法</h1><p>只需要在调用声音的前面加一句<strong>黑代码</strong> 就可以完美解决</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grantUriPermission(<span class=\"string\">\"com.android.systemui\"</span>, soundUri,</span><br><span class=\"line\">                           Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br></pre></td></tr></table></figure>\n<p> 这里的soundUri就是你调取系统声音的Uri</p>\n<h1 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h1><p>说那么多没用的,不如撸一把代码.为了方便大家直接使用做了一个简单的demo,方便大家参考.</p>\n<p>也可以从github上直接下载下来,<a href=\"https://github.com/pvphero/RingStom\" target=\"_blank\" rel=\"noopener\">RingStom</a></p>\n<ul>\n<li><p>布局activity_main.xml文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">\"vertical\"</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/buttonRingtone\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"设置来电铃声\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/buttonAlarm\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"设置闹钟铃声\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/buttonNotification\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"设置通知铃声\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>相关的java代码</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 3个按钮 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButtonRingtone;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButtonAlarm;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButtonNotification;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 自定义的类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CODE_RINGSTONE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CODE_ALARM = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CODE_NOTIFICATION = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  来电铃声文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *  /system/media/audio/ringtones       系统来电铃声</span></span><br><span class=\"line\"><span class=\"comment\">     *  /sdcard/music/ringtones             用户来电铃声</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String strRingtoneFolder = <span class=\"string\">\"/system/media/audio/ringtones\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//  private String strRingtoneFolder = \"/sdcard/music/ringtones\";</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  闹钟铃声文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *  /system/media/audio/alarms          系统闹钟铃声</span></span><br><span class=\"line\"><span class=\"comment\">     *  /sdcard/music/alarms                用户闹钟铃声</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String strAlarmFolder = <span class=\"string\">\"/system/media/audio/alarms\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//  private String strAlarmFolder = \"/sdcard/music/alarms \";</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  闹钟铃声文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *  /system/media/audio/notifications       系统通知铃声</span></span><br><span class=\"line\"><span class=\"comment\">     *  /sdcard/music/notifications             用户通知铃声</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String strNotificationFolder = <span class=\"string\">\"/system/media/audio/notifications\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//  private String strNotificationFolder = \"/sdcard/music/notifications\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Called when the activity is first created. */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        mButtonRingtone = (Button) findViewById(R.id.buttonRingtone);</span><br><span class=\"line\">        mButtonAlarm = (Button) findViewById(R.id.buttonAlarm);</span><br><span class=\"line\">        mButtonNotification = (Button) findViewById(R.id.buttonNotification);</span><br><span class=\"line\">        mButtonRingtone.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasFolder(strRingtoneFolder)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 打开系统铃声设置</span></span><br><span class=\"line\">                    Intent intent = <span class=\"keyword\">new</span> Intent(</span><br><span class=\"line\">                            RingtoneManager.ACTION_RINGTONE_PICKER);</span><br><span class=\"line\">                    <span class=\"comment\">// 类型为来电RINGTONE</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,</span><br><span class=\"line\">                            RingtoneManager.TYPE_RINGTONE);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置显示的title</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,</span><br><span class=\"line\">                            <span class=\"string\">\"设置来电铃声\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 当设置完成之后返回到当前的Activity</span></span><br><span class=\"line\">                    startActivityForResult(intent, CODE_RINGSTONE);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        mButtonAlarm.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasFolder(strAlarmFolder)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 打开系统铃声设置</span></span><br><span class=\"line\">                    Intent intent = <span class=\"keyword\">new</span> Intent(</span><br><span class=\"line\">                            RingtoneManager.ACTION_RINGTONE_PICKER);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置铃声类型和title</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,</span><br><span class=\"line\">                            RingtoneManager.TYPE_ALARM);</span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,</span><br><span class=\"line\">                            <span class=\"string\">\"设置闹钟铃声\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 当设置完成之后返回到当前的Activity</span></span><br><span class=\"line\">                    startActivityForResult(intent, CODE_ALARM);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        mButtonNotification.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasFolder(strNotificationFolder)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 打开系统铃声设置</span></span><br><span class=\"line\">                    Intent intent = <span class=\"keyword\">new</span> Intent(</span><br><span class=\"line\">                            RingtoneManager.ACTION_RINGTONE_PICKER);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置铃声类型和title</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,</span><br><span class=\"line\">                            RingtoneManager.TYPE_NOTIFICATION);</span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,</span><br><span class=\"line\">                            <span class=\"string\">\" 设置通知铃声\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 当设置完成之后返回到当前的Activity</span></span><br><span class=\"line\">                    startActivityForResult(intent, CODE_NOTIFICATION);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当设置铃声之后的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 得到我们选择的铃声</span></span><br><span class=\"line\">        Uri pickedUri = data</span><br><span class=\"line\">                .getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pickedUri != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (requestCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CODE_RINGSTONE:</span><br><span class=\"line\">                    <span class=\"comment\">// 将我们选择的铃声设置成为默认来电铃声</span></span><br><span class=\"line\">                    RingtoneManager.setActualDefaultRingtoneUri(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            RingtoneManager.TYPE_RINGTONE, pickedUri);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CODE_ALARM:</span><br><span class=\"line\">                    <span class=\"comment\">// 将我们选择的铃声设置成为默认闹钟铃声</span></span><br><span class=\"line\">                    RingtoneManager.setActualDefaultRingtoneUri(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            RingtoneManager.TYPE_ALARM, pickedUri);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CODE_NOTIFICATION:</span><br><span class=\"line\">                    <span class=\"comment\">// 将我们选择的铃声设置成为默认通知铃声</span></span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 敲黑板:黑代码解决Android 7.0 调用系统通知无法播放声音的问题</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    grantUriPermission(<span class=\"string\">\"com.android.systemui\"</span>, pickedUri,</span><br><span class=\"line\">                            Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\">                    RingtoneManager.setActualDefaultRingtoneUri(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            RingtoneManager.TYPE_NOTIFICATION, pickedUri);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检测是否存在指定的文件夹,如果不存在则创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> strFolder</span></span><br><span class=\"line\"><span class=\"comment\">     *            文件夹路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasFolder</span><span class=\"params\">(String strFolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> btmp = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        File f = <span class=\"keyword\">new</span> File(strFolder);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!f.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.mkdirs()) &#123;</span><br><span class=\"line\">                btmp = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                btmp = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            btmp = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> btmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>希望这篇博客可以带你们入坑~2333333</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>由于沉迷于撸(nong)码(yao),很久没有更新过博客了,甚是惭愧.公司的项目比较高大上,主要面对老外开发,所以要适配各种版本的Android机,项目里有个闹钟提醒患者吃药的功能,但是这个功能获取系统通知铃声在Android 6.0以下好好的,换了个7.0的手机却不能播放出声音了.Android的锅,我们不背,我们不背<img src=\"http://img.blog.csdn.net/20170727174234464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">…但是能解决的还是解决下吧.</p>",
        "more": "<h1 id=\"问题现象及问题定位\"><a href=\"#问题现象及问题定位\" class=\"headerlink\" title=\"问题现象及问题定位\"></a>问题现象及问题定位</h1><p>NotificationCompat.Builder.setSound(URI)的时候,发现没有发出任何声音,但是却显示出了一个错误.<br><img src=\"http://img.blog.csdn.net/20170727214940263?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><blockquote>\n<p>将系统铃声设置为系统通知铃声需要两个操作</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>通过RingtoneManager.ACTION_RINGTONE_PICKER,获取”/system/media/audio/notifications”路径下的音乐的URI</li>\n</ul>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>调用RingtoneManager.setActualDefaultRingtoneUri()，传入相应的uri和需要设置的铃声类型即可。</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>如果你使用的是file: Uri,在targetSdkVersion&gt;=24(Android 7.0以上)的时候是不适用的.因为Android 7.0的Uri会检查播放的声音是否是<a href=\"https://commonsware.com/blog/2016/03/14/psa-file-scheme-ban-n-developer-preview.html\" target=\"_blank\" rel=\"noopener\">file:Uri禁用值</a></p>\n<h1 id=\"问题的解决方法\"><a href=\"#问题的解决方法\" class=\"headerlink\" title=\"问题的解决方法\"></a>问题的解决方法</h1><p>只需要在调用声音的前面加一句<strong>黑代码</strong> 就可以完美解决</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grantUriPermission(<span class=\"string\">\"com.android.systemui\"</span>, soundUri,</span><br><span class=\"line\">                           Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br></pre></td></tr></table></figure>\n<p> 这里的soundUri就是你调取系统声音的Uri</p>\n<h1 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h1><p>说那么多没用的,不如撸一把代码.为了方便大家直接使用做了一个简单的demo,方便大家参考.</p>\n<p>也可以从github上直接下载下来,<a href=\"https://github.com/pvphero/RingStom\" target=\"_blank\" rel=\"noopener\">RingStom</a></p>\n<ul>\n<li><p>布局activity_main.xml文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span>?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">\"vertical\"</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/buttonRingtone\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"设置来电铃声\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/buttonAlarm\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"设置闹钟铃声\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/buttonNotification\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:text=<span class=\"string\">\"设置通知铃声\"</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>相关的java代码</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 3个按钮 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButtonRingtone;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButtonAlarm;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mButtonNotification;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 自定义的类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CODE_RINGSTONE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CODE_ALARM = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CODE_NOTIFICATION = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  来电铃声文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *  /system/media/audio/ringtones       系统来电铃声</span></span><br><span class=\"line\"><span class=\"comment\">     *  /sdcard/music/ringtones             用户来电铃声</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String strRingtoneFolder = <span class=\"string\">\"/system/media/audio/ringtones\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//  private String strRingtoneFolder = \"/sdcard/music/ringtones\";</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  闹钟铃声文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *  /system/media/audio/alarms          系统闹钟铃声</span></span><br><span class=\"line\"><span class=\"comment\">     *  /sdcard/music/alarms                用户闹钟铃声</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String strAlarmFolder = <span class=\"string\">\"/system/media/audio/alarms\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//  private String strAlarmFolder = \"/sdcard/music/alarms \";</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  闹钟铃声文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *  /system/media/audio/notifications       系统通知铃声</span></span><br><span class=\"line\"><span class=\"comment\">     *  /sdcard/music/notifications             用户通知铃声</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String strNotificationFolder = <span class=\"string\">\"/system/media/audio/notifications\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//  private String strNotificationFolder = \"/sdcard/music/notifications\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Called when the activity is first created. */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        mButtonRingtone = (Button) findViewById(R.id.buttonRingtone);</span><br><span class=\"line\">        mButtonAlarm = (Button) findViewById(R.id.buttonAlarm);</span><br><span class=\"line\">        mButtonNotification = (Button) findViewById(R.id.buttonNotification);</span><br><span class=\"line\">        mButtonRingtone.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasFolder(strRingtoneFolder)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 打开系统铃声设置</span></span><br><span class=\"line\">                    Intent intent = <span class=\"keyword\">new</span> Intent(</span><br><span class=\"line\">                            RingtoneManager.ACTION_RINGTONE_PICKER);</span><br><span class=\"line\">                    <span class=\"comment\">// 类型为来电RINGTONE</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,</span><br><span class=\"line\">                            RingtoneManager.TYPE_RINGTONE);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置显示的title</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,</span><br><span class=\"line\">                            <span class=\"string\">\"设置来电铃声\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 当设置完成之后返回到当前的Activity</span></span><br><span class=\"line\">                    startActivityForResult(intent, CODE_RINGSTONE);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        mButtonAlarm.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasFolder(strAlarmFolder)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 打开系统铃声设置</span></span><br><span class=\"line\">                    Intent intent = <span class=\"keyword\">new</span> Intent(</span><br><span class=\"line\">                            RingtoneManager.ACTION_RINGTONE_PICKER);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置铃声类型和title</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,</span><br><span class=\"line\">                            RingtoneManager.TYPE_ALARM);</span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,</span><br><span class=\"line\">                            <span class=\"string\">\"设置闹钟铃声\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 当设置完成之后返回到当前的Activity</span></span><br><span class=\"line\">                    startActivityForResult(intent, CODE_ALARM);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        mButtonNotification.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasFolder(strNotificationFolder)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 打开系统铃声设置</span></span><br><span class=\"line\">                    Intent intent = <span class=\"keyword\">new</span> Intent(</span><br><span class=\"line\">                            RingtoneManager.ACTION_RINGTONE_PICKER);</span><br><span class=\"line\">                    <span class=\"comment\">// 设置铃声类型和title</span></span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE,</span><br><span class=\"line\">                            RingtoneManager.TYPE_NOTIFICATION);</span><br><span class=\"line\">                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE,</span><br><span class=\"line\">                            <span class=\"string\">\" 设置通知铃声\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 当设置完成之后返回到当前的Activity</span></span><br><span class=\"line\">                    startActivityForResult(intent, CODE_NOTIFICATION);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当设置铃声之后的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 得到我们选择的铃声</span></span><br><span class=\"line\">        Uri pickedUri = data</span><br><span class=\"line\">                .getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pickedUri != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (requestCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CODE_RINGSTONE:</span><br><span class=\"line\">                    <span class=\"comment\">// 将我们选择的铃声设置成为默认来电铃声</span></span><br><span class=\"line\">                    RingtoneManager.setActualDefaultRingtoneUri(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            RingtoneManager.TYPE_RINGTONE, pickedUri);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CODE_ALARM:</span><br><span class=\"line\">                    <span class=\"comment\">// 将我们选择的铃声设置成为默认闹钟铃声</span></span><br><span class=\"line\">                    RingtoneManager.setActualDefaultRingtoneUri(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            RingtoneManager.TYPE_ALARM, pickedUri);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> CODE_NOTIFICATION:</span><br><span class=\"line\">                    <span class=\"comment\">// 将我们选择的铃声设置成为默认通知铃声</span></span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 敲黑板:黑代码解决Android 7.0 调用系统通知无法播放声音的问题</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    grantUriPermission(<span class=\"string\">\"com.android.systemui\"</span>, pickedUri,</span><br><span class=\"line\">                            Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\">                    RingtoneManager.setActualDefaultRingtoneUri(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            RingtoneManager.TYPE_NOTIFICATION, pickedUri);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检测是否存在指定的文件夹,如果不存在则创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> strFolder</span></span><br><span class=\"line\"><span class=\"comment\">     *            文件夹路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasFolder</span><span class=\"params\">(String strFolder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> btmp = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        File f = <span class=\"keyword\">new</span> File(strFolder);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!f.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.mkdirs()) &#123;</span><br><span class=\"line\">                btmp = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                btmp = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            btmp = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> btmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>希望这篇博客可以带你们入坑~2333333</p>"
      },
      {
        "title": "Mac下关于百度开发者中心认领应用",
        "date": "2016-07-11T09:18:21.000Z",
        "_content": "\n# 问题的产生\n发布一款应用有时因为签名问题,难免会遇到让开发者认领应用的情况.比如说我们公司发布的一款应用发布到360应用市场上,但是却被百度抓包,在我们把应用提交到百度应用平台之前,已经发布...这个时候就需要我们去找回应用了.认领应用其实很简单,无非就是给空包签名.但是有很琐碎,干脆记录下来,以后在遇到直接cv~~\n<!--more-->\n# 怎么认领\n- 提交需认领应用的PackageName。\n- 下载应用中心提供的未签名包，并将与待认领应用一致的签名写入该包中。\n- 上传完成签名的安装包进行校验。\n\n# 怎么签名\n\n```java\njarsigner -verbose -keystore your_keystore -signedjar path_of_signed_apk  path_of_unsigned_apk your_alias\n```\n**更改上面引用中的值**\n\n - your_keystore 你的这个应用签名的keystore的位置\n - path_of_signed_apk  签名好的空包存放位置\n - path_of_unsigned_apk 代签名的空包的位置\n - your_alias 你的keystore的别名\n \n # 举例\n **比如我的一个应用**\n``` \njarsigner -verbose -keystore /Users/seekkou/Desktop/android_studio_key.jks -signedjar /Users/seekkou/Desktop/Baidu_Claim_signed.apk /Users/seekkou/Desktop/Baidu_Claim_unsigned.apk key\n```\n\n参考:[应用认领那些事](http://droidyue.com/blog/2014/12/14/android-yingyong-renling/?utm_source=tuicool&utm_medium=referral)\n",
        "source": "_posts/ClaimApp.md",
        "raw": "---\ntitle: Mac下关于百度开发者中心认领应用\ndate: 2016-07-11 17:18:21\ntags:\n- Android \ncategories:\n- Android开发笔记\n---\n\n# 问题的产生\n发布一款应用有时因为签名问题,难免会遇到让开发者认领应用的情况.比如说我们公司发布的一款应用发布到360应用市场上,但是却被百度抓包,在我们把应用提交到百度应用平台之前,已经发布...这个时候就需要我们去找回应用了.认领应用其实很简单,无非就是给空包签名.但是有很琐碎,干脆记录下来,以后在遇到直接cv~~\n<!--more-->\n# 怎么认领\n- 提交需认领应用的PackageName。\n- 下载应用中心提供的未签名包，并将与待认领应用一致的签名写入该包中。\n- 上传完成签名的安装包进行校验。\n\n# 怎么签名\n\n```java\njarsigner -verbose -keystore your_keystore -signedjar path_of_signed_apk  path_of_unsigned_apk your_alias\n```\n**更改上面引用中的值**\n\n - your_keystore 你的这个应用签名的keystore的位置\n - path_of_signed_apk  签名好的空包存放位置\n - path_of_unsigned_apk 代签名的空包的位置\n - your_alias 你的keystore的别名\n \n # 举例\n **比如我的一个应用**\n``` \njarsigner -verbose -keystore /Users/seekkou/Desktop/android_studio_key.jks -signedjar /Users/seekkou/Desktop/Baidu_Claim_signed.apk /Users/seekkou/Desktop/Baidu_Claim_unsigned.apk key\n```\n\n参考:[应用认领那些事](http://droidyue.com/blog/2014/12/14/android-yingyong-renling/?utm_source=tuicool&utm_medium=referral)\n",
        "slug": "ClaimApp",
        "published": 1,
        "updated": "2020-05-19T02:32:04.679Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2e000h52j97p3roixv",
        "content": "<h1 id=\"问题的产生\"><a href=\"#问题的产生\" class=\"headerlink\" title=\"问题的产生\"></a>问题的产生</h1><p>发布一款应用有时因为签名问题,难免会遇到让开发者认领应用的情况.比如说我们公司发布的一款应用发布到360应用市场上,但是却被百度抓包,在我们把应用提交到百度应用平台之前,已经发布…这个时候就需要我们去找回应用了.认领应用其实很简单,无非就是给空包签名.但是有很琐碎,干脆记录下来,以后在遇到直接cv~~<br><a id=\"more\"></a></p>\n<h1 id=\"怎么认领\"><a href=\"#怎么认领\" class=\"headerlink\" title=\"怎么认领\"></a>怎么认领</h1><ul>\n<li>提交需认领应用的PackageName。</li>\n<li>下载应用中心提供的未签名包，并将与待认领应用一致的签名写入该包中。</li>\n<li>上传完成签名的安装包进行校验。</li>\n</ul>\n<h1 id=\"怎么签名\"><a href=\"#怎么签名\" class=\"headerlink\" title=\"怎么签名\"></a>怎么签名</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore your_keystore -signedjar path_of_signed_apk  path_of_unsigned_apk your_alias</span><br></pre></td></tr></table></figure>\n<p><strong>更改上面引用中的值</strong></p>\n<ul>\n<li>your_keystore 你的这个应用签名的keystore的位置</li>\n<li>path_of_signed_apk  签名好的空包存放位置</li>\n<li>path_of_unsigned_apk 代签名的空包的位置</li>\n<li><p>your_alias 你的keystore的别名</p>\n<h1 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h1><p><strong>比如我的一个应用</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore /Users/seekkou/Desktop/android_studio_key.jks -signedjar /Users/seekkou/Desktop/Baidu_Claim_signed.apk /Users/seekkou/Desktop/Baidu_Claim_unsigned.apk key</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考:<a href=\"http://droidyue.com/blog/2014/12/14/android-yingyong-renling/?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">应用认领那些事</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"问题的产生\"><a href=\"#问题的产生\" class=\"headerlink\" title=\"问题的产生\"></a>问题的产生</h1><p>发布一款应用有时因为签名问题,难免会遇到让开发者认领应用的情况.比如说我们公司发布的一款应用发布到360应用市场上,但是却被百度抓包,在我们把应用提交到百度应用平台之前,已经发布…这个时候就需要我们去找回应用了.认领应用其实很简单,无非就是给空包签名.但是有很琐碎,干脆记录下来,以后在遇到直接cv~~<br>",
        "more": "</p>\n<h1 id=\"怎么认领\"><a href=\"#怎么认领\" class=\"headerlink\" title=\"怎么认领\"></a>怎么认领</h1><ul>\n<li>提交需认领应用的PackageName。</li>\n<li>下载应用中心提供的未签名包，并将与待认领应用一致的签名写入该包中。</li>\n<li>上传完成签名的安装包进行校验。</li>\n</ul>\n<h1 id=\"怎么签名\"><a href=\"#怎么签名\" class=\"headerlink\" title=\"怎么签名\"></a>怎么签名</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore your_keystore -signedjar path_of_signed_apk  path_of_unsigned_apk your_alias</span><br></pre></td></tr></table></figure>\n<p><strong>更改上面引用中的值</strong></p>\n<ul>\n<li>your_keystore 你的这个应用签名的keystore的位置</li>\n<li>path_of_signed_apk  签名好的空包存放位置</li>\n<li>path_of_unsigned_apk 代签名的空包的位置</li>\n<li><p>your_alias 你的keystore的别名</p>\n<h1 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h1><p><strong>比如我的一个应用</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore /Users/seekkou/Desktop/android_studio_key.jks -signedjar /Users/seekkou/Desktop/Baidu_Claim_signed.apk /Users/seekkou/Desktop/Baidu_Claim_unsigned.apk key</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考:<a href=\"http://droidyue.com/blog/2014/12/14/android-yingyong-renling/?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">应用认领那些事</a></p>"
      },
      {
        "title": "随笔",
        "date": "2018-01-25T01:33:15.000Z",
        "_content": "向上的路从不拥挤，是你选择了安逸\n<!--more-->\n![](https://dn-coding-net-production-pp.qbox.me/6d0ca3b6-1bf2-4705-9be7-cd6074337cb9.jpg)\n\n",
        "source": "_posts/GoodGoodStudyDayDayUp.md",
        "raw": "---\ntitle: 随笔\ndate: 2018-01-25 09:33:15\ntags:\n---\n向上的路从不拥挤，是你选择了安逸\n<!--more-->\n![](https://dn-coding-net-production-pp.qbox.me/6d0ca3b6-1bf2-4705-9be7-cd6074337cb9.jpg)\n\n",
        "slug": "GoodGoodStudyDayDayUp",
        "published": 1,
        "updated": "2020-05-19T02:32:04.680Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2l000k52j98rb8vrqc",
        "content": "<p>向上的路从不拥挤，是你选择了安逸<br><a id=\"more\"></a><br><img src=\"https://dn-coding-net-production-pp.qbox.me/6d0ca3b6-1bf2-4705-9be7-cd6074337cb9.jpg\" alt></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>向上的路从不拥挤，是你选择了安逸<br>",
        "more": "<br><img src=\"https://dn-coding-net-production-pp.qbox.me/6d0ca3b6-1bf2-4705-9be7-cd6074337cb9.jpg\" alt></p>"
      },
      {
        "title": "JDK7 Collections.sort()方法报错分析",
        "date": "2016-12-06T08:53:38.000Z",
        "_content": "\njava.lang.IllegalArgumentException: Comparison method violates its general contract!\n<!--more-->\n\n# 问题背景\n## 起因\n前些天测试给提了一个项目里的bug,在查看项目的一个在线数据的列表的时候发生了崩溃.然后我根据bugly定位发现是在使用Collection.sort()对list排序的时候产生Comparison method violates its general contract异常.但是Collection.sort()在JDK1.6中并没有出现过这样的异常啊...\n# 问题定位\n首先我怀着很纳闷的心情看了下bugly的崩溃日志.有这么一段日志信息\n\n``` java\n\n11-23 14:02:55.357 27729 32217 W System.err: java.lang.IllegalArgumentException: Comparison method violates its general contract!\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.mergeLo(TimSort.java:743)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.mergeAt(TimSort.java:479)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.mergeCollapse(TimSort.java:406)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.sort(TimSort.java:210)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.sort(TimSort.java:169)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.Arrays.sort(Arrays.java:2010)\n11-23 14:02:55.358 27729 32217 W System.err: at java.util.Collections.sort(Collections.java:1883)\n\n\n```\n\n然后我定位到出错的代码\n\n``` java\nif (list != null && list.size() > 0){\n        //降序排序\n        Collections.sort(list, new Comparator<Spo2Result>() {\n            @Override\n            public int compare(Spo2Result lhs, Spo2Result rhs) {\n                return lhs.getMeasureTime()>rhs.getMeasureTime() ? -1 : 1;\n            }\n\n        });\n    }\n```\n\n抛出异常的地方是对一个list按照测量时间降序排序,逻辑很简单.然后我仔仔细细前前后后里里外外的看了好几遍这段代码,为了验证代码的可靠性,我还特意z针对这个排序方法写了一个测试案例,如下:\n\n``` java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class TestSortError {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tList<Integer> l = new ArrayList<Integer>();\n\t\tl.add(1);\n\t\tl.add(3);\n\t\tl.add(2);\n\t\tl.add(2);\n\t\tl.add(2);\n\t\tl.add(2);\n\t\tl.add(5);\n\t\tl.add(6);\n\t\tl.add(4);\n\t\tl.add(1);\n\t\ttestSort(l);\n\t}\n\n\tprivate static void testSort(List<Integer> l) {\n\n\t\tCollections.sort(l, new Comparator<Integer>() {\n\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn o1 > o2 ? -1 : 1;\n\t\t\t}\n\t\t});\n\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tSystem.out.println(l.get(i));\n\t\t}\n\n\t}\n}\n\n```\n\n然后输出:\n\n    6\n    5\n    4\n    3\n    2\n    2\n    2\n    2\n    1\n    1\n\n\n# 问题分析\n并没有出现自己脑海中的崩溃现象...于是只能查这个异常,找到了一个有关[JDK不兼容的声明](http://www.oracle.com/technetwork/java/javase/compatibility-417013.html).\n\n![这里写图片描述](http://img.blog.csdn.net/20161206175819540?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这个的意思大概是说JDK比较器的排序算法更换了实现方法,新的比较器在违背规则的情况下有可能抛出异常.看到这个就可以确定大概的原因了,因为项目中的排序代码违背了比较器的规则.\n\n于是google了一下比较器的规则:\n> Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.In the foregoing description, the notation sgn(expression) designates the mathematical signum function, which is defined to return one of -1, 0, or 1 according to whether the value ofexpression is negative, zero or positive. The implementor must ensure that sgn(compare(x, y)) == -sgn(compare(y, x)) for all x and y. (This implies that compare(x, y) must throw an exception if and only if compare(y, x) throws an exception.) The implementor must also ensure that the relation is transitive: ((compare(x, y)>0) && (compare(y, z)>0)) implies compare(x, z)>0. Finally, the implementor must ensure that compare(x, y)==0 implies that sgn(compare(x, z))==sgn(compare(y, z)) for all z. It is generally the case, but not strictly required that (compare(x, y)==0) == (x.equals(y)). Generally speaking, any comparator that violates this condition should clearly indicate this fact. The recommended language is “Note: this comparator imposes orderings that are inconsistent with equals.”\n\n即满足三个规则:\n1. 确保：sgn(compare(x, y)) == -sgn(compare(y, x)).\n2. 确保：如果((compare(x, y)>0) && (compare(y, z)>0))，那么compare(x, z)>0.\n3. 确保：如果compare(x, y)==0，那么对于任意的z都有sgn(compare(x, z))==sgn(compare(y, z))成立.\n\n# 问题解决\n代码中出现的三目运算符明显违背了比较器规则,所以把代码稍微改了下,增加了相等情况的判断.\n\n``` java\nif (list != null && list.size() > 0){\n        //降序排序\n        Collections.sort(list, new Comparator<Spo2Result>() {\n            @Override\n            public int compare(Spo2Result lhs, Spo2Result rhs) {\n                return lhs.getMeasureTime()==rhs.getMeasureTime()\n                        ?0:(lhs.getMeasureTime()>rhs.getMeasureTime() ? -1 : 1);\n            }\n\n        });\n    }\n```\n# 总结\n使用三目运算符要注意一定要判断相等的情况.否则会违背比较器的规则.\n\n\n\n",
        "source": "_posts/JDK7CollectionsSortError.md",
        "raw": "---\ntitle: JDK7 Collections.sort()方法报错分析\ndate: 2016-12-06 16:53:38\ntags:\n- Java\n---\n\njava.lang.IllegalArgumentException: Comparison method violates its general contract!\n<!--more-->\n\n# 问题背景\n## 起因\n前些天测试给提了一个项目里的bug,在查看项目的一个在线数据的列表的时候发生了崩溃.然后我根据bugly定位发现是在使用Collection.sort()对list排序的时候产生Comparison method violates its general contract异常.但是Collection.sort()在JDK1.6中并没有出现过这样的异常啊...\n# 问题定位\n首先我怀着很纳闷的心情看了下bugly的崩溃日志.有这么一段日志信息\n\n``` java\n\n11-23 14:02:55.357 27729 32217 W System.err: java.lang.IllegalArgumentException: Comparison method violates its general contract!\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.mergeLo(TimSort.java:743)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.mergeAt(TimSort.java:479)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.mergeCollapse(TimSort.java:406)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.sort(TimSort.java:210)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.TimSort.sort(TimSort.java:169)\n11-23 14:02:55.357 27729 32217 W System.err: at java.util.Arrays.sort(Arrays.java:2010)\n11-23 14:02:55.358 27729 32217 W System.err: at java.util.Collections.sort(Collections.java:1883)\n\n\n```\n\n然后我定位到出错的代码\n\n``` java\nif (list != null && list.size() > 0){\n        //降序排序\n        Collections.sort(list, new Comparator<Spo2Result>() {\n            @Override\n            public int compare(Spo2Result lhs, Spo2Result rhs) {\n                return lhs.getMeasureTime()>rhs.getMeasureTime() ? -1 : 1;\n            }\n\n        });\n    }\n```\n\n抛出异常的地方是对一个list按照测量时间降序排序,逻辑很简单.然后我仔仔细细前前后后里里外外的看了好几遍这段代码,为了验证代码的可靠性,我还特意z针对这个排序方法写了一个测试案例,如下:\n\n``` java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class TestSortError {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tList<Integer> l = new ArrayList<Integer>();\n\t\tl.add(1);\n\t\tl.add(3);\n\t\tl.add(2);\n\t\tl.add(2);\n\t\tl.add(2);\n\t\tl.add(2);\n\t\tl.add(5);\n\t\tl.add(6);\n\t\tl.add(4);\n\t\tl.add(1);\n\t\ttestSort(l);\n\t}\n\n\tprivate static void testSort(List<Integer> l) {\n\n\t\tCollections.sort(l, new Comparator<Integer>() {\n\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn o1 > o2 ? -1 : 1;\n\t\t\t}\n\t\t});\n\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tSystem.out.println(l.get(i));\n\t\t}\n\n\t}\n}\n\n```\n\n然后输出:\n\n    6\n    5\n    4\n    3\n    2\n    2\n    2\n    2\n    1\n    1\n\n\n# 问题分析\n并没有出现自己脑海中的崩溃现象...于是只能查这个异常,找到了一个有关[JDK不兼容的声明](http://www.oracle.com/technetwork/java/javase/compatibility-417013.html).\n\n![这里写图片描述](http://img.blog.csdn.net/20161206175819540?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这个的意思大概是说JDK比较器的排序算法更换了实现方法,新的比较器在违背规则的情况下有可能抛出异常.看到这个就可以确定大概的原因了,因为项目中的排序代码违背了比较器的规则.\n\n于是google了一下比较器的规则:\n> Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.In the foregoing description, the notation sgn(expression) designates the mathematical signum function, which is defined to return one of -1, 0, or 1 according to whether the value ofexpression is negative, zero or positive. The implementor must ensure that sgn(compare(x, y)) == -sgn(compare(y, x)) for all x and y. (This implies that compare(x, y) must throw an exception if and only if compare(y, x) throws an exception.) The implementor must also ensure that the relation is transitive: ((compare(x, y)>0) && (compare(y, z)>0)) implies compare(x, z)>0. Finally, the implementor must ensure that compare(x, y)==0 implies that sgn(compare(x, z))==sgn(compare(y, z)) for all z. It is generally the case, but not strictly required that (compare(x, y)==0) == (x.equals(y)). Generally speaking, any comparator that violates this condition should clearly indicate this fact. The recommended language is “Note: this comparator imposes orderings that are inconsistent with equals.”\n\n即满足三个规则:\n1. 确保：sgn(compare(x, y)) == -sgn(compare(y, x)).\n2. 确保：如果((compare(x, y)>0) && (compare(y, z)>0))，那么compare(x, z)>0.\n3. 确保：如果compare(x, y)==0，那么对于任意的z都有sgn(compare(x, z))==sgn(compare(y, z))成立.\n\n# 问题解决\n代码中出现的三目运算符明显违背了比较器规则,所以把代码稍微改了下,增加了相等情况的判断.\n\n``` java\nif (list != null && list.size() > 0){\n        //降序排序\n        Collections.sort(list, new Comparator<Spo2Result>() {\n            @Override\n            public int compare(Spo2Result lhs, Spo2Result rhs) {\n                return lhs.getMeasureTime()==rhs.getMeasureTime()\n                        ?0:(lhs.getMeasureTime()>rhs.getMeasureTime() ? -1 : 1);\n            }\n\n        });\n    }\n```\n# 总结\n使用三目运算符要注意一定要判断相等的情况.否则会违背比较器的规则.\n\n\n\n",
        "slug": "JDK7CollectionsSortError",
        "published": 1,
        "updated": "2020-05-19T02:32:04.680Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2m000l52j9ijghuljh",
        "content": "<p>java.lang.IllegalArgumentException: Comparison method violates its general contract!<br><a id=\"more\"></a></p>\n<h1 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h1><h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>前些天测试给提了一个项目里的bug,在查看项目的一个在线数据的列表的时候发生了崩溃.然后我根据bugly定位发现是在使用Collection.sort()对list排序的时候产生Comparison method violates its general contract异常.但是Collection.sort()在JDK1.6中并没有出现过这样的异常啊…</p>\n<h1 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h1><p>首先我怀着很纳闷的心情看了下bugly的崩溃日志.有这么一段日志信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: java.lang.IllegalArgumentException: Comparison method violates its general contract!</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.mergeLo(TimSort.java:<span class=\"number\">743</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.mergeAt(TimSort.java:<span class=\"number\">479</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.mergeCollapse(TimSort.java:<span class=\"number\">406</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.sort(TimSort.java:<span class=\"number\">210</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.sort(TimSort.java:<span class=\"number\">169</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.Arrays.sort(Arrays.java:<span class=\"number\">2010</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.358</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.Collections.sort(Collections.java:<span class=\"number\">1883</span>)</span><br></pre></td></tr></table></figure>\n<p>然后我定位到出错的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//降序排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Spo2Result&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Spo2Result lhs, Spo2Result rhs)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lhs.getMeasureTime()&gt;rhs.getMeasureTime() ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>抛出异常的地方是对一个list按照测量时间降序排序,逻辑很简单.然后我仔仔细细前前后后里里外外的看了好几遍这段代码,为了验证代码的可靠性,我还特意z针对这个排序方法写了一个测试案例,如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSortError</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tList&lt;Integer&gt; l = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\ttestSort(l);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSort</span><span class=\"params\">(List&lt;Integer&gt; l)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tCollections.sort(l, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> o1 &gt; o2 ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(l.get(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后输出:</p>\n<pre><code>6\n5\n4\n3\n2\n2\n2\n2\n1\n1\n</code></pre><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>并没有出现自己脑海中的崩溃现象…于是只能查这个异常,找到了一个有关<a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-417013.html\" target=\"_blank\" rel=\"noopener\">JDK不兼容的声明</a>.</p>\n<p><img src=\"http://img.blog.csdn.net/20161206175819540?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>这个的意思大概是说JDK比较器的排序算法更换了实现方法,新的比较器在违背规则的情况下有可能抛出异常.看到这个就可以确定大概的原因了,因为项目中的排序代码违背了比较器的规则.</p>\n<p>于是google了一下比较器的规则:</p>\n<blockquote>\n<p>Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.In the foregoing description, the notation sgn(expression) designates the mathematical signum function, which is defined to return one of -1, 0, or 1 according to whether the value ofexpression is negative, zero or positive. The implementor must ensure that sgn(compare(x, y)) == -sgn(compare(y, x)) for all x and y. (This implies that compare(x, y) must throw an exception if and only if compare(y, x) throws an exception.) The implementor must also ensure that the relation is transitive: ((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0)) implies compare(x, z)&gt;0. Finally, the implementor must ensure that compare(x, y)==0 implies that sgn(compare(x, z))==sgn(compare(y, z)) for all z. It is generally the case, but not strictly required that (compare(x, y)==0) == (x.equals(y)). Generally speaking, any comparator that violates this condition should clearly indicate this fact. The recommended language is “Note: this comparator imposes orderings that are inconsistent with equals.”</p>\n</blockquote>\n<p>即满足三个规则:</p>\n<ol>\n<li>确保：sgn(compare(x, y)) == -sgn(compare(y, x)).</li>\n<li>确保：如果((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))，那么compare(x, z)&gt;0.</li>\n<li>确保：如果compare(x, y)==0，那么对于任意的z都有sgn(compare(x, z))==sgn(compare(y, z))成立.</li>\n</ol>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><p>代码中出现的三目运算符明显违背了比较器规则,所以把代码稍微改了下,增加了相等情况的判断.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//降序排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Spo2Result&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Spo2Result lhs, Spo2Result rhs)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lhs.getMeasureTime()==rhs.getMeasureTime()</span><br><span class=\"line\">                        ?<span class=\"number\">0</span>:(lhs.getMeasureTime()&gt;rhs.getMeasureTime() ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用三目运算符要注意一定要判断相等的情况.否则会违背比较器的规则.</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>java.lang.IllegalArgumentException: Comparison method violates its general contract!<br>",
        "more": "</p>\n<h1 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h1><h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>前些天测试给提了一个项目里的bug,在查看项目的一个在线数据的列表的时候发生了崩溃.然后我根据bugly定位发现是在使用Collection.sort()对list排序的时候产生Comparison method violates its general contract异常.但是Collection.sort()在JDK1.6中并没有出现过这样的异常啊…</p>\n<h1 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h1><p>首先我怀着很纳闷的心情看了下bugly的崩溃日志.有这么一段日志信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: java.lang.IllegalArgumentException: Comparison method violates its general contract!</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.mergeLo(TimSort.java:<span class=\"number\">743</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.mergeAt(TimSort.java:<span class=\"number\">479</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.mergeCollapse(TimSort.java:<span class=\"number\">406</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.sort(TimSort.java:<span class=\"number\">210</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.TimSort.sort(TimSort.java:<span class=\"number\">169</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.357</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.Arrays.sort(Arrays.java:<span class=\"number\">2010</span>)</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">23</span> <span class=\"number\">14</span>:<span class=\"number\">02</span>:<span class=\"number\">55.358</span> <span class=\"number\">27729</span> <span class=\"number\">32217</span> W System.err: at java.util.Collections.sort(Collections.java:<span class=\"number\">1883</span>)</span><br></pre></td></tr></table></figure>\n<p>然后我定位到出错的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//降序排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Spo2Result&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Spo2Result lhs, Spo2Result rhs)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lhs.getMeasureTime()&gt;rhs.getMeasureTime() ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>抛出异常的地方是对一个list按照测量时间降序排序,逻辑很简单.然后我仔仔细细前前后后里里外外的看了好几遍这段代码,为了验证代码的可靠性,我还特意z针对这个排序方法写了一个测试案例,如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSortError</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tList&lt;Integer&gt; l = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tl.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\ttestSort(l);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSort</span><span class=\"params\">(List&lt;Integer&gt; l)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tCollections.sort(l, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> o1 &gt; o2 ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(l.get(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后输出:</p>\n<pre><code>6\n5\n4\n3\n2\n2\n2\n2\n1\n1\n</code></pre><h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>并没有出现自己脑海中的崩溃现象…于是只能查这个异常,找到了一个有关<a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-417013.html\" target=\"_blank\" rel=\"noopener\">JDK不兼容的声明</a>.</p>\n<p><img src=\"http://img.blog.csdn.net/20161206175819540?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHZwaGVyb3N6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>这个的意思大概是说JDK比较器的排序算法更换了实现方法,新的比较器在违背规则的情况下有可能抛出异常.看到这个就可以确定大概的原因了,因为项目中的排序代码违背了比较器的规则.</p>\n<p>于是google了一下比较器的规则:</p>\n<blockquote>\n<p>Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.In the foregoing description, the notation sgn(expression) designates the mathematical signum function, which is defined to return one of -1, 0, or 1 according to whether the value ofexpression is negative, zero or positive. The implementor must ensure that sgn(compare(x, y)) == -sgn(compare(y, x)) for all x and y. (This implies that compare(x, y) must throw an exception if and only if compare(y, x) throws an exception.) The implementor must also ensure that the relation is transitive: ((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0)) implies compare(x, z)&gt;0. Finally, the implementor must ensure that compare(x, y)==0 implies that sgn(compare(x, z))==sgn(compare(y, z)) for all z. It is generally the case, but not strictly required that (compare(x, y)==0) == (x.equals(y)). Generally speaking, any comparator that violates this condition should clearly indicate this fact. The recommended language is “Note: this comparator imposes orderings that are inconsistent with equals.”</p>\n</blockquote>\n<p>即满足三个规则:</p>\n<ol>\n<li>确保：sgn(compare(x, y)) == -sgn(compare(y, x)).</li>\n<li>确保：如果((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))，那么compare(x, z)&gt;0.</li>\n<li>确保：如果compare(x, y)==0，那么对于任意的z都有sgn(compare(x, z))==sgn(compare(y, z))成立.</li>\n</ol>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><p>代码中出现的三目运算符明显违背了比较器规则,所以把代码稍微改了下,增加了相等情况的判断.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (list != <span class=\"keyword\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//降序排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Spo2Result&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Spo2Result lhs, Spo2Result rhs)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lhs.getMeasureTime()==rhs.getMeasureTime()</span><br><span class=\"line\">                        ?<span class=\"number\">0</span>:(lhs.getMeasureTime()&gt;rhs.getMeasureTime() ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用三目运算符要注意一定要判断相等的情况.否则会违背比较器的规则.</p>"
      },
      {
        "title": "Bitmap到底占多少内存",
        "date": "2016-07-06T10:03:34.000Z",
        "_content": "\n转至:[Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=498)\nBugly 技术干货系列内容主要涉及移动开发方向，是由 Bugly 邀请腾讯内部各位技术大咖，通过日常工作经验的总结以及感悟撰写而成，内容均属原创，转载请标明出处。\n\n<!--more-->\n# 写在前面 \n本文涉及到屏幕密度的讨论，这里先要搞清楚 DisplayMetrics 的两个变量，摘录官方文档的解释：\n\n- density：The logical density of the display. This is a scaling factor for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (for example a 240x320, 1.5”x2” screen), providing the baseline of the system’s display. Thus on a 160dpi screen this density value will be 1; on a 120 dpi screen it would be .75; etc.\nThis value does not exactly follow the real screen size (as given by xdpi and ydpi, but rather is used to scale the size of the overall UI in steps based on gross changes in the display dpi. For example, a 240x320 screen will have a density of 1 even if its width is 1.8”, 1.3”, etc. However, if the screen resolution is increased to 320x480 but the screen size remained 1.5”x2” then the density would be increased (probably to 1.5).\n- densityDpi：The screen density expressed as dots-per-inch.\n\n\n\n简单来说，可以理解为 density 的数值是 1dp=density px；densityDpi 是屏幕每英寸对应多少个点（不是像素点），在 DisplayMetrics 当中，这两个的关系是线性的：\n\n| density | 1.0 | 1.5 | 2.0 | 3.0 | 4.0 |\n| -|:-:|:-:|:-:|:-:| :-:|\n| densityDpi | 160 | 240 | 320 | 480 | 640 |\n\n\n为了不引起混淆，本文所有提到的密度除非特别说明，都指的是 densityDpi，当然如果你愿意，也可以用 density 来说明问题。\n另外，本文的依据主要来自 android 5.0 的源码，其他版本可能略有出入。文章难免疏漏，欢迎指正～\n\n# 占了多大内存？\n\n做移动客户端开发的朋友们肯定都因为图头疼过，说起来曾经还有过 leader 因为组里面一哥们在工程里面加了一张 jpg 的图发脾气的事儿，哈哈。\n为什么头疼呢？吃内存呗，时不时还给你来个 OOM 冲冲喜，让你的每一天过得有滋有味（真是没救了）。那每次工程里面增加一张图片的时候，我们都需要关心这货究竟要占多大的坑，占多大呢？Android API 有个方便的方法，\n\n``` java\npublic final int getByteCount() {\n    // int result permits bitmaps up to 46,340 x 46,340\n    return getRowBytes() * getHeight();\n}\n```\n\n**举个列子**\n一张 **522x686** 的**PNG ** 图片，我把它放到 **drawable-xxhdpi** 目录下，在**三星s6**上加载，占用内存2547360B，就可以用这个方法获取到。\n\n# 给我一张图我告诉你占多大内存\n每次都问 Bitmap 你到底多大啦。。感觉怪怪的，毕竟我们不能总是去问，而不去搞清楚它为嘛介么大吧。能不能给它算个命，算算它究竟多大呢？当然是可以的，很简单嘛，我们直接顺藤摸瓜，找出真凶，哦不，找出答案。\n\n## getByteCount\ngetByteCount 的源码我们刚刚已经认识了，当我们问 Bitmap 大小的时候，这孩子也是先拿到出生年月日，然后算出来的，那么问题来了，getHeight 就是图片的高度（单位：px），getRowBytes 是什么？\n\n``` java\npublic final int getrowBytes() {\n   if (mRecycled) {\n          Log.w(TAG, \"Called getRowBytes() on a recycle()'d bitmap! This is undefined behavior!\");\n   }\n   return nativeRowBytes(mFinalizer.mNativeBitmap);\n}\n```\n\n额，感觉太对了啊，要 JNI 了。由于在下 C++ 实在用得少，每次想起 JNI 都请想象脑门磕墙的场景，不过呢，毛爷爷说过，一切反动派都是纸老虎~与 \n\n**nativeRowBytes** 对应的函数如下：\n**Bitmap.cpp**\n\n```java\nstatic jint Bitmap_rowBytes(JNIEnv* env, jobject, jlong bitmapHandle) {\n     SkBitmap* bitmap = reinterpret_cast<SkBitmap*>(bitmapHandle)\n     return static_cast<jint>(bitmap->rowBytes());\n}\n```\n\n等等，我们好像发现了什么，原来 Bitmap 本质上就是一个 SkBitmap。。而这个 SkBitmap 也是大有来头，不信你瞧：[Skia](https://skia.org/)。啥也别说了，赶紧瞅瞅 SkBitmap。\n\n**SkBitmap.h**\n```java\nsize_t SkBitmap::ComputeRowBytes(Config c, int width) {\n    return SkColorTypeMinRowBytes(SkBitmapConfigToColorType(c), width);\n}\nSkImageInfo.h\n \nstatic int SkColorTypeBytesPerPixel(SkColorType ct) {\n   static const uint8_t gSize[] = {\n    0,  // Unknown\n    1,  // Alpha_8\n    2,  // RGB_565\n    2,  // ARGB_4444\n    4,  // RGBA_8888\n    4,  // BGRA_8888\n    1,  // kIndex_8\n  };\n  SK_COMPILE_ASSERT(SK_ARRAY_COUNT(gSize) == (size_t)(kLastEnum_SkColorType + 1),\n                size_mismatch_with_SkColorType_enum);\n \n   SkASSERT((size_t)ct < SK_ARRAY_COUNT(gSize));\n   return gSize[ct];\n}\n \nstatic inline size_t SkColorTypeMinRowBytes(SkColorType ct, int width) {\n    return width * SkColorTypeBytesPerPixel(ct);\n}\n```\n\n好，跟踪到这里，我们发现 ARGB_8888（也就是我们最常用的 Bitmap 的格式）的一个像素占用 4byte，那么 rowBytes 实际上就是 4*width bytes。\n那么结论出来了，一张 ARGB_8888 的 Bitmap 占用内存的计算公式\n**bitmapInRam = bitmapWidth*bitmapHeight *4 bytes**\n说到这儿你以为故事就结束了么？有本事你拿去试，算出来的和你获取到的总是会差个倍数，为啥呢？\n还记得我们最开始给出的那个例子么？\n\n> 一张**522*686**的 **PNG** 图片，我把它放到 **drawable-xxhdpi**\n> 目录下，在**三星s6**上加载，占用内存2547360B，就可以用这个方法获取到。\n\n然而公式计算出来的可是1432368B。。。\n\n## Density\n知道我为什么在举例的时候那么费劲的说放到xxx目录下，还要说用xxx手机么？你以为 Bitmap 加载只跟宽高有关么？Naive。\n还是先看代码，我们读取的是 drawable 目录下面的图片，用的是 decodeResource 方法，该方法本质上就两步：\n\n - 读取原始资源，这个调用了 Resource.openRawResource 方法，这个方法调用完成之后会对 TypedValue 进行赋值，其中包含了原始资源的 density 等信息；\n -  调用 decodeResourceStream 对原始资源进行解码和适配。这个过程实际上就是原始资源的 density 到屏幕 density 的一个映射。\n \n \n原始资源的 density 其实取决于资源存放的目录（比如 xxhdpi 对应的是480），而屏幕 density 的赋值，请看下面这段代码：\n\n**BitmapFactory.java**\n```java\npublic static Bitmap decodeResourceStream(Resources res, TypedValue value,\n    InputStream is, Rect pad, Options opts) {\n \n//实际上，我们这里的opts是null的，所以在这里初始化。\nif (opts == null) {\n    opts = new Options();\n}\n \nif (opts.inDensity == 0 && value != null) {\n    final int density = value.density;\n    if (density == TypedValue.DENSITY_DEFAULT) {\n        opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;\n    } else if (density != TypedValue.DENSITY_NONE) {\n        opts.inDensity = density; //这里density的值如果对应资源目录为hdpi的话，就是240\n    }\n}\n \nif (opts.inTargetDensity == 0 && res != null) {\n//请注意，inTargetDensity就是当前的显示密度，比如三星s6时就是640\n    opts.inTargetDensity = res.getDisplayMetrics().densityDpi;\n}\n \nreturn decodeStream(is, pad, opts);\n}\n```\n\n我们看到 opts 这个值被初始化，而它的构造居然如此简单：\n```java\npublic Options() {\n   inDither = false;\n   inScaled = true;\n   inPremultiplied = true;\n}\n```\n\n所以我们就很容易的看到，Option.inScreenDensity 这个值没有被初始化，而实际上后面我们也会看到这个值根本不会用到；我们最应该关心的是什么呢？是 inDensity 和 inTargetDensity，这两个值与下面 cpp 文件里面的 density 和 targetDensity 相对应——重复一下，inDensity 就是原始资源的 density，inTargetDensity 就是屏幕的 density。\n紧接着，用到了 nativeDecodeStream 方法，不重要的代码直接略过，直接给出最关键的 doDecode 函数的代码：\n\n**BitmapFactory.cpp**\n\n```java\nstatic jobject doDecode(JNIEnv* env, SkStreamRewindable* stream, jobject padding, jobject options) {\n \n......\n    if (env->GetBooleanField(options, gOptions_scaledFieldID)) {\n        const int density = env->GetIntField(options, gOptions_densityFieldID);//对应hdpi的时候，是240\n        const int targetDensity = env->GetIntField(options, gOptions_targetDensityFieldID);//三星s6的为640\n        const int screenDensity = env->GetIntField(options, gOptions_screenDensityFieldID);\n        if (density != 0 && targetDensity != 0 && density != screenDensity) {\n            scale = (float) targetDensity / density;\n        }\n    }\n}\n \nconst bool willScale = scale != 1.0f;\n......\nSkBitmap decodingBitmap;\nif (!decoder->decode(stream, &decodingBitmap, prefColorType,decodeMode)) {\n   return nullObjectReturn(\"decoder->decode returned false\");\n}\n//这里这个deodingBitmap就是解码出来的bitmap，大小是图片原始的大小\nint scaledWidth = decodingBitmap.width();\nint scaledHeight = decodingBitmap.height();\nif (willScale && decodeMode != SkImageDecoder::kDecodeBounds_Mode) {\n    scaledWidth = int(scaledWidth * scale + 0.5f);\n    scaledHeight = int(scaledHeight * scale + 0.5f);\n}\nif (willScale) {\n    const float sx = scaledWidth / float(decodingBitmap.width());\n    const float sy = scaledHeight / float(decodingBitmap.height());\n \n    // TODO: avoid copying when scaled size equals decodingBitmap size\n    SkColorType colorType = colorTypeForScaledOutput(decodingBitmap.colorType());\n    // FIXME: If the alphaType is kUnpremul and the image has alpha, the\n    // colors may not be correct, since Skia does not yet support drawing\n    // to/from unpremultiplied bitmaps.\n    outputBitmap->setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,\n            colorType, decodingBitmap.alphaType()));\n    if (!outputBitmap->allocPixels(outputAllocator, NULL)) {\n        return nullObjectReturn(\"allocation failed for scaled bitmap\");\n    }\n \n    // If outputBitmap's pixels are newly allocated by Java, there is no need\n    // to erase to 0, since the pixels were initialized to 0.\n    if (outputAllocator != &javaAllocator) {\n        outputBitmap->eraseColor(0);\n    }\n \n    SkPaint paint;\n    paint.setFilterLevel(SkPaint::kLow_FilterLevel);\n \n    SkCanvas canvas(*outputBitmap);\n    canvas.scale(sx, sy);\n    canvas.drawBitmap(decodingBitmap, 0.0f, 0.0f, &paint);\n}\n......\n}\n```\n\n注意到其中有个 density 和 targetDensity，前者是 decodingBitmap 的 density，这个值跟这张图片的放置的目录有关（比如 hdpi 是240，xxhdpi 是480），这部分代码我跟了一下，太长了，就不列出来了；targetDensity 实际上是我们加载图片的目标 density，这个值的来源我们已经在前面给出了，就是 DisplayMetrics 的 densityDpi，如果是三星s6那么这个数值就是640。sx 和sy 实际上是约等于 scale 的，因为 scaledWidth 和 scaledHeight 是由 width 和 height 乘以 scale 得到的。我们看到 Canvas 放大了 scale 倍，然后又把读到内存的这张 bitmap 画上去，相当于把这张 bitmap 放大了 scale 倍。\n\n再来看我们的例子：\n\n> 一张**522*686**的**PNG** 图片，我把它放到 **drawable-xxhdpi** 目录下，在三星s6上加载，占用内存2547360B，其中\n> density 对应 xxhdpi 为480，targetDensity 对应三星s6的密度为640： **522/480 * 640 * 686/480 * 640 * 4 = 2546432B**\n\n## 精度\n越来越有趣了是不是，你肯定会发现我们这么细致的计算还是跟获取到的数值\n**不！一！样！**\n为什么呢？由于结果已经非常接近，我们很自然地想到精度问题。来，再把上面这段代码中的一句拿出来看看：\n\n```java\noutputBitmap->setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,\n            colorType, decodingBitmap.alphaType()));\n```\n\n我们看到最终输出的 outputBitmap 的大小是scaledWidth*scaledHeight，我们把这两个变量计算的片段拿出来给大家一看就明白了：\n\n```java\nif (willScale && decodeMode != SkImageDecoder::kDecodeBounds_Mode) {\n    scaledWidth = int(scaledWidth * scale + 0.5f);\n    scaledHeight = int(scaledHeight * scale + 0.5f);\n}\n```\n\n在我们的例子中，\n**scaledWidth** = **int( 522 * 640 / 480f + 0.5)** = **int(696.5) = 696**\n**scaledHeight = int( 686 * 640 / 480f + 0.5) = int(915.16666…) = 915**\n下面就是见证奇迹的时刻：\n**915 * 696 * 4 = 2547360**\n有木有很兴奋！有木有很激动！！\n写到这里，突然想起《STL源码剖析》一书的扉页，侯捷先生只写了一句话：\n\n    “源码之前，了无秘密”\n\n## 小结\n其实，通过前面的代码跟踪，我们就不难知道，Bitmap 在内存当中占用的大小其实取决于：\n\n - 色彩格式，前面我们已经提到，如果是 ARGB8888 那么就是一个像素4个字节，如果是 RGB565 那就是2个字节\n -  原始文件存放的资源目录（是 hdpi 还是 xxhdpi 可不能傻傻分不清楚哈）\n -  目标屏幕的密度（所以同等条件下，红米在资源方面消耗的内存肯定是要小于三星S6的）\n\n# 想办法减少 Bitmap 内存占用\n## Jpg 和 Png\n说到这里，肯定会有人会说，我们用 jpg 吧，jpg 格式的图片不应该比 png 小么？\n这确实是个好问题，因为同样一张图片，jpg 确实比 png 会多少小一些（甚至很多），原因很简单，jpg 是一种**有损**压缩的图片**存储格式**，而 png 则是 **无损**压缩的图片**存储格式**，显而易见，jpg 会比 png 小，代价也是显而易见的。\n\n可是，这说的是文件存储范畴的事情，它们只存在于文件系统，而非内存或者显存。说得简单一点儿，我有一个极品飞车的免安装硬盘版的压缩包放在我的磁盘里面，这个游戏是不能玩的，我需要先解压，才能玩——jpg 也好，png 也好就是个压缩包的概念，而我们讨论的内存占用则是从使用角度来讨论的。\n所以，jpg 格式的图片与 png 格式的图片在内存当中不应该有什么不同。\n\n    『啪！！！』\n    『谁这么缺德！！打人不打脸好么！』\n\n肯定有人有意见，jpg 图片读到内存就是会小，还会给我拿出例子。当然，他说的不一定是错的。因为 jpg 的图片没有 alpha 通道！！所以读到内存的时候如果用 RGB565的格式存到内存，这下大小只有 ARGB8888的一半，能不小么。。。\n不过，抛开 Android 这个平台不谈，从出图的角度来看的话，jpg 格式的图片大小也不一定比 png 的小，这要取决于图像信息的内容：\n\n    JPG 不适用于所含颜色很少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。对于需要高保真的较复杂的图像，PNG 虽然能无损压缩，但图片文件较大。\n\n如果仅仅是为了 Bitmap 读到内存中的大小而考虑的话，jpg 也好 png 也好，没有什么实质的差别；二者的差别主要体现在：\n\n - alpha 你是否真的需要？如果需要 alpha 通道，那么没有别的选择，用 png。\n -  你的图色值丰富还是单调？就像刚才提到的，如果色值丰富，那么用jpg，如果作为按钮的背景，请用 png。\n -  对安装包大小的要求是否非常严格？如果你的 app 资源很少，安装包大小问题不是很凸显，看情况选择 jpg 或者\n -   png（不过，我想现在对资源文件没有苛求的应用会很少吧。。） 目标用户的 cpu 是否强劲？jpg 的图像压缩算法比 png\n -  耗时。这方面还是要酌情选择，前几年做了一段时间 Cocos2dx，由于资源非常多，项目组要求统一使用 png，可能就是出于这方面的考虑。\n\n嗯，跑题了，我们其实想说的是怎么减少内存占用的。。这一小节只是想说，休想通过这个方法来减少内存占用。。。XD\n\n## 使用 inSampleSize\n有些朋友一看到这个肯定就笑了。采样嘛，我以前是学信号处理的，一看到 Sample 就抽抽。。哈哈开个玩笑，这个采样其实就跟统计学里面的采样是一样的，在保证最终效果满足要求的前提下减少样本规模，方便后续的数据采集和处理。\n这个方法主要用在图片资源本身较大，或者适当地采样并不会影响视觉效果的条件下，这时候我们输出地目标可能相对较小，对图片分辨率、大小要求不是非常的严格。\n\n**举个例子**\n我们现在有个需求，要求将一张图片进行模糊，然后作为 ImageView 的 src 呈现给用户，而我们的原始图片大小为 1080*1920，如果我们直接拿来模糊的话，一方面模糊的过程费时费力，另一方面生成的图片又占用内存，实际上在模糊运算过程中可能会存在输入和输出并存的情况，此时内存将会有一个短暂的峰值。\n这时候你一定会想到三个字母在你的脑海里挥之不去，它们就是『OOM』。\n既然图片最终是要被模糊的，也看不太情况，还不如直接用一张采样后的图片，如果采样率为 2，那么读出来的图片只有原始图片的 1/4 大小，真是何乐而不为呢？？\n``` java\nBitmapFactory.Options options = new Options();\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeResource(getResources(), resId, options);\n```\n\n## 使用矩阵\n用到 Bitmap 的地方，总会见到 Matrix。这时候你会想到什么？\n\n    『基友』\n    『是在下输了。。』\n\n其实想想，Bitmap 的像素点阵，还不就是个矩阵，真是你中有我，我中有你的交情啊。那么什么时候用矩阵呢？\n\n**大图小用用采样，小图大用用矩阵。**\n还是用前面模糊图片的例子，我们不是采样了么？内存是小了，可是图的尺寸也小了啊，我要用 Canvas 绘制这张图可怎么办？当然是用矩阵了：\n**方式一：**\n\n``` java\nMatrix matrix = new Matrix();\nmatrix.preScale(2, 2, 0f, 0f);\n//如果使用直接替换矩阵的话，在Nexus6 5.1.1上必须关闭硬件加速\ncanvas.concat(matrix);\ncanvas.drawBitmap(bitmap, 0,0, paint);\n```\n\n*需要注意的是，在使用搭载 5.1.1 原生系统的 Nexus6 进行测试时发现，如果使用 Canvas 的 setMatrix 方法，可能会导致与矩阵相关的元素的绘制存在问题，本例当中如果使用 setMatrix 方法，bitmap 将不会出现在屏幕上。因此请尽量使用 canvas 的 scale、rotate 这样的方法，或者使用 concat 方法。*\n\n方式二：\n``` java\nMatrix matrix = new Matrix();\nmatrix.preScale(2, 2, 0, 0);\ncanvas.drawBitmap(bitmap, matrix, paint);\n```\n\n这样，绘制出来的图就是放大以后的效果了，不过占用的内存却仍然是我们采样出来的大小。\n如果我要把图片放到 ImageView 当中呢？一样可以，请看：\n``` java\nMatrix matrix = new Matrix();\nmatrix.postScale(2, 2, 0, 0);\nimageView.setImageMatrix(matrix);\nimageView.setScaleType(ScaleType.MATRIX);\nimageView.setImageBitmap(bitmap);\n```\n\n## 合理选择Bitmap的像素格式\n其实前面我们已经多次提到这个问题。ARGB8888格式的图片，每像素占用 4 Byte，而 RGB565则是 2 Byte。我们先看下有多少种格式可选：\n|  格式\t| 描述 |\n| - | :-|\n|ALPHA_8| 只有一个alpha通道 |\n|ARGB_4444\t| 这个从API 13开始不建议使用，因为质量太差|\n|ARGB_8888\t| ARGB四个通道，每个通道8bit |\n|RGB_565\t|每个像素占2Byte，其中红色占5bit，绿色占6bit，蓝色占5bit |\n\n这几个当中，\n**ALPHA8** 没必要用，因为我们随便用个颜色就可以搞定的。\n**ARGB4444** 虽然占用内存只有 **ARGB8888** 的一半，不过已经被官方嫌弃，失宠了。。『又要占省内存，又要看着爽，臣妾做不到啊T T』。\n**ARGB8888** 是最常用的，大家应该最熟悉了。\n**RGB565** 看到这个，我就看到了资源优化配置无处不在，这个绿色。。（不行了，突然好邪恶XD），其实如果不需要 alpha 通道，特别是资源本身为 jpg 格式的情况下，用这个格式比较理想。\n\n## 高能：索引位图(Indexed Bitmap)\n\n索引位图，每个像素只占 1 Byte，不仅支持 RGB，还支持 alpha，而且看上去效果还不错！等等，请收起你的口水，Android 官方并不支持这个。是的，你没看错，官方并不支持。\n```java\npublic enum Config {\n    // these native values must match up with the enum in SkBitmap.h\n \n    ALPHA_8     (2),\n    RGB_565     (4),\n    ARGB_4444   (5),\n    ARGB_8888   (6);\n \n    final int nativeInt;\n}\n```\n\n不过，Skia 引擎是支持的，不信你再看：\n```java\nenum Config {\n   kNo_Config,   //!< bitmap has not been configured\n     kA8_Config,   //!< 8-bits per pixel, with only alpha specified (0 is transparent, 0xFF is opaque)\n \n   //看这里看这里！！↓↓↓↓↓\n    kIndex8_Config, //!< 8-bits per pixel, using SkColorTable to specify the colors  \n    kRGB_565_Config, //!< 16-bits per pixel, (see SkColorPriv.h for packing)\n    kARGB_4444_Config, //!< 16-bits per pixel, (see SkColorPriv.h for packing)\n    kARGB_8888_Config, //!< 32-bits per pixel, (see SkColorPriv.h for packing)\n    kRLE_Index8_Config,\n \n    kConfigCount\n};\n```\n\n其实 Java 层的枚举变量的 nativeInt 对应的就是 Skia 库当中枚举的索引值，所以，如果我们能够拿到这个索引是不是就可以了？对不起，拿不到。\n不行了，废话这么多，肯定要挨板砖了T T。\n不过呢，在 png 的解码库里面有这么一段代码：\n\n```java\nbool SkPNGImageDecoder::getBitmapColorType(png_structp png_ptr, png_infop info_ptr,\n                                       SkColorType* colorTypep,\n                                       bool* hasAlphap,\n                                       SkPMColor* SK_RESTRICT theTranspColorp) {\npng_uint_32 origWidth, origHeight;\nint bitDepth, colorType;\npng_get_IHDR(png_ptr, info_ptr, &origWidth, &origHeight, &bitDepth,\n             &colorType, int_p_NULL, int_p_NULL, int_p_NULL);\n \n#ifdef PNG_sBIT_SUPPORTED\n  // check for sBIT chunk data, in case we should disable dithering because\n  // our data is not truely 8bits per component\n  png_color_8p sig_bit;\n  if (this->getDitherImage() && png_get_sBIT(png_ptr, info_ptr, &sig_bit)) {\n#if 0\n    SkDebugf(\"----- sBIT %d %d %d %d\\n\", sig_bit->red, sig_bit->green,\n             sig_bit->blue, sig_bit->alpha);\n#endif\n    // 0 seems to indicate no information available\n    if (pos_le(sig_bit->red, SK_R16_BITS) &&\n        pos_le(sig_bit->green, SK_G16_BITS) &&\n        pos_le(sig_bit->blue, SK_B16_BITS)) {\n        this->setDitherImage(false);\n    }\n}\n#endif\n \n \nif (colorType == PNG_COLOR_TYPE_PALETTE) {\n    bool paletteHasAlpha = hasTransparencyInPalette(png_ptr, info_ptr);\n    *colorTypep = this->getPrefColorType(kIndex_SrcDepth, paletteHasAlpha);\n    // now see if we can upscale to their requested colortype\n    //这段代码，如果返回false，那么colorType就被置为索引了，那么我们看看如何返回false\n    if (!canUpscalePaletteToConfig(*colorTypep, paletteHasAlpha)) {\n        *colorTypep = kIndex_8_SkColorType;\n    }\n} else {\n...... \n}\nreturn true;\n}\n```\n\n**canUpscalePaletteToConfig** 函数如果返回false，那么 colorType 就被置为 **kIndex_8_SkColorType** 了。\n\n```java\nstatic bool canUpscalePaletteToConfig(SkColorType dstColorType, bool srcHasAlpha) {\n  switch (dstColorType) {\n    case kN32_SkColorType:\n    case kARGB_4444_SkColorType:\n        return true;\n    case kRGB_565_SkColorType:\n        // only return true if the src is opaque (since 565 is opaque)\n        return !srcHasAlpha;\n    default:\n        return false;\n}\n}\n```\n如果传入的 **dstColorType** 是 **kRGB_565_SkColorType**，同时图片还有 alpha 通道，那么返回 false~~咳咳，那么问题来了，这个**dstColorType** 是哪儿来的？？就是我们在 decode 的时候，传入的 **Options** 的 **inPreferredConfig**。\n\n下面是实验时间~\n**准备**：在 assets 目录当中放了一个叫 index.png 的文件，大小192*192，这个文件是通过 PhotoShop 编辑之后生成的索引格式的图片。\n**代码**：\n\n```java\ntry {\n   Options options = new Options();\n   options.inPreferredConfig = Config.RGB_565;\nBitmap bitmap = BitmapFactory.decodeStream(getResources().getAssets().open(\"index.png\"), null, options);\n   Log.d(TAG, \"bitmap.getConfig() = \" + bitmap.getConfig());\n   Log.d(TAG, \"scaled bitmap.getByteCount() = \" + bitmap.getByteCount());\n   imageView.setImageBitmap(bitmap);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n程序运行在 Nexus6上，由于从 assets 中读取不涉及前面讨论到的 scale 的问题，所以这张图片读到内存以后的大小理论值（ARGB8888）：\n**192 * 192 *4=147456**\n\n好，运行我们的代码，看输出的 Config 和 ByteCount：\n\n先说大小为什么只有 36864，我们知道如果前面的讨论是没有问题的话，那么这次解码出来的 Bitmap 应该是索引格式，那么占用的内存只有 ARGB 8888 的1/4是意料之中的；再说 Config 为什么为 null。。额。。黑户。。官方说：\n\n    public final Bitmap.Config getConfig ()\n    Added in API level 1\n    If the bitmap’s internal config is in one of the public formats, return that config, otherwise return null.\n\n再说一遍，黑户。。XD。\n看来这个法子还真行啊，占用内存一下小很多。不过由于官方并未做出支持，因此这个方法有诸多限制，比如不能在 xml 中直接配置，，生成的 Bitmap 不能用于构建 Canvas 等等。\n\n## 不要辜负。。。『哦，不要姑父！』\n其实我们一直在抱怨资源大，有时候有些场景其实不需要图片也能完成的。比如在开发中我们会经常遇到 Loading，这些 Loading 通常就是几帧图片，图片也比较简单，只需要黑白灰加 alpha 就齐了。\n\n    『排期太紧了，这些给我出一系列图吧』\n    『好，不过每张图都是 300*30 0的 png 哈，总共 5 张，为了适配不同的分辨率，需要出 xxhdpi 和 xxxhdpi 的两套图。。』\n\nOrz。。。\n如果是这样，你还是自定义一个 View，覆写 onDraw 自己画一下好了。。。\n\n# 结语\n写了这么多，我们来稍稍理一理，本文主要讨论了如何运行时获取 Bitmap 占用内存的大小，如果事先根据 Bitmap 的格式、读取方式等算出其占用内存的大小，后面又整理了一些常见的 Bitmap 使用建议。突然好像说，是时候研究一下 Skia 引擎了。\n怎么办，看来扔了好几年的 C++还是要捡回来么。。噗。。。\n\n内容转至:[Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=498)\n\n\n\n\n\n",
        "source": "_posts/BitmapOccupyMemory.md",
        "raw": "---\ntitle: Bitmap到底占多少内存\ndate: 2016-07-06 18:03:34\ntags:\n- Android \n- Bitmap\ncategories:\n- Android开发笔记\n---\n\n转至:[Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=498)\nBugly 技术干货系列内容主要涉及移动开发方向，是由 Bugly 邀请腾讯内部各位技术大咖，通过日常工作经验的总结以及感悟撰写而成，内容均属原创，转载请标明出处。\n\n<!--more-->\n# 写在前面 \n本文涉及到屏幕密度的讨论，这里先要搞清楚 DisplayMetrics 的两个变量，摘录官方文档的解释：\n\n- density：The logical density of the display. This is a scaling factor for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (for example a 240x320, 1.5”x2” screen), providing the baseline of the system’s display. Thus on a 160dpi screen this density value will be 1; on a 120 dpi screen it would be .75; etc.\nThis value does not exactly follow the real screen size (as given by xdpi and ydpi, but rather is used to scale the size of the overall UI in steps based on gross changes in the display dpi. For example, a 240x320 screen will have a density of 1 even if its width is 1.8”, 1.3”, etc. However, if the screen resolution is increased to 320x480 but the screen size remained 1.5”x2” then the density would be increased (probably to 1.5).\n- densityDpi：The screen density expressed as dots-per-inch.\n\n\n\n简单来说，可以理解为 density 的数值是 1dp=density px；densityDpi 是屏幕每英寸对应多少个点（不是像素点），在 DisplayMetrics 当中，这两个的关系是线性的：\n\n| density | 1.0 | 1.5 | 2.0 | 3.0 | 4.0 |\n| -|:-:|:-:|:-:|:-:| :-:|\n| densityDpi | 160 | 240 | 320 | 480 | 640 |\n\n\n为了不引起混淆，本文所有提到的密度除非特别说明，都指的是 densityDpi，当然如果你愿意，也可以用 density 来说明问题。\n另外，本文的依据主要来自 android 5.0 的源码，其他版本可能略有出入。文章难免疏漏，欢迎指正～\n\n# 占了多大内存？\n\n做移动客户端开发的朋友们肯定都因为图头疼过，说起来曾经还有过 leader 因为组里面一哥们在工程里面加了一张 jpg 的图发脾气的事儿，哈哈。\n为什么头疼呢？吃内存呗，时不时还给你来个 OOM 冲冲喜，让你的每一天过得有滋有味（真是没救了）。那每次工程里面增加一张图片的时候，我们都需要关心这货究竟要占多大的坑，占多大呢？Android API 有个方便的方法，\n\n``` java\npublic final int getByteCount() {\n    // int result permits bitmaps up to 46,340 x 46,340\n    return getRowBytes() * getHeight();\n}\n```\n\n**举个列子**\n一张 **522x686** 的**PNG ** 图片，我把它放到 **drawable-xxhdpi** 目录下，在**三星s6**上加载，占用内存2547360B，就可以用这个方法获取到。\n\n# 给我一张图我告诉你占多大内存\n每次都问 Bitmap 你到底多大啦。。感觉怪怪的，毕竟我们不能总是去问，而不去搞清楚它为嘛介么大吧。能不能给它算个命，算算它究竟多大呢？当然是可以的，很简单嘛，我们直接顺藤摸瓜，找出真凶，哦不，找出答案。\n\n## getByteCount\ngetByteCount 的源码我们刚刚已经认识了，当我们问 Bitmap 大小的时候，这孩子也是先拿到出生年月日，然后算出来的，那么问题来了，getHeight 就是图片的高度（单位：px），getRowBytes 是什么？\n\n``` java\npublic final int getrowBytes() {\n   if (mRecycled) {\n          Log.w(TAG, \"Called getRowBytes() on a recycle()'d bitmap! This is undefined behavior!\");\n   }\n   return nativeRowBytes(mFinalizer.mNativeBitmap);\n}\n```\n\n额，感觉太对了啊，要 JNI 了。由于在下 C++ 实在用得少，每次想起 JNI 都请想象脑门磕墙的场景，不过呢，毛爷爷说过，一切反动派都是纸老虎~与 \n\n**nativeRowBytes** 对应的函数如下：\n**Bitmap.cpp**\n\n```java\nstatic jint Bitmap_rowBytes(JNIEnv* env, jobject, jlong bitmapHandle) {\n     SkBitmap* bitmap = reinterpret_cast<SkBitmap*>(bitmapHandle)\n     return static_cast<jint>(bitmap->rowBytes());\n}\n```\n\n等等，我们好像发现了什么，原来 Bitmap 本质上就是一个 SkBitmap。。而这个 SkBitmap 也是大有来头，不信你瞧：[Skia](https://skia.org/)。啥也别说了，赶紧瞅瞅 SkBitmap。\n\n**SkBitmap.h**\n```java\nsize_t SkBitmap::ComputeRowBytes(Config c, int width) {\n    return SkColorTypeMinRowBytes(SkBitmapConfigToColorType(c), width);\n}\nSkImageInfo.h\n \nstatic int SkColorTypeBytesPerPixel(SkColorType ct) {\n   static const uint8_t gSize[] = {\n    0,  // Unknown\n    1,  // Alpha_8\n    2,  // RGB_565\n    2,  // ARGB_4444\n    4,  // RGBA_8888\n    4,  // BGRA_8888\n    1,  // kIndex_8\n  };\n  SK_COMPILE_ASSERT(SK_ARRAY_COUNT(gSize) == (size_t)(kLastEnum_SkColorType + 1),\n                size_mismatch_with_SkColorType_enum);\n \n   SkASSERT((size_t)ct < SK_ARRAY_COUNT(gSize));\n   return gSize[ct];\n}\n \nstatic inline size_t SkColorTypeMinRowBytes(SkColorType ct, int width) {\n    return width * SkColorTypeBytesPerPixel(ct);\n}\n```\n\n好，跟踪到这里，我们发现 ARGB_8888（也就是我们最常用的 Bitmap 的格式）的一个像素占用 4byte，那么 rowBytes 实际上就是 4*width bytes。\n那么结论出来了，一张 ARGB_8888 的 Bitmap 占用内存的计算公式\n**bitmapInRam = bitmapWidth*bitmapHeight *4 bytes**\n说到这儿你以为故事就结束了么？有本事你拿去试，算出来的和你获取到的总是会差个倍数，为啥呢？\n还记得我们最开始给出的那个例子么？\n\n> 一张**522*686**的 **PNG** 图片，我把它放到 **drawable-xxhdpi**\n> 目录下，在**三星s6**上加载，占用内存2547360B，就可以用这个方法获取到。\n\n然而公式计算出来的可是1432368B。。。\n\n## Density\n知道我为什么在举例的时候那么费劲的说放到xxx目录下，还要说用xxx手机么？你以为 Bitmap 加载只跟宽高有关么？Naive。\n还是先看代码，我们读取的是 drawable 目录下面的图片，用的是 decodeResource 方法，该方法本质上就两步：\n\n - 读取原始资源，这个调用了 Resource.openRawResource 方法，这个方法调用完成之后会对 TypedValue 进行赋值，其中包含了原始资源的 density 等信息；\n -  调用 decodeResourceStream 对原始资源进行解码和适配。这个过程实际上就是原始资源的 density 到屏幕 density 的一个映射。\n \n \n原始资源的 density 其实取决于资源存放的目录（比如 xxhdpi 对应的是480），而屏幕 density 的赋值，请看下面这段代码：\n\n**BitmapFactory.java**\n```java\npublic static Bitmap decodeResourceStream(Resources res, TypedValue value,\n    InputStream is, Rect pad, Options opts) {\n \n//实际上，我们这里的opts是null的，所以在这里初始化。\nif (opts == null) {\n    opts = new Options();\n}\n \nif (opts.inDensity == 0 && value != null) {\n    final int density = value.density;\n    if (density == TypedValue.DENSITY_DEFAULT) {\n        opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;\n    } else if (density != TypedValue.DENSITY_NONE) {\n        opts.inDensity = density; //这里density的值如果对应资源目录为hdpi的话，就是240\n    }\n}\n \nif (opts.inTargetDensity == 0 && res != null) {\n//请注意，inTargetDensity就是当前的显示密度，比如三星s6时就是640\n    opts.inTargetDensity = res.getDisplayMetrics().densityDpi;\n}\n \nreturn decodeStream(is, pad, opts);\n}\n```\n\n我们看到 opts 这个值被初始化，而它的构造居然如此简单：\n```java\npublic Options() {\n   inDither = false;\n   inScaled = true;\n   inPremultiplied = true;\n}\n```\n\n所以我们就很容易的看到，Option.inScreenDensity 这个值没有被初始化，而实际上后面我们也会看到这个值根本不会用到；我们最应该关心的是什么呢？是 inDensity 和 inTargetDensity，这两个值与下面 cpp 文件里面的 density 和 targetDensity 相对应——重复一下，inDensity 就是原始资源的 density，inTargetDensity 就是屏幕的 density。\n紧接着，用到了 nativeDecodeStream 方法，不重要的代码直接略过，直接给出最关键的 doDecode 函数的代码：\n\n**BitmapFactory.cpp**\n\n```java\nstatic jobject doDecode(JNIEnv* env, SkStreamRewindable* stream, jobject padding, jobject options) {\n \n......\n    if (env->GetBooleanField(options, gOptions_scaledFieldID)) {\n        const int density = env->GetIntField(options, gOptions_densityFieldID);//对应hdpi的时候，是240\n        const int targetDensity = env->GetIntField(options, gOptions_targetDensityFieldID);//三星s6的为640\n        const int screenDensity = env->GetIntField(options, gOptions_screenDensityFieldID);\n        if (density != 0 && targetDensity != 0 && density != screenDensity) {\n            scale = (float) targetDensity / density;\n        }\n    }\n}\n \nconst bool willScale = scale != 1.0f;\n......\nSkBitmap decodingBitmap;\nif (!decoder->decode(stream, &decodingBitmap, prefColorType,decodeMode)) {\n   return nullObjectReturn(\"decoder->decode returned false\");\n}\n//这里这个deodingBitmap就是解码出来的bitmap，大小是图片原始的大小\nint scaledWidth = decodingBitmap.width();\nint scaledHeight = decodingBitmap.height();\nif (willScale && decodeMode != SkImageDecoder::kDecodeBounds_Mode) {\n    scaledWidth = int(scaledWidth * scale + 0.5f);\n    scaledHeight = int(scaledHeight * scale + 0.5f);\n}\nif (willScale) {\n    const float sx = scaledWidth / float(decodingBitmap.width());\n    const float sy = scaledHeight / float(decodingBitmap.height());\n \n    // TODO: avoid copying when scaled size equals decodingBitmap size\n    SkColorType colorType = colorTypeForScaledOutput(decodingBitmap.colorType());\n    // FIXME: If the alphaType is kUnpremul and the image has alpha, the\n    // colors may not be correct, since Skia does not yet support drawing\n    // to/from unpremultiplied bitmaps.\n    outputBitmap->setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,\n            colorType, decodingBitmap.alphaType()));\n    if (!outputBitmap->allocPixels(outputAllocator, NULL)) {\n        return nullObjectReturn(\"allocation failed for scaled bitmap\");\n    }\n \n    // If outputBitmap's pixels are newly allocated by Java, there is no need\n    // to erase to 0, since the pixels were initialized to 0.\n    if (outputAllocator != &javaAllocator) {\n        outputBitmap->eraseColor(0);\n    }\n \n    SkPaint paint;\n    paint.setFilterLevel(SkPaint::kLow_FilterLevel);\n \n    SkCanvas canvas(*outputBitmap);\n    canvas.scale(sx, sy);\n    canvas.drawBitmap(decodingBitmap, 0.0f, 0.0f, &paint);\n}\n......\n}\n```\n\n注意到其中有个 density 和 targetDensity，前者是 decodingBitmap 的 density，这个值跟这张图片的放置的目录有关（比如 hdpi 是240，xxhdpi 是480），这部分代码我跟了一下，太长了，就不列出来了；targetDensity 实际上是我们加载图片的目标 density，这个值的来源我们已经在前面给出了，就是 DisplayMetrics 的 densityDpi，如果是三星s6那么这个数值就是640。sx 和sy 实际上是约等于 scale 的，因为 scaledWidth 和 scaledHeight 是由 width 和 height 乘以 scale 得到的。我们看到 Canvas 放大了 scale 倍，然后又把读到内存的这张 bitmap 画上去，相当于把这张 bitmap 放大了 scale 倍。\n\n再来看我们的例子：\n\n> 一张**522*686**的**PNG** 图片，我把它放到 **drawable-xxhdpi** 目录下，在三星s6上加载，占用内存2547360B，其中\n> density 对应 xxhdpi 为480，targetDensity 对应三星s6的密度为640： **522/480 * 640 * 686/480 * 640 * 4 = 2546432B**\n\n## 精度\n越来越有趣了是不是，你肯定会发现我们这么细致的计算还是跟获取到的数值\n**不！一！样！**\n为什么呢？由于结果已经非常接近，我们很自然地想到精度问题。来，再把上面这段代码中的一句拿出来看看：\n\n```java\noutputBitmap->setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,\n            colorType, decodingBitmap.alphaType()));\n```\n\n我们看到最终输出的 outputBitmap 的大小是scaledWidth*scaledHeight，我们把这两个变量计算的片段拿出来给大家一看就明白了：\n\n```java\nif (willScale && decodeMode != SkImageDecoder::kDecodeBounds_Mode) {\n    scaledWidth = int(scaledWidth * scale + 0.5f);\n    scaledHeight = int(scaledHeight * scale + 0.5f);\n}\n```\n\n在我们的例子中，\n**scaledWidth** = **int( 522 * 640 / 480f + 0.5)** = **int(696.5) = 696**\n**scaledHeight = int( 686 * 640 / 480f + 0.5) = int(915.16666…) = 915**\n下面就是见证奇迹的时刻：\n**915 * 696 * 4 = 2547360**\n有木有很兴奋！有木有很激动！！\n写到这里，突然想起《STL源码剖析》一书的扉页，侯捷先生只写了一句话：\n\n    “源码之前，了无秘密”\n\n## 小结\n其实，通过前面的代码跟踪，我们就不难知道，Bitmap 在内存当中占用的大小其实取决于：\n\n - 色彩格式，前面我们已经提到，如果是 ARGB8888 那么就是一个像素4个字节，如果是 RGB565 那就是2个字节\n -  原始文件存放的资源目录（是 hdpi 还是 xxhdpi 可不能傻傻分不清楚哈）\n -  目标屏幕的密度（所以同等条件下，红米在资源方面消耗的内存肯定是要小于三星S6的）\n\n# 想办法减少 Bitmap 内存占用\n## Jpg 和 Png\n说到这里，肯定会有人会说，我们用 jpg 吧，jpg 格式的图片不应该比 png 小么？\n这确实是个好问题，因为同样一张图片，jpg 确实比 png 会多少小一些（甚至很多），原因很简单，jpg 是一种**有损**压缩的图片**存储格式**，而 png 则是 **无损**压缩的图片**存储格式**，显而易见，jpg 会比 png 小，代价也是显而易见的。\n\n可是，这说的是文件存储范畴的事情，它们只存在于文件系统，而非内存或者显存。说得简单一点儿，我有一个极品飞车的免安装硬盘版的压缩包放在我的磁盘里面，这个游戏是不能玩的，我需要先解压，才能玩——jpg 也好，png 也好就是个压缩包的概念，而我们讨论的内存占用则是从使用角度来讨论的。\n所以，jpg 格式的图片与 png 格式的图片在内存当中不应该有什么不同。\n\n    『啪！！！』\n    『谁这么缺德！！打人不打脸好么！』\n\n肯定有人有意见，jpg 图片读到内存就是会小，还会给我拿出例子。当然，他说的不一定是错的。因为 jpg 的图片没有 alpha 通道！！所以读到内存的时候如果用 RGB565的格式存到内存，这下大小只有 ARGB8888的一半，能不小么。。。\n不过，抛开 Android 这个平台不谈，从出图的角度来看的话，jpg 格式的图片大小也不一定比 png 的小，这要取决于图像信息的内容：\n\n    JPG 不适用于所含颜色很少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。对于需要高保真的较复杂的图像，PNG 虽然能无损压缩，但图片文件较大。\n\n如果仅仅是为了 Bitmap 读到内存中的大小而考虑的话，jpg 也好 png 也好，没有什么实质的差别；二者的差别主要体现在：\n\n - alpha 你是否真的需要？如果需要 alpha 通道，那么没有别的选择，用 png。\n -  你的图色值丰富还是单调？就像刚才提到的，如果色值丰富，那么用jpg，如果作为按钮的背景，请用 png。\n -  对安装包大小的要求是否非常严格？如果你的 app 资源很少，安装包大小问题不是很凸显，看情况选择 jpg 或者\n -   png（不过，我想现在对资源文件没有苛求的应用会很少吧。。） 目标用户的 cpu 是否强劲？jpg 的图像压缩算法比 png\n -  耗时。这方面还是要酌情选择，前几年做了一段时间 Cocos2dx，由于资源非常多，项目组要求统一使用 png，可能就是出于这方面的考虑。\n\n嗯，跑题了，我们其实想说的是怎么减少内存占用的。。这一小节只是想说，休想通过这个方法来减少内存占用。。。XD\n\n## 使用 inSampleSize\n有些朋友一看到这个肯定就笑了。采样嘛，我以前是学信号处理的，一看到 Sample 就抽抽。。哈哈开个玩笑，这个采样其实就跟统计学里面的采样是一样的，在保证最终效果满足要求的前提下减少样本规模，方便后续的数据采集和处理。\n这个方法主要用在图片资源本身较大，或者适当地采样并不会影响视觉效果的条件下，这时候我们输出地目标可能相对较小，对图片分辨率、大小要求不是非常的严格。\n\n**举个例子**\n我们现在有个需求，要求将一张图片进行模糊，然后作为 ImageView 的 src 呈现给用户，而我们的原始图片大小为 1080*1920，如果我们直接拿来模糊的话，一方面模糊的过程费时费力，另一方面生成的图片又占用内存，实际上在模糊运算过程中可能会存在输入和输出并存的情况，此时内存将会有一个短暂的峰值。\n这时候你一定会想到三个字母在你的脑海里挥之不去，它们就是『OOM』。\n既然图片最终是要被模糊的，也看不太情况，还不如直接用一张采样后的图片，如果采样率为 2，那么读出来的图片只有原始图片的 1/4 大小，真是何乐而不为呢？？\n``` java\nBitmapFactory.Options options = new Options();\noptions.inSampleSize = 2;\nBitmap bitmap = BitmapFactory.decodeResource(getResources(), resId, options);\n```\n\n## 使用矩阵\n用到 Bitmap 的地方，总会见到 Matrix。这时候你会想到什么？\n\n    『基友』\n    『是在下输了。。』\n\n其实想想，Bitmap 的像素点阵，还不就是个矩阵，真是你中有我，我中有你的交情啊。那么什么时候用矩阵呢？\n\n**大图小用用采样，小图大用用矩阵。**\n还是用前面模糊图片的例子，我们不是采样了么？内存是小了，可是图的尺寸也小了啊，我要用 Canvas 绘制这张图可怎么办？当然是用矩阵了：\n**方式一：**\n\n``` java\nMatrix matrix = new Matrix();\nmatrix.preScale(2, 2, 0f, 0f);\n//如果使用直接替换矩阵的话，在Nexus6 5.1.1上必须关闭硬件加速\ncanvas.concat(matrix);\ncanvas.drawBitmap(bitmap, 0,0, paint);\n```\n\n*需要注意的是，在使用搭载 5.1.1 原生系统的 Nexus6 进行测试时发现，如果使用 Canvas 的 setMatrix 方法，可能会导致与矩阵相关的元素的绘制存在问题，本例当中如果使用 setMatrix 方法，bitmap 将不会出现在屏幕上。因此请尽量使用 canvas 的 scale、rotate 这样的方法，或者使用 concat 方法。*\n\n方式二：\n``` java\nMatrix matrix = new Matrix();\nmatrix.preScale(2, 2, 0, 0);\ncanvas.drawBitmap(bitmap, matrix, paint);\n```\n\n这样，绘制出来的图就是放大以后的效果了，不过占用的内存却仍然是我们采样出来的大小。\n如果我要把图片放到 ImageView 当中呢？一样可以，请看：\n``` java\nMatrix matrix = new Matrix();\nmatrix.postScale(2, 2, 0, 0);\nimageView.setImageMatrix(matrix);\nimageView.setScaleType(ScaleType.MATRIX);\nimageView.setImageBitmap(bitmap);\n```\n\n## 合理选择Bitmap的像素格式\n其实前面我们已经多次提到这个问题。ARGB8888格式的图片，每像素占用 4 Byte，而 RGB565则是 2 Byte。我们先看下有多少种格式可选：\n|  格式\t| 描述 |\n| - | :-|\n|ALPHA_8| 只有一个alpha通道 |\n|ARGB_4444\t| 这个从API 13开始不建议使用，因为质量太差|\n|ARGB_8888\t| ARGB四个通道，每个通道8bit |\n|RGB_565\t|每个像素占2Byte，其中红色占5bit，绿色占6bit，蓝色占5bit |\n\n这几个当中，\n**ALPHA8** 没必要用，因为我们随便用个颜色就可以搞定的。\n**ARGB4444** 虽然占用内存只有 **ARGB8888** 的一半，不过已经被官方嫌弃，失宠了。。『又要占省内存，又要看着爽，臣妾做不到啊T T』。\n**ARGB8888** 是最常用的，大家应该最熟悉了。\n**RGB565** 看到这个，我就看到了资源优化配置无处不在，这个绿色。。（不行了，突然好邪恶XD），其实如果不需要 alpha 通道，特别是资源本身为 jpg 格式的情况下，用这个格式比较理想。\n\n## 高能：索引位图(Indexed Bitmap)\n\n索引位图，每个像素只占 1 Byte，不仅支持 RGB，还支持 alpha，而且看上去效果还不错！等等，请收起你的口水，Android 官方并不支持这个。是的，你没看错，官方并不支持。\n```java\npublic enum Config {\n    // these native values must match up with the enum in SkBitmap.h\n \n    ALPHA_8     (2),\n    RGB_565     (4),\n    ARGB_4444   (5),\n    ARGB_8888   (6);\n \n    final int nativeInt;\n}\n```\n\n不过，Skia 引擎是支持的，不信你再看：\n```java\nenum Config {\n   kNo_Config,   //!< bitmap has not been configured\n     kA8_Config,   //!< 8-bits per pixel, with only alpha specified (0 is transparent, 0xFF is opaque)\n \n   //看这里看这里！！↓↓↓↓↓\n    kIndex8_Config, //!< 8-bits per pixel, using SkColorTable to specify the colors  \n    kRGB_565_Config, //!< 16-bits per pixel, (see SkColorPriv.h for packing)\n    kARGB_4444_Config, //!< 16-bits per pixel, (see SkColorPriv.h for packing)\n    kARGB_8888_Config, //!< 32-bits per pixel, (see SkColorPriv.h for packing)\n    kRLE_Index8_Config,\n \n    kConfigCount\n};\n```\n\n其实 Java 层的枚举变量的 nativeInt 对应的就是 Skia 库当中枚举的索引值，所以，如果我们能够拿到这个索引是不是就可以了？对不起，拿不到。\n不行了，废话这么多，肯定要挨板砖了T T。\n不过呢，在 png 的解码库里面有这么一段代码：\n\n```java\nbool SkPNGImageDecoder::getBitmapColorType(png_structp png_ptr, png_infop info_ptr,\n                                       SkColorType* colorTypep,\n                                       bool* hasAlphap,\n                                       SkPMColor* SK_RESTRICT theTranspColorp) {\npng_uint_32 origWidth, origHeight;\nint bitDepth, colorType;\npng_get_IHDR(png_ptr, info_ptr, &origWidth, &origHeight, &bitDepth,\n             &colorType, int_p_NULL, int_p_NULL, int_p_NULL);\n \n#ifdef PNG_sBIT_SUPPORTED\n  // check for sBIT chunk data, in case we should disable dithering because\n  // our data is not truely 8bits per component\n  png_color_8p sig_bit;\n  if (this->getDitherImage() && png_get_sBIT(png_ptr, info_ptr, &sig_bit)) {\n#if 0\n    SkDebugf(\"----- sBIT %d %d %d %d\\n\", sig_bit->red, sig_bit->green,\n             sig_bit->blue, sig_bit->alpha);\n#endif\n    // 0 seems to indicate no information available\n    if (pos_le(sig_bit->red, SK_R16_BITS) &&\n        pos_le(sig_bit->green, SK_G16_BITS) &&\n        pos_le(sig_bit->blue, SK_B16_BITS)) {\n        this->setDitherImage(false);\n    }\n}\n#endif\n \n \nif (colorType == PNG_COLOR_TYPE_PALETTE) {\n    bool paletteHasAlpha = hasTransparencyInPalette(png_ptr, info_ptr);\n    *colorTypep = this->getPrefColorType(kIndex_SrcDepth, paletteHasAlpha);\n    // now see if we can upscale to their requested colortype\n    //这段代码，如果返回false，那么colorType就被置为索引了，那么我们看看如何返回false\n    if (!canUpscalePaletteToConfig(*colorTypep, paletteHasAlpha)) {\n        *colorTypep = kIndex_8_SkColorType;\n    }\n} else {\n...... \n}\nreturn true;\n}\n```\n\n**canUpscalePaletteToConfig** 函数如果返回false，那么 colorType 就被置为 **kIndex_8_SkColorType** 了。\n\n```java\nstatic bool canUpscalePaletteToConfig(SkColorType dstColorType, bool srcHasAlpha) {\n  switch (dstColorType) {\n    case kN32_SkColorType:\n    case kARGB_4444_SkColorType:\n        return true;\n    case kRGB_565_SkColorType:\n        // only return true if the src is opaque (since 565 is opaque)\n        return !srcHasAlpha;\n    default:\n        return false;\n}\n}\n```\n如果传入的 **dstColorType** 是 **kRGB_565_SkColorType**，同时图片还有 alpha 通道，那么返回 false~~咳咳，那么问题来了，这个**dstColorType** 是哪儿来的？？就是我们在 decode 的时候，传入的 **Options** 的 **inPreferredConfig**。\n\n下面是实验时间~\n**准备**：在 assets 目录当中放了一个叫 index.png 的文件，大小192*192，这个文件是通过 PhotoShop 编辑之后生成的索引格式的图片。\n**代码**：\n\n```java\ntry {\n   Options options = new Options();\n   options.inPreferredConfig = Config.RGB_565;\nBitmap bitmap = BitmapFactory.decodeStream(getResources().getAssets().open(\"index.png\"), null, options);\n   Log.d(TAG, \"bitmap.getConfig() = \" + bitmap.getConfig());\n   Log.d(TAG, \"scaled bitmap.getByteCount() = \" + bitmap.getByteCount());\n   imageView.setImageBitmap(bitmap);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n程序运行在 Nexus6上，由于从 assets 中读取不涉及前面讨论到的 scale 的问题，所以这张图片读到内存以后的大小理论值（ARGB8888）：\n**192 * 192 *4=147456**\n\n好，运行我们的代码，看输出的 Config 和 ByteCount：\n\n先说大小为什么只有 36864，我们知道如果前面的讨论是没有问题的话，那么这次解码出来的 Bitmap 应该是索引格式，那么占用的内存只有 ARGB 8888 的1/4是意料之中的；再说 Config 为什么为 null。。额。。黑户。。官方说：\n\n    public final Bitmap.Config getConfig ()\n    Added in API level 1\n    If the bitmap’s internal config is in one of the public formats, return that config, otherwise return null.\n\n再说一遍，黑户。。XD。\n看来这个法子还真行啊，占用内存一下小很多。不过由于官方并未做出支持，因此这个方法有诸多限制，比如不能在 xml 中直接配置，，生成的 Bitmap 不能用于构建 Canvas 等等。\n\n## 不要辜负。。。『哦，不要姑父！』\n其实我们一直在抱怨资源大，有时候有些场景其实不需要图片也能完成的。比如在开发中我们会经常遇到 Loading，这些 Loading 通常就是几帧图片，图片也比较简单，只需要黑白灰加 alpha 就齐了。\n\n    『排期太紧了，这些给我出一系列图吧』\n    『好，不过每张图都是 300*30 0的 png 哈，总共 5 张，为了适配不同的分辨率，需要出 xxhdpi 和 xxxhdpi 的两套图。。』\n\nOrz。。。\n如果是这样，你还是自定义一个 View，覆写 onDraw 自己画一下好了。。。\n\n# 结语\n写了这么多，我们来稍稍理一理，本文主要讨论了如何运行时获取 Bitmap 占用内存的大小，如果事先根据 Bitmap 的格式、读取方式等算出其占用内存的大小，后面又整理了一些常见的 Bitmap 使用建议。突然好像说，是时候研究一下 Skia 引擎了。\n怎么办，看来扔了好几年的 C++还是要捡回来么。。噗。。。\n\n内容转至:[Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=498)\n\n\n\n\n\n",
        "slug": "BitmapOccupyMemory",
        "published": 1,
        "updated": "2020-05-19T02:32:04.679Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2n000o52j914b18mmy",
        "content": "<p>转至:<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=498\" target=\"_blank\" rel=\"noopener\">Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？</a><br>Bugly 技术干货系列内容主要涉及移动开发方向，是由 Bugly 邀请腾讯内部各位技术大咖，通过日常工作经验的总结以及感悟撰写而成，内容均属原创，转载请标明出处。</p>\n<a id=\"more\"></a>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>本文涉及到屏幕密度的讨论，这里先要搞清楚 DisplayMetrics 的两个变量，摘录官方文档的解释：</p>\n<ul>\n<li>density：The logical density of the display. This is a scaling factor for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (for example a 240x320, 1.5”x2” screen), providing the baseline of the system’s display. Thus on a 160dpi screen this density value will be 1; on a 120 dpi screen it would be .75; etc.<br>This value does not exactly follow the real screen size (as given by xdpi and ydpi, but rather is used to scale the size of the overall UI in steps based on gross changes in the display dpi. For example, a 240x320 screen will have a density of 1 even if its width is 1.8”, 1.3”, etc. However, if the screen resolution is increased to 320x480 but the screen size remained 1.5”x2” then the density would be increased (probably to 1.5).</li>\n<li>densityDpi：The screen density expressed as dots-per-inch.</li>\n</ul>\n<p>简单来说，可以理解为 density 的数值是 1dp=density px；densityDpi 是屏幕每英寸对应多少个点（不是像素点），在 DisplayMetrics 当中，这两个的关系是线性的：</p>\n<table>\n<thead>\n<tr>\n<th>density</th>\n<th style=\"text-align:center\">1.0</th>\n<th style=\"text-align:center\">1.5</th>\n<th style=\"text-align:center\">2.0</th>\n<th style=\"text-align:center\">3.0</th>\n<th style=\"text-align:center\">4.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>densityDpi</td>\n<td style=\"text-align:center\">160</td>\n<td style=\"text-align:center\">240</td>\n<td style=\"text-align:center\">320</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">640</td>\n</tr>\n</tbody>\n</table>\n<p>为了不引起混淆，本文所有提到的密度除非特别说明，都指的是 densityDpi，当然如果你愿意，也可以用 density 来说明问题。<br>另外，本文的依据主要来自 android 5.0 的源码，其他版本可能略有出入。文章难免疏漏，欢迎指正～</p>\n<h1 id=\"占了多大内存？\"><a href=\"#占了多大内存？\" class=\"headerlink\" title=\"占了多大内存？\"></a>占了多大内存？</h1><p>做移动客户端开发的朋友们肯定都因为图头疼过，说起来曾经还有过 leader 因为组里面一哥们在工程里面加了一张 jpg 的图发脾气的事儿，哈哈。<br>为什么头疼呢？吃内存呗，时不时还给你来个 OOM 冲冲喜，让你的每一天过得有滋有味（真是没救了）。那每次工程里面增加一张图片的时候，我们都需要关心这货究竟要占多大的坑，占多大呢？Android API 有个方便的方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getByteCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// int result permits bitmaps up to 46,340 x 46,340</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getRowBytes() * getHeight();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>举个列子</strong><br>一张 <strong>522x686</strong> 的<strong>PNG </strong> 图片，我把它放到 <strong>drawable-xxhdpi</strong> 目录下，在<strong>三星s6</strong>上加载，占用内存2547360B，就可以用这个方法获取到。</p>\n<h1 id=\"给我一张图我告诉你占多大内存\"><a href=\"#给我一张图我告诉你占多大内存\" class=\"headerlink\" title=\"给我一张图我告诉你占多大内存\"></a>给我一张图我告诉你占多大内存</h1><p>每次都问 Bitmap 你到底多大啦。。感觉怪怪的，毕竟我们不能总是去问，而不去搞清楚它为嘛介么大吧。能不能给它算个命，算算它究竟多大呢？当然是可以的，很简单嘛，我们直接顺藤摸瓜，找出真凶，哦不，找出答案。</p>\n<h2 id=\"getByteCount\"><a href=\"#getByteCount\" class=\"headerlink\" title=\"getByteCount\"></a>getByteCount</h2><p>getByteCount 的源码我们刚刚已经认识了，当我们问 Bitmap 大小的时候，这孩子也是先拿到出生年月日，然后算出来的，那么问题来了，getHeight 就是图片的高度（单位：px），getRowBytes 是什么？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getrowBytes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (mRecycled) &#123;</span><br><span class=\"line\">          Log.w(TAG, <span class=\"string\">\"Called getRowBytes() on a recycle()'d bitmap! This is undefined behavior!\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> nativeRowBytes(mFinalizer.mNativeBitmap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>额，感觉太对了啊，要 JNI 了。由于在下 C++ 实在用得少，每次想起 JNI 都请想象脑门磕墙的场景，不过呢，毛爷爷说过，一切反动派都是纸老虎~与 </p>\n<p><strong>nativeRowBytes</strong> 对应的函数如下：<br><strong>Bitmap.cpp</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jint <span class=\"title\">Bitmap_rowBytes</span><span class=\"params\">(JNIEnv* env, jobject, jlong bitmapHandle)</span> </span>&#123;</span><br><span class=\"line\">     SkBitmap* bitmap = reinterpret_cast&lt;SkBitmap*&gt;(bitmapHandle)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> static_cast&lt;jint&gt;(bitmap-&gt;rowBytes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>等等，我们好像发现了什么，原来 Bitmap 本质上就是一个 SkBitmap。。而这个 SkBitmap 也是大有来头，不信你瞧：<a href=\"https://skia.org/\" target=\"_blank\" rel=\"noopener\">Skia</a>。啥也别说了，赶紧瞅瞅 SkBitmap。</p>\n<p><strong>SkBitmap.h</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size_t SkBitmap::ComputeRowBytes(Config c, <span class=\"keyword\">int</span> width) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SkColorTypeMinRowBytes(SkBitmapConfigToColorType(c), width);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SkImageInfo.h</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">SkColorTypeBytesPerPixel</span><span class=\"params\">(SkColorType ct)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> uint8_t gSize[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>,  <span class=\"comment\">// Unknown</span></span><br><span class=\"line\">    <span class=\"number\">1</span>,  <span class=\"comment\">// Alpha_8</span></span><br><span class=\"line\">    <span class=\"number\">2</span>,  <span class=\"comment\">// RGB_565</span></span><br><span class=\"line\">    <span class=\"number\">2</span>,  <span class=\"comment\">// ARGB_4444</span></span><br><span class=\"line\">    <span class=\"number\">4</span>,  <span class=\"comment\">// RGBA_8888</span></span><br><span class=\"line\">    <span class=\"number\">4</span>,  <span class=\"comment\">// BGRA_8888</span></span><br><span class=\"line\">    <span class=\"number\">1</span>,  <span class=\"comment\">// kIndex_8</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  SK_COMPILE_ASSERT(SK_ARRAY_COUNT(gSize) == (size_t)(kLastEnum_SkColorType + <span class=\"number\">1</span>),</span><br><span class=\"line\">                size_mismatch_with_SkColorType_enum);</span><br><span class=\"line\"> </span><br><span class=\"line\">   SkASSERT((size_t)ct &lt; SK_ARRAY_COUNT(gSize));</span><br><span class=\"line\">   <span class=\"keyword\">return</span> gSize[ct];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> inline size_t <span class=\"title\">SkColorTypeMinRowBytes</span><span class=\"params\">(SkColorType ct, <span class=\"keyword\">int</span> width)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> width * SkColorTypeBytesPerPixel(ct);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好，跟踪到这里，我们发现 ARGB_8888（也就是我们最常用的 Bitmap 的格式）的一个像素占用 4byte，那么 rowBytes 实际上就是 4<em>width bytes。<br>那么结论出来了，一张 ARGB_8888 的 Bitmap 占用内存的计算公式<br>**bitmapInRam = bitmapWidth</em>bitmapHeight *4 bytes**<br>说到这儿你以为故事就结束了么？有本事你拿去试，算出来的和你获取到的总是会差个倍数，为啥呢？<br>还记得我们最开始给出的那个例子么？</p>\n<blockquote>\n<p>一张<strong>522*686</strong>的 <strong>PNG</strong> 图片，我把它放到 <strong>drawable-xxhdpi</strong><br>目录下，在<strong>三星s6</strong>上加载，占用内存2547360B，就可以用这个方法获取到。</p>\n</blockquote>\n<p>然而公式计算出来的可是1432368B。。。</p>\n<h2 id=\"Density\"><a href=\"#Density\" class=\"headerlink\" title=\"Density\"></a>Density</h2><p>知道我为什么在举例的时候那么费劲的说放到xxx目录下，还要说用xxx手机么？你以为 Bitmap 加载只跟宽高有关么？Naive。<br>还是先看代码，我们读取的是 drawable 目录下面的图片，用的是 decodeResource 方法，该方法本质上就两步：</p>\n<ul>\n<li>读取原始资源，这个调用了 Resource.openRawResource 方法，这个方法调用完成之后会对 TypedValue 进行赋值，其中包含了原始资源的 density 等信息；</li>\n<li>调用 decodeResourceStream 对原始资源进行解码和适配。这个过程实际上就是原始资源的 density 到屏幕 density 的一个映射。</li>\n</ul>\n<p>原始资源的 density 其实取决于资源存放的目录（比如 xxhdpi 对应的是480），而屏幕 density 的赋值，请看下面这段代码：</p>\n<p><strong>BitmapFactory.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeResourceStream</span><span class=\"params\">(Resources res, TypedValue value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    InputStream is, Rect pad, Options opts)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//实际上，我们这里的opts是null的，所以在这里初始化。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    opts = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts.inDensity == <span class=\"number\">0</span> &amp;&amp; value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> density = value.density;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (density == TypedValue.DENSITY_DEFAULT) &#123;</span><br><span class=\"line\">        opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (density != TypedValue.DENSITY_NONE) &#123;</span><br><span class=\"line\">        opts.inDensity = density; <span class=\"comment\">//这里density的值如果对应资源目录为hdpi的话，就是240</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts.inTargetDensity == <span class=\"number\">0</span> &amp;&amp; res != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//请注意，inTargetDensity就是当前的显示密度，比如三星s6时就是640</span></span><br><span class=\"line\">    opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">return</span> decodeStream(is, pad, opts);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们看到 opts 这个值被初始化，而它的构造居然如此简单：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Options</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   inDither = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   inScaled = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   inPremultiplied = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以我们就很容易的看到，Option.inScreenDensity 这个值没有被初始化，而实际上后面我们也会看到这个值根本不会用到；我们最应该关心的是什么呢？是 inDensity 和 inTargetDensity，这两个值与下面 cpp 文件里面的 density 和 targetDensity 相对应——重复一下，inDensity 就是原始资源的 density，inTargetDensity 就是屏幕的 density。<br>紧接着，用到了 nativeDecodeStream 方法，不重要的代码直接略过，直接给出最关键的 doDecode 函数的代码：</p>\n<p><strong>BitmapFactory.cpp</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jobject <span class=\"title\">doDecode</span><span class=\"params\">(JNIEnv* env, SkStreamRewindable* stream, jobject padding, jobject options)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">......</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env-&gt;GetBooleanField(options, gOptions_scaledFieldID)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> density = env-&gt;GetIntField(options, gOptions_densityFieldID);<span class=\"comment\">//对应hdpi的时候，是240</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> targetDensity = env-&gt;GetIntField(options, gOptions_targetDensityFieldID);<span class=\"comment\">//三星s6的为640</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> screenDensity = env-&gt;GetIntField(options, gOptions_screenDensityFieldID);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (density != <span class=\"number\">0</span> &amp;&amp; targetDensity != <span class=\"number\">0</span> &amp;&amp; density != screenDensity) &#123;</span><br><span class=\"line\">            scale = (<span class=\"keyword\">float</span>) targetDensity / density;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> bool willScale = scale != <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">......</span><br><span class=\"line\">SkBitmap decodingBitmap;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!decoder-&gt;decode(stream, &amp;decodingBitmap, prefColorType,decodeMode)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> nullObjectReturn(<span class=\"string\">\"decoder-&gt;decode returned false\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里这个deodingBitmap就是解码出来的bitmap，大小是图片原始的大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> scaledWidth = decodingBitmap.width();</span><br><span class=\"line\"><span class=\"keyword\">int</span> scaledHeight = decodingBitmap.height();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (willScale &amp;&amp; decodeMode != SkImageDecoder::kDecodeBounds_Mode) &#123;</span><br><span class=\"line\">    scaledWidth = <span class=\"keyword\">int</span>(scaledWidth * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    scaledHeight = <span class=\"keyword\">int</span>(scaledHeight * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (willScale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sx = scaledWidth / <span class=\"keyword\">float</span>(decodingBitmap.width());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sy = scaledHeight / <span class=\"keyword\">float</span>(decodingBitmap.height());</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> avoid copying when scaled size equals decodingBitmap size</span></span><br><span class=\"line\">    SkColorType colorType = colorTypeForScaledOutput(decodingBitmap.colorType());</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> If the alphaType is kUnpremul and the image has alpha, the</span></span><br><span class=\"line\">    <span class=\"comment\">// colors may not be correct, since Skia does not yet support drawing</span></span><br><span class=\"line\">    <span class=\"comment\">// to/from unpremultiplied bitmaps.</span></span><br><span class=\"line\">    outputBitmap-&gt;setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,</span><br><span class=\"line\">            colorType, decodingBitmap.alphaType()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!outputBitmap-&gt;allocPixels(outputAllocator, NULL)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nullObjectReturn(<span class=\"string\">\"allocation failed for scaled bitmap\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// If outputBitmap's pixels are newly allocated by Java, there is no need</span></span><br><span class=\"line\">    <span class=\"comment\">// to erase to 0, since the pixels were initialized to 0.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outputAllocator != &amp;javaAllocator) &#123;</span><br><span class=\"line\">        outputBitmap-&gt;eraseColor(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    SkPaint paint;</span><br><span class=\"line\">    paint.setFilterLevel(SkPaint::kLow_FilterLevel);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\">SkCanvas <span class=\"title\">canvas</span><span class=\"params\">(*outputBitmap)</span></span>;</span><br><span class=\"line\">    canvas.scale(sx, sy);</span><br><span class=\"line\">    canvas.drawBitmap(decodingBitmap, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, &amp;paint);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到其中有个 density 和 targetDensity，前者是 decodingBitmap 的 density，这个值跟这张图片的放置的目录有关（比如 hdpi 是240，xxhdpi 是480），这部分代码我跟了一下，太长了，就不列出来了；targetDensity 实际上是我们加载图片的目标 density，这个值的来源我们已经在前面给出了，就是 DisplayMetrics 的 densityDpi，如果是三星s6那么这个数值就是640。sx 和sy 实际上是约等于 scale 的，因为 scaledWidth 和 scaledHeight 是由 width 和 height 乘以 scale 得到的。我们看到 Canvas 放大了 scale 倍，然后又把读到内存的这张 bitmap 画上去，相当于把这张 bitmap 放大了 scale 倍。</p>\n<p>再来看我们的例子：</p>\n<blockquote>\n<p>一张<strong>522*686</strong>的<strong>PNG</strong> 图片，我把它放到 <strong>drawable-xxhdpi</strong> 目录下，在三星s6上加载，占用内存2547360B，其中<br>density 对应 xxhdpi 为480，targetDensity 对应三星s6的密度为640： <strong>522/480 <em> 640 </em> 686/480 <em> 640 </em> 4 = 2546432B</strong></p>\n</blockquote>\n<h2 id=\"精度\"><a href=\"#精度\" class=\"headerlink\" title=\"精度\"></a>精度</h2><p>越来越有趣了是不是，你肯定会发现我们这么细致的计算还是跟获取到的数值<br><strong>不！一！样！</strong><br>为什么呢？由于结果已经非常接近，我们很自然地想到精度问题。来，再把上面这段代码中的一句拿出来看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputBitmap-&gt;setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,</span><br><span class=\"line\">            colorType, decodingBitmap.alphaType()));</span><br></pre></td></tr></table></figure>\n<p>我们看到最终输出的 outputBitmap 的大小是scaledWidth*scaledHeight，我们把这两个变量计算的片段拿出来给大家一看就明白了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (willScale &amp;&amp; decodeMode != SkImageDecoder::kDecodeBounds_Mode) &#123;</span><br><span class=\"line\">    scaledWidth = <span class=\"keyword\">int</span>(scaledWidth * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    scaledHeight = <span class=\"keyword\">int</span>(scaledHeight * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在我们的例子中，<br><strong>scaledWidth</strong> = <strong>int( 522 * 640 / 480f + 0.5)</strong> = <strong>int(696.5) = 696</strong><br><strong>scaledHeight = int( 686 * 640 / 480f + 0.5) = int(915.16666…) = 915</strong><br>下面就是见证奇迹的时刻：<br><strong>915 <em> 696 </em> 4 = 2547360</strong><br>有木有很兴奋！有木有很激动！！<br>写到这里，突然想起《STL源码剖析》一书的扉页，侯捷先生只写了一句话：</p>\n<pre><code>“源码之前，了无秘密”\n</code></pre><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>其实，通过前面的代码跟踪，我们就不难知道，Bitmap 在内存当中占用的大小其实取决于：</p>\n<ul>\n<li>色彩格式，前面我们已经提到，如果是 ARGB8888 那么就是一个像素4个字节，如果是 RGB565 那就是2个字节</li>\n<li>原始文件存放的资源目录（是 hdpi 还是 xxhdpi 可不能傻傻分不清楚哈）</li>\n<li>目标屏幕的密度（所以同等条件下，红米在资源方面消耗的内存肯定是要小于三星S6的）</li>\n</ul>\n<h1 id=\"想办法减少-Bitmap-内存占用\"><a href=\"#想办法减少-Bitmap-内存占用\" class=\"headerlink\" title=\"想办法减少 Bitmap 内存占用\"></a>想办法减少 Bitmap 内存占用</h1><h2 id=\"Jpg-和-Png\"><a href=\"#Jpg-和-Png\" class=\"headerlink\" title=\"Jpg 和 Png\"></a>Jpg 和 Png</h2><p>说到这里，肯定会有人会说，我们用 jpg 吧，jpg 格式的图片不应该比 png 小么？<br>这确实是个好问题，因为同样一张图片，jpg 确实比 png 会多少小一些（甚至很多），原因很简单，jpg 是一种<strong>有损</strong>压缩的图片<strong>存储格式</strong>，而 png 则是 <strong>无损</strong>压缩的图片<strong>存储格式</strong>，显而易见，jpg 会比 png 小，代价也是显而易见的。</p>\n<p>可是，这说的是文件存储范畴的事情，它们只存在于文件系统，而非内存或者显存。说得简单一点儿，我有一个极品飞车的免安装硬盘版的压缩包放在我的磁盘里面，这个游戏是不能玩的，我需要先解压，才能玩——jpg 也好，png 也好就是个压缩包的概念，而我们讨论的内存占用则是从使用角度来讨论的。<br>所以，jpg 格式的图片与 png 格式的图片在内存当中不应该有什么不同。</p>\n<pre><code>『啪！！！』\n『谁这么缺德！！打人不打脸好么！』\n</code></pre><p>肯定有人有意见，jpg 图片读到内存就是会小，还会给我拿出例子。当然，他说的不一定是错的。因为 jpg 的图片没有 alpha 通道！！所以读到内存的时候如果用 RGB565的格式存到内存，这下大小只有 ARGB8888的一半，能不小么。。。<br>不过，抛开 Android 这个平台不谈，从出图的角度来看的话，jpg 格式的图片大小也不一定比 png 的小，这要取决于图像信息的内容：</p>\n<pre><code>JPG 不适用于所含颜色很少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。对于需要高保真的较复杂的图像，PNG 虽然能无损压缩，但图片文件较大。\n</code></pre><p>如果仅仅是为了 Bitmap 读到内存中的大小而考虑的话，jpg 也好 png 也好，没有什么实质的差别；二者的差别主要体现在：</p>\n<ul>\n<li>alpha 你是否真的需要？如果需要 alpha 通道，那么没有别的选择，用 png。</li>\n<li>你的图色值丰富还是单调？就像刚才提到的，如果色值丰富，那么用jpg，如果作为按钮的背景，请用 png。</li>\n<li>对安装包大小的要求是否非常严格？如果你的 app 资源很少，安装包大小问题不是很凸显，看情况选择 jpg 或者</li>\n<li>png（不过，我想现在对资源文件没有苛求的应用会很少吧。。） 目标用户的 cpu 是否强劲？jpg 的图像压缩算法比 png</li>\n<li>耗时。这方面还是要酌情选择，前几年做了一段时间 Cocos2dx，由于资源非常多，项目组要求统一使用 png，可能就是出于这方面的考虑。</li>\n</ul>\n<p>嗯，跑题了，我们其实想说的是怎么减少内存占用的。。这一小节只是想说，休想通过这个方法来减少内存占用。。。XD</p>\n<h2 id=\"使用-inSampleSize\"><a href=\"#使用-inSampleSize\" class=\"headerlink\" title=\"使用 inSampleSize\"></a>使用 inSampleSize</h2><p>有些朋友一看到这个肯定就笑了。采样嘛，我以前是学信号处理的，一看到 Sample 就抽抽。。哈哈开个玩笑，这个采样其实就跟统计学里面的采样是一样的，在保证最终效果满足要求的前提下减少样本规模，方便后续的数据采集和处理。<br>这个方法主要用在图片资源本身较大，或者适当地采样并不会影响视觉效果的条件下，这时候我们输出地目标可能相对较小，对图片分辨率、大小要求不是非常的严格。</p>\n<p><strong>举个例子</strong><br>我们现在有个需求，要求将一张图片进行模糊，然后作为 ImageView 的 src 呈现给用户，而我们的原始图片大小为 1080*1920，如果我们直接拿来模糊的话，一方面模糊的过程费时费力，另一方面生成的图片又占用内存，实际上在模糊运算过程中可能会存在输入和输出并存的情况，此时内存将会有一个短暂的峰值。<br>这时候你一定会想到三个字母在你的脑海里挥之不去，它们就是『OOM』。<br>既然图片最终是要被模糊的，也看不太情况，还不如直接用一张采样后的图片，如果采样率为 2，那么读出来的图片只有原始图片的 1/4 大小，真是何乐而不为呢？？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BitmapFactory.Options options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">options.inSampleSize = <span class=\"number\">2</span>;</span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), resId, options);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用矩阵\"><a href=\"#使用矩阵\" class=\"headerlink\" title=\"使用矩阵\"></a>使用矩阵</h2><p>用到 Bitmap 的地方，总会见到 Matrix。这时候你会想到什么？</p>\n<pre><code>『基友』\n『是在下输了。。』\n</code></pre><p>其实想想，Bitmap 的像素点阵，还不就是个矩阵，真是你中有我，我中有你的交情啊。那么什么时候用矩阵呢？</p>\n<p><strong>大图小用用采样，小图大用用矩阵。</strong><br>还是用前面模糊图片的例子，我们不是采样了么？内存是小了，可是图的尺寸也小了啊，我要用 Canvas 绘制这张图可怎么办？当然是用矩阵了：<br><strong>方式一：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">matrix.preScale(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果使用直接替换矩阵的话，在Nexus6 5.1.1上必须关闭硬件加速</span></span><br><span class=\"line\">canvas.concat(matrix);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, <span class=\"number\">0</span>,<span class=\"number\">0</span>, paint);</span><br></pre></td></tr></table></figure>\n<p><em>需要注意的是，在使用搭载 5.1.1 原生系统的 Nexus6 进行测试时发现，如果使用 Canvas 的 setMatrix 方法，可能会导致与矩阵相关的元素的绘制存在问题，本例当中如果使用 setMatrix 方法，bitmap 将不会出现在屏幕上。因此请尽量使用 canvas 的 scale、rotate 这样的方法，或者使用 concat 方法。</em></p>\n<p>方式二：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">matrix.preScale(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, matrix, paint);</span><br></pre></td></tr></table></figure></p>\n<p>这样，绘制出来的图就是放大以后的效果了，不过占用的内存却仍然是我们采样出来的大小。<br>如果我要把图片放到 ImageView 当中呢？一样可以，请看：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">matrix.postScale(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">imageView.setImageMatrix(matrix);</span><br><span class=\"line\">imageView.setScaleType(ScaleType.MATRIX);</span><br><span class=\"line\">imageView.setImageBitmap(bitmap);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"合理选择Bitmap的像素格式\"><a href=\"#合理选择Bitmap的像素格式\" class=\"headerlink\" title=\"合理选择Bitmap的像素格式\"></a>合理选择Bitmap的像素格式</h2><p>其实前面我们已经多次提到这个问题。ARGB8888格式的图片，每像素占用 4 Byte，而 RGB565则是 2 Byte。我们先看下有多少种格式可选：<br>|  格式    | 描述 |<br>| - | :-|<br>|ALPHA_8| 只有一个alpha通道 |<br>|ARGB_4444    | 这个从API 13开始不建议使用，因为质量太差|<br>|ARGB_8888    | ARGB四个通道，每个通道8bit |<br>|RGB_565    |每个像素占2Byte，其中红色占5bit，绿色占6bit，蓝色占5bit |</p>\n<p>这几个当中，<br><strong>ALPHA8</strong> 没必要用，因为我们随便用个颜色就可以搞定的。<br><strong>ARGB4444</strong> 虽然占用内存只有 <strong>ARGB8888</strong> 的一半，不过已经被官方嫌弃，失宠了。。『又要占省内存，又要看着爽，臣妾做不到啊T T』。<br><strong>ARGB8888</strong> 是最常用的，大家应该最熟悉了。<br><strong>RGB565</strong> 看到这个，我就看到了资源优化配置无处不在，这个绿色。。（不行了，突然好邪恶XD），其实如果不需要 alpha 通道，特别是资源本身为 jpg 格式的情况下，用这个格式比较理想。</p>\n<h2 id=\"高能：索引位图-Indexed-Bitmap\"><a href=\"#高能：索引位图-Indexed-Bitmap\" class=\"headerlink\" title=\"高能：索引位图(Indexed Bitmap)\"></a>高能：索引位图(Indexed Bitmap)</h2><p>索引位图，每个像素只占 1 Byte，不仅支持 RGB，还支持 alpha，而且看上去效果还不错！等等，请收起你的口水，Android 官方并不支持这个。是的，你没看错，官方并不支持。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Config &#123;</span><br><span class=\"line\">    <span class=\"comment\">// these native values must match up with the enum in SkBitmap.h</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    ALPHA_8     (<span class=\"number\">2</span>),</span><br><span class=\"line\">    RGB_565     (<span class=\"number\">4</span>),</span><br><span class=\"line\">    ARGB_4444   (<span class=\"number\">5</span>),</span><br><span class=\"line\">    ARGB_8888   (<span class=\"number\">6</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> nativeInt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不过，Skia 引擎是支持的，不信你再看：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Config &#123;</span><br><span class=\"line\">   kNo_Config,   <span class=\"comment\">//!&lt; bitmap has not been configured</span></span><br><span class=\"line\">     kA8_Config,   <span class=\"comment\">//!&lt; 8-bits per pixel, with only alpha specified (0 is transparent, 0xFF is opaque)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//看这里看这里！！↓↓↓↓↓</span></span><br><span class=\"line\">    kIndex8_Config, <span class=\"comment\">//!&lt; 8-bits per pixel, using SkColorTable to specify the colors  </span></span><br><span class=\"line\">    kRGB_565_Config, <span class=\"comment\">//!&lt; 16-bits per pixel, (see SkColorPriv.h for packing)</span></span><br><span class=\"line\">    kARGB_4444_Config, <span class=\"comment\">//!&lt; 16-bits per pixel, (see SkColorPriv.h for packing)</span></span><br><span class=\"line\">    kARGB_8888_Config, <span class=\"comment\">//!&lt; 32-bits per pixel, (see SkColorPriv.h for packing)</span></span><br><span class=\"line\">    kRLE_Index8_Config,</span><br><span class=\"line\"> </span><br><span class=\"line\">    kConfigCount</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其实 Java 层的枚举变量的 nativeInt 对应的就是 Skia 库当中枚举的索引值，所以，如果我们能够拿到这个索引是不是就可以了？对不起，拿不到。<br>不行了，废话这么多，肯定要挨板砖了T T。<br>不过呢，在 png 的解码库里面有这么一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool SkPNGImageDecoder::getBitmapColorType(png_structp png_ptr, png_infop info_ptr,</span><br><span class=\"line\">                                       SkColorType* colorTypep,</span><br><span class=\"line\">                                       bool* hasAlphap,</span><br><span class=\"line\">                                       SkPMColor* SK_RESTRICT theTranspColorp) &#123;</span><br><span class=\"line\">png_uint_32 origWidth, origHeight;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bitDepth, colorType;</span><br><span class=\"line\">png_get_IHDR(png_ptr, info_ptr, &amp;origWidth, &amp;origHeight, &amp;bitDepth,</span><br><span class=\"line\">             &amp;colorType, int_p_NULL, int_p_NULL, int_p_NULL);</span><br><span class=\"line\"> </span><br><span class=\"line\">#ifdef PNG_sBIT_SUPPORTED</span><br><span class=\"line\">  <span class=\"comment\">// check for sBIT chunk data, in case we should disable dithering because</span></span><br><span class=\"line\">  <span class=\"comment\">// our data is not truely 8bits per component</span></span><br><span class=\"line\">  png_color_8p sig_bit;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;getDitherImage() &amp;&amp; png_get_sBIT(png_ptr, info_ptr, &amp;sig_bit)) &#123;</span><br><span class=\"line\">#if 0</span><br><span class=\"line\">    SkDebugf(<span class=\"string\">\"----- sBIT %d %d %d %d\\n\"</span>, sig_bit-&gt;red, sig_bit-&gt;green,</span><br><span class=\"line\">             sig_bit-&gt;blue, sig_bit-&gt;alpha);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    <span class=\"comment\">// 0 seems to indicate no information available</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos_le(sig_bit-&gt;red, SK_R16_BITS) &amp;&amp;</span><br><span class=\"line\">        pos_le(sig_bit-&gt;green, SK_G16_BITS) &amp;&amp;</span><br><span class=\"line\">        pos_le(sig_bit-&gt;blue, SK_B16_BITS)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;setDitherImage(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (colorType == PNG_COLOR_TYPE_PALETTE) &#123;</span><br><span class=\"line\">    bool paletteHasAlpha = hasTransparencyInPalette(png_ptr, info_ptr);</span><br><span class=\"line\">    *colorTypep = <span class=\"keyword\">this</span>-&gt;getPrefColorType(kIndex_SrcDepth, paletteHasAlpha);</span><br><span class=\"line\">    <span class=\"comment\">// now see if we can upscale to their requested colortype</span></span><br><span class=\"line\">    <span class=\"comment\">//这段代码，如果返回false，那么colorType就被置为索引了，那么我们看看如何返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canUpscalePaletteToConfig(*colorTypep, paletteHasAlpha)) &#123;</span><br><span class=\"line\">        *colorTypep = kIndex_8_SkColorType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">...... </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>canUpscalePaletteToConfig</strong> 函数如果返回false，那么 colorType 就被置为 <strong>kIndex_8_SkColorType</strong> 了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> bool <span class=\"title\">canUpscalePaletteToConfig</span><span class=\"params\">(SkColorType dstColorType, bool srcHasAlpha)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (dstColorType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> kN32_SkColorType:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> kARGB_4444_SkColorType:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> kRGB_565_SkColorType:</span><br><span class=\"line\">        <span class=\"comment\">// only return true if the src is opaque (since 565 is opaque)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> !srcHasAlpha;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果传入的 <strong>dstColorType</strong> 是 <strong>kRGB_565_SkColorType</strong>，同时图片还有 alpha 通道，那么返回 false~~咳咳，那么问题来了，这个<strong>dstColorType</strong> 是哪儿来的？？就是我们在 decode 的时候，传入的 <strong>Options</strong> 的 <strong>inPreferredConfig</strong>。</p>\n<p>下面是实验时间~<br><strong>准备</strong>：在 assets 目录当中放了一个叫 index.png 的文件，大小192*192，这个文件是通过 PhotoShop 编辑之后生成的索引格式的图片。<br><strong>代码</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   Options options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">   options.inPreferredConfig = Config.RGB_565;</span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeStream(getResources().getAssets().open(<span class=\"string\">\"index.png\"</span>), <span class=\"keyword\">null</span>, options);</span><br><span class=\"line\">   Log.d(TAG, <span class=\"string\">\"bitmap.getConfig() = \"</span> + bitmap.getConfig());</span><br><span class=\"line\">   Log.d(TAG, <span class=\"string\">\"scaled bitmap.getByteCount() = \"</span> + bitmap.getByteCount());</span><br><span class=\"line\">   imageView.setImageBitmap(bitmap);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行在 Nexus6上，由于从 assets 中读取不涉及前面讨论到的 scale 的问题，所以这张图片读到内存以后的大小理论值（ARGB8888）：<br><strong>192 <em> 192 </em>4=147456</strong></p>\n<p>好，运行我们的代码，看输出的 Config 和 ByteCount：</p>\n<p>先说大小为什么只有 36864，我们知道如果前面的讨论是没有问题的话，那么这次解码出来的 Bitmap 应该是索引格式，那么占用的内存只有 ARGB 8888 的1/4是意料之中的；再说 Config 为什么为 null。。额。。黑户。。官方说：</p>\n<pre><code>public final Bitmap.Config getConfig ()\nAdded in API level 1\nIf the bitmap’s internal config is in one of the public formats, return that config, otherwise return null.\n</code></pre><p>再说一遍，黑户。。XD。<br>看来这个法子还真行啊，占用内存一下小很多。不过由于官方并未做出支持，因此这个方法有诸多限制，比如不能在 xml 中直接配置，，生成的 Bitmap 不能用于构建 Canvas 等等。</p>\n<h2 id=\"不要辜负。。。『哦，不要姑父！』\"><a href=\"#不要辜负。。。『哦，不要姑父！』\" class=\"headerlink\" title=\"不要辜负。。。『哦，不要姑父！』\"></a>不要辜负。。。『哦，不要姑父！』</h2><p>其实我们一直在抱怨资源大，有时候有些场景其实不需要图片也能完成的。比如在开发中我们会经常遇到 Loading，这些 Loading 通常就是几帧图片，图片也比较简单，只需要黑白灰加 alpha 就齐了。</p>\n<pre><code>『排期太紧了，这些给我出一系列图吧』\n『好，不过每张图都是 300*30 0的 png 哈，总共 5 张，为了适配不同的分辨率，需要出 xxhdpi 和 xxxhdpi 的两套图。。』\n</code></pre><p>Orz。。。<br>如果是这样，你还是自定义一个 View，覆写 onDraw 自己画一下好了。。。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>写了这么多，我们来稍稍理一理，本文主要讨论了如何运行时获取 Bitmap 占用内存的大小，如果事先根据 Bitmap 的格式、读取方式等算出其占用内存的大小，后面又整理了一些常见的 Bitmap 使用建议。突然好像说，是时候研究一下 Skia 引擎了。<br>怎么办，看来扔了好几年的 C++还是要捡回来么。。噗。。。</p>\n<p>内容转至:<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=498\" target=\"_blank\" rel=\"noopener\">Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>转至:<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=498\" target=\"_blank\" rel=\"noopener\">Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？</a><br>Bugly 技术干货系列内容主要涉及移动开发方向，是由 Bugly 邀请腾讯内部各位技术大咖，通过日常工作经验的总结以及感悟撰写而成，内容均属原创，转载请标明出处。</p>",
        "more": "<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>本文涉及到屏幕密度的讨论，这里先要搞清楚 DisplayMetrics 的两个变量，摘录官方文档的解释：</p>\n<ul>\n<li>density：The logical density of the display. This is a scaling factor for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (for example a 240x320, 1.5”x2” screen), providing the baseline of the system’s display. Thus on a 160dpi screen this density value will be 1; on a 120 dpi screen it would be .75; etc.<br>This value does not exactly follow the real screen size (as given by xdpi and ydpi, but rather is used to scale the size of the overall UI in steps based on gross changes in the display dpi. For example, a 240x320 screen will have a density of 1 even if its width is 1.8”, 1.3”, etc. However, if the screen resolution is increased to 320x480 but the screen size remained 1.5”x2” then the density would be increased (probably to 1.5).</li>\n<li>densityDpi：The screen density expressed as dots-per-inch.</li>\n</ul>\n<p>简单来说，可以理解为 density 的数值是 1dp=density px；densityDpi 是屏幕每英寸对应多少个点（不是像素点），在 DisplayMetrics 当中，这两个的关系是线性的：</p>\n<table>\n<thead>\n<tr>\n<th>density</th>\n<th style=\"text-align:center\">1.0</th>\n<th style=\"text-align:center\">1.5</th>\n<th style=\"text-align:center\">2.0</th>\n<th style=\"text-align:center\">3.0</th>\n<th style=\"text-align:center\">4.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>densityDpi</td>\n<td style=\"text-align:center\">160</td>\n<td style=\"text-align:center\">240</td>\n<td style=\"text-align:center\">320</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">640</td>\n</tr>\n</tbody>\n</table>\n<p>为了不引起混淆，本文所有提到的密度除非特别说明，都指的是 densityDpi，当然如果你愿意，也可以用 density 来说明问题。<br>另外，本文的依据主要来自 android 5.0 的源码，其他版本可能略有出入。文章难免疏漏，欢迎指正～</p>\n<h1 id=\"占了多大内存？\"><a href=\"#占了多大内存？\" class=\"headerlink\" title=\"占了多大内存？\"></a>占了多大内存？</h1><p>做移动客户端开发的朋友们肯定都因为图头疼过，说起来曾经还有过 leader 因为组里面一哥们在工程里面加了一张 jpg 的图发脾气的事儿，哈哈。<br>为什么头疼呢？吃内存呗，时不时还给你来个 OOM 冲冲喜，让你的每一天过得有滋有味（真是没救了）。那每次工程里面增加一张图片的时候，我们都需要关心这货究竟要占多大的坑，占多大呢？Android API 有个方便的方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getByteCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// int result permits bitmaps up to 46,340 x 46,340</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getRowBytes() * getHeight();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>举个列子</strong><br>一张 <strong>522x686</strong> 的<strong>PNG </strong> 图片，我把它放到 <strong>drawable-xxhdpi</strong> 目录下，在<strong>三星s6</strong>上加载，占用内存2547360B，就可以用这个方法获取到。</p>\n<h1 id=\"给我一张图我告诉你占多大内存\"><a href=\"#给我一张图我告诉你占多大内存\" class=\"headerlink\" title=\"给我一张图我告诉你占多大内存\"></a>给我一张图我告诉你占多大内存</h1><p>每次都问 Bitmap 你到底多大啦。。感觉怪怪的，毕竟我们不能总是去问，而不去搞清楚它为嘛介么大吧。能不能给它算个命，算算它究竟多大呢？当然是可以的，很简单嘛，我们直接顺藤摸瓜，找出真凶，哦不，找出答案。</p>\n<h2 id=\"getByteCount\"><a href=\"#getByteCount\" class=\"headerlink\" title=\"getByteCount\"></a>getByteCount</h2><p>getByteCount 的源码我们刚刚已经认识了，当我们问 Bitmap 大小的时候，这孩子也是先拿到出生年月日，然后算出来的，那么问题来了，getHeight 就是图片的高度（单位：px），getRowBytes 是什么？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getrowBytes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (mRecycled) &#123;</span><br><span class=\"line\">          Log.w(TAG, <span class=\"string\">\"Called getRowBytes() on a recycle()'d bitmap! This is undefined behavior!\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> nativeRowBytes(mFinalizer.mNativeBitmap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>额，感觉太对了啊，要 JNI 了。由于在下 C++ 实在用得少，每次想起 JNI 都请想象脑门磕墙的场景，不过呢，毛爷爷说过，一切反动派都是纸老虎~与 </p>\n<p><strong>nativeRowBytes</strong> 对应的函数如下：<br><strong>Bitmap.cpp</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jint <span class=\"title\">Bitmap_rowBytes</span><span class=\"params\">(JNIEnv* env, jobject, jlong bitmapHandle)</span> </span>&#123;</span><br><span class=\"line\">     SkBitmap* bitmap = reinterpret_cast&lt;SkBitmap*&gt;(bitmapHandle)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> static_cast&lt;jint&gt;(bitmap-&gt;rowBytes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>等等，我们好像发现了什么，原来 Bitmap 本质上就是一个 SkBitmap。。而这个 SkBitmap 也是大有来头，不信你瞧：<a href=\"https://skia.org/\" target=\"_blank\" rel=\"noopener\">Skia</a>。啥也别说了，赶紧瞅瞅 SkBitmap。</p>\n<p><strong>SkBitmap.h</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size_t SkBitmap::ComputeRowBytes(Config c, <span class=\"keyword\">int</span> width) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SkColorTypeMinRowBytes(SkBitmapConfigToColorType(c), width);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SkImageInfo.h</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">SkColorTypeBytesPerPixel</span><span class=\"params\">(SkColorType ct)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> uint8_t gSize[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>,  <span class=\"comment\">// Unknown</span></span><br><span class=\"line\">    <span class=\"number\">1</span>,  <span class=\"comment\">// Alpha_8</span></span><br><span class=\"line\">    <span class=\"number\">2</span>,  <span class=\"comment\">// RGB_565</span></span><br><span class=\"line\">    <span class=\"number\">2</span>,  <span class=\"comment\">// ARGB_4444</span></span><br><span class=\"line\">    <span class=\"number\">4</span>,  <span class=\"comment\">// RGBA_8888</span></span><br><span class=\"line\">    <span class=\"number\">4</span>,  <span class=\"comment\">// BGRA_8888</span></span><br><span class=\"line\">    <span class=\"number\">1</span>,  <span class=\"comment\">// kIndex_8</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  SK_COMPILE_ASSERT(SK_ARRAY_COUNT(gSize) == (size_t)(kLastEnum_SkColorType + <span class=\"number\">1</span>),</span><br><span class=\"line\">                size_mismatch_with_SkColorType_enum);</span><br><span class=\"line\"> </span><br><span class=\"line\">   SkASSERT((size_t)ct &lt; SK_ARRAY_COUNT(gSize));</span><br><span class=\"line\">   <span class=\"keyword\">return</span> gSize[ct];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> inline size_t <span class=\"title\">SkColorTypeMinRowBytes</span><span class=\"params\">(SkColorType ct, <span class=\"keyword\">int</span> width)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> width * SkColorTypeBytesPerPixel(ct);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好，跟踪到这里，我们发现 ARGB_8888（也就是我们最常用的 Bitmap 的格式）的一个像素占用 4byte，那么 rowBytes 实际上就是 4<em>width bytes。<br>那么结论出来了，一张 ARGB_8888 的 Bitmap 占用内存的计算公式<br>**bitmapInRam = bitmapWidth</em>bitmapHeight *4 bytes**<br>说到这儿你以为故事就结束了么？有本事你拿去试，算出来的和你获取到的总是会差个倍数，为啥呢？<br>还记得我们最开始给出的那个例子么？</p>\n<blockquote>\n<p>一张<strong>522*686</strong>的 <strong>PNG</strong> 图片，我把它放到 <strong>drawable-xxhdpi</strong><br>目录下，在<strong>三星s6</strong>上加载，占用内存2547360B，就可以用这个方法获取到。</p>\n</blockquote>\n<p>然而公式计算出来的可是1432368B。。。</p>\n<h2 id=\"Density\"><a href=\"#Density\" class=\"headerlink\" title=\"Density\"></a>Density</h2><p>知道我为什么在举例的时候那么费劲的说放到xxx目录下，还要说用xxx手机么？你以为 Bitmap 加载只跟宽高有关么？Naive。<br>还是先看代码，我们读取的是 drawable 目录下面的图片，用的是 decodeResource 方法，该方法本质上就两步：</p>\n<ul>\n<li>读取原始资源，这个调用了 Resource.openRawResource 方法，这个方法调用完成之后会对 TypedValue 进行赋值，其中包含了原始资源的 density 等信息；</li>\n<li>调用 decodeResourceStream 对原始资源进行解码和适配。这个过程实际上就是原始资源的 density 到屏幕 density 的一个映射。</li>\n</ul>\n<p>原始资源的 density 其实取决于资源存放的目录（比如 xxhdpi 对应的是480），而屏幕 density 的赋值，请看下面这段代码：</p>\n<p><strong>BitmapFactory.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeResourceStream</span><span class=\"params\">(Resources res, TypedValue value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    InputStream is, Rect pad, Options opts)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//实际上，我们这里的opts是null的，所以在这里初始化。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    opts = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts.inDensity == <span class=\"number\">0</span> &amp;&amp; value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> density = value.density;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (density == TypedValue.DENSITY_DEFAULT) &#123;</span><br><span class=\"line\">        opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (density != TypedValue.DENSITY_NONE) &#123;</span><br><span class=\"line\">        opts.inDensity = density; <span class=\"comment\">//这里density的值如果对应资源目录为hdpi的话，就是240</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (opts.inTargetDensity == <span class=\"number\">0</span> &amp;&amp; res != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//请注意，inTargetDensity就是当前的显示密度，比如三星s6时就是640</span></span><br><span class=\"line\">    opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">return</span> decodeStream(is, pad, opts);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们看到 opts 这个值被初始化，而它的构造居然如此简单：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Options</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   inDither = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   inScaled = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   inPremultiplied = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以我们就很容易的看到，Option.inScreenDensity 这个值没有被初始化，而实际上后面我们也会看到这个值根本不会用到；我们最应该关心的是什么呢？是 inDensity 和 inTargetDensity，这两个值与下面 cpp 文件里面的 density 和 targetDensity 相对应——重复一下，inDensity 就是原始资源的 density，inTargetDensity 就是屏幕的 density。<br>紧接着，用到了 nativeDecodeStream 方法，不重要的代码直接略过，直接给出最关键的 doDecode 函数的代码：</p>\n<p><strong>BitmapFactory.cpp</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jobject <span class=\"title\">doDecode</span><span class=\"params\">(JNIEnv* env, SkStreamRewindable* stream, jobject padding, jobject options)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">......</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env-&gt;GetBooleanField(options, gOptions_scaledFieldID)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> density = env-&gt;GetIntField(options, gOptions_densityFieldID);<span class=\"comment\">//对应hdpi的时候，是240</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> targetDensity = env-&gt;GetIntField(options, gOptions_targetDensityFieldID);<span class=\"comment\">//三星s6的为640</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> screenDensity = env-&gt;GetIntField(options, gOptions_screenDensityFieldID);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (density != <span class=\"number\">0</span> &amp;&amp; targetDensity != <span class=\"number\">0</span> &amp;&amp; density != screenDensity) &#123;</span><br><span class=\"line\">            scale = (<span class=\"keyword\">float</span>) targetDensity / density;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> bool willScale = scale != <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">......</span><br><span class=\"line\">SkBitmap decodingBitmap;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!decoder-&gt;decode(stream, &amp;decodingBitmap, prefColorType,decodeMode)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> nullObjectReturn(<span class=\"string\">\"decoder-&gt;decode returned false\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里这个deodingBitmap就是解码出来的bitmap，大小是图片原始的大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> scaledWidth = decodingBitmap.width();</span><br><span class=\"line\"><span class=\"keyword\">int</span> scaledHeight = decodingBitmap.height();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (willScale &amp;&amp; decodeMode != SkImageDecoder::kDecodeBounds_Mode) &#123;</span><br><span class=\"line\">    scaledWidth = <span class=\"keyword\">int</span>(scaledWidth * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    scaledHeight = <span class=\"keyword\">int</span>(scaledHeight * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (willScale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sx = scaledWidth / <span class=\"keyword\">float</span>(decodingBitmap.width());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sy = scaledHeight / <span class=\"keyword\">float</span>(decodingBitmap.height());</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> avoid copying when scaled size equals decodingBitmap size</span></span><br><span class=\"line\">    SkColorType colorType = colorTypeForScaledOutput(decodingBitmap.colorType());</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> If the alphaType is kUnpremul and the image has alpha, the</span></span><br><span class=\"line\">    <span class=\"comment\">// colors may not be correct, since Skia does not yet support drawing</span></span><br><span class=\"line\">    <span class=\"comment\">// to/from unpremultiplied bitmaps.</span></span><br><span class=\"line\">    outputBitmap-&gt;setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,</span><br><span class=\"line\">            colorType, decodingBitmap.alphaType()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!outputBitmap-&gt;allocPixels(outputAllocator, NULL)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nullObjectReturn(<span class=\"string\">\"allocation failed for scaled bitmap\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// If outputBitmap's pixels are newly allocated by Java, there is no need</span></span><br><span class=\"line\">    <span class=\"comment\">// to erase to 0, since the pixels were initialized to 0.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outputAllocator != &amp;javaAllocator) &#123;</span><br><span class=\"line\">        outputBitmap-&gt;eraseColor(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    SkPaint paint;</span><br><span class=\"line\">    paint.setFilterLevel(SkPaint::kLow_FilterLevel);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\">SkCanvas <span class=\"title\">canvas</span><span class=\"params\">(*outputBitmap)</span></span>;</span><br><span class=\"line\">    canvas.scale(sx, sy);</span><br><span class=\"line\">    canvas.drawBitmap(decodingBitmap, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, &amp;paint);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到其中有个 density 和 targetDensity，前者是 decodingBitmap 的 density，这个值跟这张图片的放置的目录有关（比如 hdpi 是240，xxhdpi 是480），这部分代码我跟了一下，太长了，就不列出来了；targetDensity 实际上是我们加载图片的目标 density，这个值的来源我们已经在前面给出了，就是 DisplayMetrics 的 densityDpi，如果是三星s6那么这个数值就是640。sx 和sy 实际上是约等于 scale 的，因为 scaledWidth 和 scaledHeight 是由 width 和 height 乘以 scale 得到的。我们看到 Canvas 放大了 scale 倍，然后又把读到内存的这张 bitmap 画上去，相当于把这张 bitmap 放大了 scale 倍。</p>\n<p>再来看我们的例子：</p>\n<blockquote>\n<p>一张<strong>522*686</strong>的<strong>PNG</strong> 图片，我把它放到 <strong>drawable-xxhdpi</strong> 目录下，在三星s6上加载，占用内存2547360B，其中<br>density 对应 xxhdpi 为480，targetDensity 对应三星s6的密度为640： <strong>522/480 <em> 640 </em> 686/480 <em> 640 </em> 4 = 2546432B</strong></p>\n</blockquote>\n<h2 id=\"精度\"><a href=\"#精度\" class=\"headerlink\" title=\"精度\"></a>精度</h2><p>越来越有趣了是不是，你肯定会发现我们这么细致的计算还是跟获取到的数值<br><strong>不！一！样！</strong><br>为什么呢？由于结果已经非常接近，我们很自然地想到精度问题。来，再把上面这段代码中的一句拿出来看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputBitmap-&gt;setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,</span><br><span class=\"line\">            colorType, decodingBitmap.alphaType()));</span><br></pre></td></tr></table></figure>\n<p>我们看到最终输出的 outputBitmap 的大小是scaledWidth*scaledHeight，我们把这两个变量计算的片段拿出来给大家一看就明白了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (willScale &amp;&amp; decodeMode != SkImageDecoder::kDecodeBounds_Mode) &#123;</span><br><span class=\"line\">    scaledWidth = <span class=\"keyword\">int</span>(scaledWidth * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    scaledHeight = <span class=\"keyword\">int</span>(scaledHeight * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在我们的例子中，<br><strong>scaledWidth</strong> = <strong>int( 522 * 640 / 480f + 0.5)</strong> = <strong>int(696.5) = 696</strong><br><strong>scaledHeight = int( 686 * 640 / 480f + 0.5) = int(915.16666…) = 915</strong><br>下面就是见证奇迹的时刻：<br><strong>915 <em> 696 </em> 4 = 2547360</strong><br>有木有很兴奋！有木有很激动！！<br>写到这里，突然想起《STL源码剖析》一书的扉页，侯捷先生只写了一句话：</p>\n<pre><code>“源码之前，了无秘密”\n</code></pre><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>其实，通过前面的代码跟踪，我们就不难知道，Bitmap 在内存当中占用的大小其实取决于：</p>\n<ul>\n<li>色彩格式，前面我们已经提到，如果是 ARGB8888 那么就是一个像素4个字节，如果是 RGB565 那就是2个字节</li>\n<li>原始文件存放的资源目录（是 hdpi 还是 xxhdpi 可不能傻傻分不清楚哈）</li>\n<li>目标屏幕的密度（所以同等条件下，红米在资源方面消耗的内存肯定是要小于三星S6的）</li>\n</ul>\n<h1 id=\"想办法减少-Bitmap-内存占用\"><a href=\"#想办法减少-Bitmap-内存占用\" class=\"headerlink\" title=\"想办法减少 Bitmap 内存占用\"></a>想办法减少 Bitmap 内存占用</h1><h2 id=\"Jpg-和-Png\"><a href=\"#Jpg-和-Png\" class=\"headerlink\" title=\"Jpg 和 Png\"></a>Jpg 和 Png</h2><p>说到这里，肯定会有人会说，我们用 jpg 吧，jpg 格式的图片不应该比 png 小么？<br>这确实是个好问题，因为同样一张图片，jpg 确实比 png 会多少小一些（甚至很多），原因很简单，jpg 是一种<strong>有损</strong>压缩的图片<strong>存储格式</strong>，而 png 则是 <strong>无损</strong>压缩的图片<strong>存储格式</strong>，显而易见，jpg 会比 png 小，代价也是显而易见的。</p>\n<p>可是，这说的是文件存储范畴的事情，它们只存在于文件系统，而非内存或者显存。说得简单一点儿，我有一个极品飞车的免安装硬盘版的压缩包放在我的磁盘里面，这个游戏是不能玩的，我需要先解压，才能玩——jpg 也好，png 也好就是个压缩包的概念，而我们讨论的内存占用则是从使用角度来讨论的。<br>所以，jpg 格式的图片与 png 格式的图片在内存当中不应该有什么不同。</p>\n<pre><code>『啪！！！』\n『谁这么缺德！！打人不打脸好么！』\n</code></pre><p>肯定有人有意见，jpg 图片读到内存就是会小，还会给我拿出例子。当然，他说的不一定是错的。因为 jpg 的图片没有 alpha 通道！！所以读到内存的时候如果用 RGB565的格式存到内存，这下大小只有 ARGB8888的一半，能不小么。。。<br>不过，抛开 Android 这个平台不谈，从出图的角度来看的话，jpg 格式的图片大小也不一定比 png 的小，这要取决于图像信息的内容：</p>\n<pre><code>JPG 不适用于所含颜色很少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。对于需要高保真的较复杂的图像，PNG 虽然能无损压缩，但图片文件较大。\n</code></pre><p>如果仅仅是为了 Bitmap 读到内存中的大小而考虑的话，jpg 也好 png 也好，没有什么实质的差别；二者的差别主要体现在：</p>\n<ul>\n<li>alpha 你是否真的需要？如果需要 alpha 通道，那么没有别的选择，用 png。</li>\n<li>你的图色值丰富还是单调？就像刚才提到的，如果色值丰富，那么用jpg，如果作为按钮的背景，请用 png。</li>\n<li>对安装包大小的要求是否非常严格？如果你的 app 资源很少，安装包大小问题不是很凸显，看情况选择 jpg 或者</li>\n<li>png（不过，我想现在对资源文件没有苛求的应用会很少吧。。） 目标用户的 cpu 是否强劲？jpg 的图像压缩算法比 png</li>\n<li>耗时。这方面还是要酌情选择，前几年做了一段时间 Cocos2dx，由于资源非常多，项目组要求统一使用 png，可能就是出于这方面的考虑。</li>\n</ul>\n<p>嗯，跑题了，我们其实想说的是怎么减少内存占用的。。这一小节只是想说，休想通过这个方法来减少内存占用。。。XD</p>\n<h2 id=\"使用-inSampleSize\"><a href=\"#使用-inSampleSize\" class=\"headerlink\" title=\"使用 inSampleSize\"></a>使用 inSampleSize</h2><p>有些朋友一看到这个肯定就笑了。采样嘛，我以前是学信号处理的，一看到 Sample 就抽抽。。哈哈开个玩笑，这个采样其实就跟统计学里面的采样是一样的，在保证最终效果满足要求的前提下减少样本规模，方便后续的数据采集和处理。<br>这个方法主要用在图片资源本身较大，或者适当地采样并不会影响视觉效果的条件下，这时候我们输出地目标可能相对较小，对图片分辨率、大小要求不是非常的严格。</p>\n<p><strong>举个例子</strong><br>我们现在有个需求，要求将一张图片进行模糊，然后作为 ImageView 的 src 呈现给用户，而我们的原始图片大小为 1080*1920，如果我们直接拿来模糊的话，一方面模糊的过程费时费力，另一方面生成的图片又占用内存，实际上在模糊运算过程中可能会存在输入和输出并存的情况，此时内存将会有一个短暂的峰值。<br>这时候你一定会想到三个字母在你的脑海里挥之不去，它们就是『OOM』。<br>既然图片最终是要被模糊的，也看不太情况，还不如直接用一张采样后的图片，如果采样率为 2，那么读出来的图片只有原始图片的 1/4 大小，真是何乐而不为呢？？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BitmapFactory.Options options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">options.inSampleSize = <span class=\"number\">2</span>;</span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), resId, options);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用矩阵\"><a href=\"#使用矩阵\" class=\"headerlink\" title=\"使用矩阵\"></a>使用矩阵</h2><p>用到 Bitmap 的地方，总会见到 Matrix。这时候你会想到什么？</p>\n<pre><code>『基友』\n『是在下输了。。』\n</code></pre><p>其实想想，Bitmap 的像素点阵，还不就是个矩阵，真是你中有我，我中有你的交情啊。那么什么时候用矩阵呢？</p>\n<p><strong>大图小用用采样，小图大用用矩阵。</strong><br>还是用前面模糊图片的例子，我们不是采样了么？内存是小了，可是图的尺寸也小了啊，我要用 Canvas 绘制这张图可怎么办？当然是用矩阵了：<br><strong>方式一：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">matrix.preScale(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果使用直接替换矩阵的话，在Nexus6 5.1.1上必须关闭硬件加速</span></span><br><span class=\"line\">canvas.concat(matrix);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, <span class=\"number\">0</span>,<span class=\"number\">0</span>, paint);</span><br></pre></td></tr></table></figure>\n<p><em>需要注意的是，在使用搭载 5.1.1 原生系统的 Nexus6 进行测试时发现，如果使用 Canvas 的 setMatrix 方法，可能会导致与矩阵相关的元素的绘制存在问题，本例当中如果使用 setMatrix 方法，bitmap 将不会出现在屏幕上。因此请尽量使用 canvas 的 scale、rotate 这样的方法，或者使用 concat 方法。</em></p>\n<p>方式二：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">matrix.preScale(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, matrix, paint);</span><br></pre></td></tr></table></figure></p>\n<p>这样，绘制出来的图就是放大以后的效果了，不过占用的内存却仍然是我们采样出来的大小。<br>如果我要把图片放到 ImageView 当中呢？一样可以，请看：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">matrix.postScale(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">imageView.setImageMatrix(matrix);</span><br><span class=\"line\">imageView.setScaleType(ScaleType.MATRIX);</span><br><span class=\"line\">imageView.setImageBitmap(bitmap);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"合理选择Bitmap的像素格式\"><a href=\"#合理选择Bitmap的像素格式\" class=\"headerlink\" title=\"合理选择Bitmap的像素格式\"></a>合理选择Bitmap的像素格式</h2><p>其实前面我们已经多次提到这个问题。ARGB8888格式的图片，每像素占用 4 Byte，而 RGB565则是 2 Byte。我们先看下有多少种格式可选：<br>|  格式    | 描述 |<br>| - | :-|<br>|ALPHA_8| 只有一个alpha通道 |<br>|ARGB_4444    | 这个从API 13开始不建议使用，因为质量太差|<br>|ARGB_8888    | ARGB四个通道，每个通道8bit |<br>|RGB_565    |每个像素占2Byte，其中红色占5bit，绿色占6bit，蓝色占5bit |</p>\n<p>这几个当中，<br><strong>ALPHA8</strong> 没必要用，因为我们随便用个颜色就可以搞定的。<br><strong>ARGB4444</strong> 虽然占用内存只有 <strong>ARGB8888</strong> 的一半，不过已经被官方嫌弃，失宠了。。『又要占省内存，又要看着爽，臣妾做不到啊T T』。<br><strong>ARGB8888</strong> 是最常用的，大家应该最熟悉了。<br><strong>RGB565</strong> 看到这个，我就看到了资源优化配置无处不在，这个绿色。。（不行了，突然好邪恶XD），其实如果不需要 alpha 通道，特别是资源本身为 jpg 格式的情况下，用这个格式比较理想。</p>\n<h2 id=\"高能：索引位图-Indexed-Bitmap\"><a href=\"#高能：索引位图-Indexed-Bitmap\" class=\"headerlink\" title=\"高能：索引位图(Indexed Bitmap)\"></a>高能：索引位图(Indexed Bitmap)</h2><p>索引位图，每个像素只占 1 Byte，不仅支持 RGB，还支持 alpha，而且看上去效果还不错！等等，请收起你的口水，Android 官方并不支持这个。是的，你没看错，官方并不支持。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Config &#123;</span><br><span class=\"line\">    <span class=\"comment\">// these native values must match up with the enum in SkBitmap.h</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    ALPHA_8     (<span class=\"number\">2</span>),</span><br><span class=\"line\">    RGB_565     (<span class=\"number\">4</span>),</span><br><span class=\"line\">    ARGB_4444   (<span class=\"number\">5</span>),</span><br><span class=\"line\">    ARGB_8888   (<span class=\"number\">6</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> nativeInt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不过，Skia 引擎是支持的，不信你再看：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Config &#123;</span><br><span class=\"line\">   kNo_Config,   <span class=\"comment\">//!&lt; bitmap has not been configured</span></span><br><span class=\"line\">     kA8_Config,   <span class=\"comment\">//!&lt; 8-bits per pixel, with only alpha specified (0 is transparent, 0xFF is opaque)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//看这里看这里！！↓↓↓↓↓</span></span><br><span class=\"line\">    kIndex8_Config, <span class=\"comment\">//!&lt; 8-bits per pixel, using SkColorTable to specify the colors  </span></span><br><span class=\"line\">    kRGB_565_Config, <span class=\"comment\">//!&lt; 16-bits per pixel, (see SkColorPriv.h for packing)</span></span><br><span class=\"line\">    kARGB_4444_Config, <span class=\"comment\">//!&lt; 16-bits per pixel, (see SkColorPriv.h for packing)</span></span><br><span class=\"line\">    kARGB_8888_Config, <span class=\"comment\">//!&lt; 32-bits per pixel, (see SkColorPriv.h for packing)</span></span><br><span class=\"line\">    kRLE_Index8_Config,</span><br><span class=\"line\"> </span><br><span class=\"line\">    kConfigCount</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其实 Java 层的枚举变量的 nativeInt 对应的就是 Skia 库当中枚举的索引值，所以，如果我们能够拿到这个索引是不是就可以了？对不起，拿不到。<br>不行了，废话这么多，肯定要挨板砖了T T。<br>不过呢，在 png 的解码库里面有这么一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool SkPNGImageDecoder::getBitmapColorType(png_structp png_ptr, png_infop info_ptr,</span><br><span class=\"line\">                                       SkColorType* colorTypep,</span><br><span class=\"line\">                                       bool* hasAlphap,</span><br><span class=\"line\">                                       SkPMColor* SK_RESTRICT theTranspColorp) &#123;</span><br><span class=\"line\">png_uint_32 origWidth, origHeight;</span><br><span class=\"line\"><span class=\"keyword\">int</span> bitDepth, colorType;</span><br><span class=\"line\">png_get_IHDR(png_ptr, info_ptr, &amp;origWidth, &amp;origHeight, &amp;bitDepth,</span><br><span class=\"line\">             &amp;colorType, int_p_NULL, int_p_NULL, int_p_NULL);</span><br><span class=\"line\"> </span><br><span class=\"line\">#ifdef PNG_sBIT_SUPPORTED</span><br><span class=\"line\">  <span class=\"comment\">// check for sBIT chunk data, in case we should disable dithering because</span></span><br><span class=\"line\">  <span class=\"comment\">// our data is not truely 8bits per component</span></span><br><span class=\"line\">  png_color_8p sig_bit;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;getDitherImage() &amp;&amp; png_get_sBIT(png_ptr, info_ptr, &amp;sig_bit)) &#123;</span><br><span class=\"line\">#if 0</span><br><span class=\"line\">    SkDebugf(<span class=\"string\">\"----- sBIT %d %d %d %d\\n\"</span>, sig_bit-&gt;red, sig_bit-&gt;green,</span><br><span class=\"line\">             sig_bit-&gt;blue, sig_bit-&gt;alpha);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    <span class=\"comment\">// 0 seems to indicate no information available</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos_le(sig_bit-&gt;red, SK_R16_BITS) &amp;&amp;</span><br><span class=\"line\">        pos_le(sig_bit-&gt;green, SK_G16_BITS) &amp;&amp;</span><br><span class=\"line\">        pos_le(sig_bit-&gt;blue, SK_B16_BITS)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;setDitherImage(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (colorType == PNG_COLOR_TYPE_PALETTE) &#123;</span><br><span class=\"line\">    bool paletteHasAlpha = hasTransparencyInPalette(png_ptr, info_ptr);</span><br><span class=\"line\">    *colorTypep = <span class=\"keyword\">this</span>-&gt;getPrefColorType(kIndex_SrcDepth, paletteHasAlpha);</span><br><span class=\"line\">    <span class=\"comment\">// now see if we can upscale to their requested colortype</span></span><br><span class=\"line\">    <span class=\"comment\">//这段代码，如果返回false，那么colorType就被置为索引了，那么我们看看如何返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canUpscalePaletteToConfig(*colorTypep, paletteHasAlpha)) &#123;</span><br><span class=\"line\">        *colorTypep = kIndex_8_SkColorType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">...... </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>canUpscalePaletteToConfig</strong> 函数如果返回false，那么 colorType 就被置为 <strong>kIndex_8_SkColorType</strong> 了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> bool <span class=\"title\">canUpscalePaletteToConfig</span><span class=\"params\">(SkColorType dstColorType, bool srcHasAlpha)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (dstColorType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> kN32_SkColorType:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> kARGB_4444_SkColorType:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> kRGB_565_SkColorType:</span><br><span class=\"line\">        <span class=\"comment\">// only return true if the src is opaque (since 565 is opaque)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> !srcHasAlpha;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果传入的 <strong>dstColorType</strong> 是 <strong>kRGB_565_SkColorType</strong>，同时图片还有 alpha 通道，那么返回 false~~咳咳，那么问题来了，这个<strong>dstColorType</strong> 是哪儿来的？？就是我们在 decode 的时候，传入的 <strong>Options</strong> 的 <strong>inPreferredConfig</strong>。</p>\n<p>下面是实验时间~<br><strong>准备</strong>：在 assets 目录当中放了一个叫 index.png 的文件，大小192*192，这个文件是通过 PhotoShop 编辑之后生成的索引格式的图片。<br><strong>代码</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   Options options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">   options.inPreferredConfig = Config.RGB_565;</span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeStream(getResources().getAssets().open(<span class=\"string\">\"index.png\"</span>), <span class=\"keyword\">null</span>, options);</span><br><span class=\"line\">   Log.d(TAG, <span class=\"string\">\"bitmap.getConfig() = \"</span> + bitmap.getConfig());</span><br><span class=\"line\">   Log.d(TAG, <span class=\"string\">\"scaled bitmap.getByteCount() = \"</span> + bitmap.getByteCount());</span><br><span class=\"line\">   imageView.setImageBitmap(bitmap);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行在 Nexus6上，由于从 assets 中读取不涉及前面讨论到的 scale 的问题，所以这张图片读到内存以后的大小理论值（ARGB8888）：<br><strong>192 <em> 192 </em>4=147456</strong></p>\n<p>好，运行我们的代码，看输出的 Config 和 ByteCount：</p>\n<p>先说大小为什么只有 36864，我们知道如果前面的讨论是没有问题的话，那么这次解码出来的 Bitmap 应该是索引格式，那么占用的内存只有 ARGB 8888 的1/4是意料之中的；再说 Config 为什么为 null。。额。。黑户。。官方说：</p>\n<pre><code>public final Bitmap.Config getConfig ()\nAdded in API level 1\nIf the bitmap’s internal config is in one of the public formats, return that config, otherwise return null.\n</code></pre><p>再说一遍，黑户。。XD。<br>看来这个法子还真行啊，占用内存一下小很多。不过由于官方并未做出支持，因此这个方法有诸多限制，比如不能在 xml 中直接配置，，生成的 Bitmap 不能用于构建 Canvas 等等。</p>\n<h2 id=\"不要辜负。。。『哦，不要姑父！』\"><a href=\"#不要辜负。。。『哦，不要姑父！』\" class=\"headerlink\" title=\"不要辜负。。。『哦，不要姑父！』\"></a>不要辜负。。。『哦，不要姑父！』</h2><p>其实我们一直在抱怨资源大，有时候有些场景其实不需要图片也能完成的。比如在开发中我们会经常遇到 Loading，这些 Loading 通常就是几帧图片，图片也比较简单，只需要黑白灰加 alpha 就齐了。</p>\n<pre><code>『排期太紧了，这些给我出一系列图吧』\n『好，不过每张图都是 300*30 0的 png 哈，总共 5 张，为了适配不同的分辨率，需要出 xxhdpi 和 xxxhdpi 的两套图。。』\n</code></pre><p>Orz。。。<br>如果是这样，你还是自定义一个 View，覆写 onDraw 自己画一下好了。。。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>写了这么多，我们来稍稍理一理，本文主要讨论了如何运行时获取 Bitmap 占用内存的大小，如果事先根据 Bitmap 的格式、读取方式等算出其占用内存的大小，后面又整理了一些常见的 Bitmap 使用建议。突然好像说，是时候研究一下 Skia 引擎了。<br>怎么办，看来扔了好几年的 C++还是要捡回来么。。噗。。。</p>\n<p>内容转至:<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=498\" target=\"_blank\" rel=\"noopener\">Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？</a></p>"
      },
      {
        "title": "怎么去除android listview的默认点击效果",
        "date": "2016-05-12T09:18:21.000Z",
        "_content": "\n在做项目的时候会遇到listview点击item的时候出现黄色的默认的点击效果.但是项目中不要出现这个效果.贴上正确的方法,只需要在listview的布局文件中加上\n<!--more-->\n``` java\n android:listSelector=\"@android:color/transparent\" \n```\n做个笔记记下来~~\n",
        "source": "_posts/RemoveAndroidListviewDefaultClickEffect.md",
        "raw": "---\ntitle: 怎么去除android listview的默认点击效果\ndate: 2016-05-12 17:18:21\ntags:\n- Android \n- ListView\ncategories:\n- Android开发笔记\n---\n\n在做项目的时候会遇到listview点击item的时候出现黄色的默认的点击效果.但是项目中不要出现这个效果.贴上正确的方法,只需要在listview的布局文件中加上\n<!--more-->\n``` java\n android:listSelector=\"@android:color/transparent\" \n```\n做个笔记记下来~~\n",
        "slug": "RemoveAndroidListviewDefaultClickEffect",
        "published": 1,
        "updated": "2020-05-19T02:32:04.681Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2n000p52j9oqjn5f49",
        "content": "<p>在做项目的时候会遇到listview点击item的时候出现黄色的默认的点击效果.但是项目中不要出现这个效果.贴上正确的方法,只需要在listview的布局文件中加上<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:listSelector=<span class=\"string\">\"@android:color/transparent\"</span></span><br></pre></td></tr></table></figure></p>\n<p>做个笔记记下来~~</p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>在做项目的时候会遇到listview点击item的时候出现黄色的默认的点击效果.但是项目中不要出现这个效果.贴上正确的方法,只需要在listview的布局文件中加上<br>",
        "more": "<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:listSelector=<span class=\"string\">\"@android:color/transparent\"</span></span><br></pre></td></tr></table></figure></p>\n<p>做个笔记记下来~~</p>"
      },
      {
        "title": "Service Intent must be explicit的解决方案",
        "date": "2017-09-14T07:11:43.000Z",
        "_content": "\n今天在学习AIDL的时候,通过以下步骤:\n\n<!--more-->\n\n- **在AndroidMenifest中声明service**\n\n\n``` java\n\n\t<service\n\t\tandroid:name=\".MyService\"\n        android:process=\":remote\"\n        android:exported=\"true\">\n        <intent-filter >\n        \t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            <action android:name=\"com.ihealth.learnaidl.MyService\"></action>\n        </intent-filter>\n    </service>\n\n```\n\n- **在客户端中绑定service**\n\n\n``` java\n\nIntent intentService=new Intent();\n                intentService.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                intentService.setAction(ACTION_BIND_SERVICE);\n                MainActivity.this.bindService(intentService,mServiceConnection,BIND_AUTO_CREATE);\n\n\n```\n\n- **运行程序,结果报错了!**\njava.lang.IllegalArgumentException: Service Intent must be explicit\n![20170914154711498](http://paynnyvep.bkt.clouddn.com/20170914154711498.png)\n\n经过查找资料[Stackoverflow.com](https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent),发现是需要将隐含意图转换为显示的意图，然后启动再服务。\n\n\n所以综合Stackoverflow上给出的解决方案,现在大体上有两种解决的方法.\n\n1.先说一个简单的办法\n``` java\nIntent mIntent = new Intent();\n//自定义的Service的action\nmIntent.setAction(\"XXX.XXX.XXX\");\n//自定义Service的包名\nmIntent.setPackage(getPackageName());\ncontext.startService(mIntent);\n```\n\n即只需要多加一句话**mIntent.setPackage(getPackageName());**就可以解决.\n\n2.另外一个比较麻烦的方法\n先通过一个函数将隐式调用转变为显示调用\n\n``` java\n/***\n     * Android L (lollipop, API 21) introduced a new problem when trying to invoke implicit intent,\n     * \"java.lang.IllegalArgumentException: Service Intent must be explicit\"\n     *\n     * If you are using an implicit intent, and know only 1 target would answer this intent,\n     * This method will help you turn the implicit intent into the explicit form.\n     *\n     * Inspired from SO answer: http://stackoverflow.com/a/26318757/1446466\n     * @param context\n     * @param implicitIntent - The original implicit intent\n     * @return Explicit Intent created from the implicit original intent\n     */\n    public static Intent createExplicitFromImplicitIntent(Context context, Intent implicitIntent) {\n        // Retrieve all services that can match the given intent\n        PackageManager pm = context.getPackageManager();\n        List<ResolveInfo> resolveInfo = pm.queryIntentServices(implicitIntent, 0);\n\n        // Make sure only one match was found\n        if (resolveInfo == null || resolveInfo.size() != 1) {\n            return null;\n        }\n\n        // Get component info and create ComponentName\n        ResolveInfo serviceInfo = resolveInfo.get(0);\n        String packageName = serviceInfo.serviceInfo.packageName;\n        String className = serviceInfo.serviceInfo.name;\n        ComponentName component = new ComponentName(packageName, className);\n\n        // Create a new intent. Use the old one for extras and such reuse\n        Intent explicitIntent = new Intent(implicitIntent);\n\n        // Set the component to be explicit\n        explicitIntent.setComponent(component);\n\n        return explicitIntent;\n    }\n\n```\n\n然后调用\n\n```\nIntent intent = new Intent();\n                intent.setAction(ACTION_BIND_SERVICE);\n                final Intent eintent = new Intent(createExplicitFromImplicitIntent(this,intent));\n                bindService(eintent,mServiceConnection, Service.BIND_AUTO_CREATE);\n```\n\n两种办法都可以解决.记下来,免得以后忘了.\n感谢Stackoverflow~[Google In-App billing, IllegalArgumentException: Service Intent must be explicit, after upgrading to Android L Dev Preview](https://stackoverflow.com/questions/24480069/google-in-app-billing-illegalargumentexception-service-intent-must-be-explicit/26318757#26318757)\n\n[Service Intent must be explicit: Intent](https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent)\n\n",
        "source": "_posts/ServiceIntetMustBeExplicit.md",
        "raw": "---\ntitle: Service Intent must be explicit的解决方案\ndate: 2017-09-14 15:11:43\ntags:\n- Android\ncategories:\n- Android开发笔记\n---\n\n今天在学习AIDL的时候,通过以下步骤:\n\n<!--more-->\n\n- **在AndroidMenifest中声明service**\n\n\n``` java\n\n\t<service\n\t\tandroid:name=\".MyService\"\n        android:process=\":remote\"\n        android:exported=\"true\">\n        <intent-filter >\n        \t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            <action android:name=\"com.ihealth.learnaidl.MyService\"></action>\n        </intent-filter>\n    </service>\n\n```\n\n- **在客户端中绑定service**\n\n\n``` java\n\nIntent intentService=new Intent();\n                intentService.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                intentService.setAction(ACTION_BIND_SERVICE);\n                MainActivity.this.bindService(intentService,mServiceConnection,BIND_AUTO_CREATE);\n\n\n```\n\n- **运行程序,结果报错了!**\njava.lang.IllegalArgumentException: Service Intent must be explicit\n![20170914154711498](http://paynnyvep.bkt.clouddn.com/20170914154711498.png)\n\n经过查找资料[Stackoverflow.com](https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent),发现是需要将隐含意图转换为显示的意图，然后启动再服务。\n\n\n所以综合Stackoverflow上给出的解决方案,现在大体上有两种解决的方法.\n\n1.先说一个简单的办法\n``` java\nIntent mIntent = new Intent();\n//自定义的Service的action\nmIntent.setAction(\"XXX.XXX.XXX\");\n//自定义Service的包名\nmIntent.setPackage(getPackageName());\ncontext.startService(mIntent);\n```\n\n即只需要多加一句话**mIntent.setPackage(getPackageName());**就可以解决.\n\n2.另外一个比较麻烦的方法\n先通过一个函数将隐式调用转变为显示调用\n\n``` java\n/***\n     * Android L (lollipop, API 21) introduced a new problem when trying to invoke implicit intent,\n     * \"java.lang.IllegalArgumentException: Service Intent must be explicit\"\n     *\n     * If you are using an implicit intent, and know only 1 target would answer this intent,\n     * This method will help you turn the implicit intent into the explicit form.\n     *\n     * Inspired from SO answer: http://stackoverflow.com/a/26318757/1446466\n     * @param context\n     * @param implicitIntent - The original implicit intent\n     * @return Explicit Intent created from the implicit original intent\n     */\n    public static Intent createExplicitFromImplicitIntent(Context context, Intent implicitIntent) {\n        // Retrieve all services that can match the given intent\n        PackageManager pm = context.getPackageManager();\n        List<ResolveInfo> resolveInfo = pm.queryIntentServices(implicitIntent, 0);\n\n        // Make sure only one match was found\n        if (resolveInfo == null || resolveInfo.size() != 1) {\n            return null;\n        }\n\n        // Get component info and create ComponentName\n        ResolveInfo serviceInfo = resolveInfo.get(0);\n        String packageName = serviceInfo.serviceInfo.packageName;\n        String className = serviceInfo.serviceInfo.name;\n        ComponentName component = new ComponentName(packageName, className);\n\n        // Create a new intent. Use the old one for extras and such reuse\n        Intent explicitIntent = new Intent(implicitIntent);\n\n        // Set the component to be explicit\n        explicitIntent.setComponent(component);\n\n        return explicitIntent;\n    }\n\n```\n\n然后调用\n\n```\nIntent intent = new Intent();\n                intent.setAction(ACTION_BIND_SERVICE);\n                final Intent eintent = new Intent(createExplicitFromImplicitIntent(this,intent));\n                bindService(eintent,mServiceConnection, Service.BIND_AUTO_CREATE);\n```\n\n两种办法都可以解决.记下来,免得以后忘了.\n感谢Stackoverflow~[Google In-App billing, IllegalArgumentException: Service Intent must be explicit, after upgrading to Android L Dev Preview](https://stackoverflow.com/questions/24480069/google-in-app-billing-illegalargumentexception-service-intent-must-be-explicit/26318757#26318757)\n\n[Service Intent must be explicit: Intent](https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent)\n\n",
        "slug": "ServiceIntetMustBeExplicit",
        "published": 1,
        "updated": "2020-05-19T02:32:04.681Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2q000s52j9mgijikcv",
        "content": "<p>今天在学习AIDL的时候,通过以下步骤:</p>\n<a id=\"more\"></a>\n<ul>\n<li><strong>在AndroidMenifest中声明service</strong></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;service</span><br><span class=\"line\">\tandroid:name=<span class=\"string\">\".MyService\"</span></span><br><span class=\"line\">       android:process=<span class=\"string\">\":remote\"</span></span><br><span class=\"line\">       android:exported=<span class=\"string\">\"true\"</span>&gt;</span><br><span class=\"line\">       &lt;intent-filter &gt;</span><br><span class=\"line\">       \t&lt;category android:name=\"android.intent.category.DEFAULT\"&gt;&lt;/category&gt;</span><br><span class=\"line\">           &lt;action android:name=\"com.ihealth.learnaidl.MyService\"&gt;&lt;/action&gt;</span><br><span class=\"line\">       &lt;/intent-filter&gt;</span><br><span class=\"line\">   &lt;/service&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>在客户端中绑定service</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Intent intentService=<span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                intentService.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">                intentService.setAction(ACTION_BIND_SERVICE);</span><br><span class=\"line\">                MainActivity.<span class=\"keyword\">this</span>.bindService(intentService,mServiceConnection,BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>运行程序,结果报错了!</strong><br>java.lang.IllegalArgumentException: Service Intent must be explicit<br><img src=\"http://paynnyvep.bkt.clouddn.com/20170914154711498.png\" alt=\"20170914154711498\"></li>\n</ul>\n<p>经过查找资料<a href=\"https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent\" target=\"_blank\" rel=\"noopener\">Stackoverflow.com</a>,发现是需要将隐含意图转换为显示的意图，然后启动再服务。</p>\n<p>所以综合Stackoverflow上给出的解决方案,现在大体上有两种解决的方法.</p>\n<p>1.先说一个简单的办法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent mIntent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\"><span class=\"comment\">//自定义的Service的action</span></span><br><span class=\"line\">mIntent.setAction(<span class=\"string\">\"XXX.XXX.XXX\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//自定义Service的包名</span></span><br><span class=\"line\">mIntent.setPackage(getPackageName());</span><br><span class=\"line\">context.startService(mIntent);</span><br></pre></td></tr></table></figure></p>\n<p>即只需要多加一句话<strong>mIntent.setPackage(getPackageName());</strong>就可以解决.</p>\n<p>2.另外一个比较麻烦的方法<br>先通过一个函数将隐式调用转变为显示调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * Android L (lollipop, API 21) introduced a new problem when trying to invoke implicit intent,</span></span><br><span class=\"line\"><span class=\"comment\">     * \"java.lang.IllegalArgumentException: Service Intent must be explicit\"</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * If you are using an implicit intent, and know only 1 target would answer this intent,</span></span><br><span class=\"line\"><span class=\"comment\">     * This method will help you turn the implicit intent into the explicit form.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Inspired from SO answer: http://stackoverflow.com/a/26318757/1446466</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> implicitIntent - The original implicit intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Explicit Intent created from the implicit original intent</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Intent <span class=\"title\">createExplicitFromImplicitIntent</span><span class=\"params\">(Context context, Intent implicitIntent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Retrieve all services that can match the given intent</span></span><br><span class=\"line\">        PackageManager pm = context.getPackageManager();</span><br><span class=\"line\">        List&lt;ResolveInfo&gt; resolveInfo = pm.queryIntentServices(implicitIntent, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Make sure only one match was found</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolveInfo == <span class=\"keyword\">null</span> || resolveInfo.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get component info and create ComponentName</span></span><br><span class=\"line\">        ResolveInfo serviceInfo = resolveInfo.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        String packageName = serviceInfo.serviceInfo.packageName;</span><br><span class=\"line\">        String className = serviceInfo.serviceInfo.name;</span><br><span class=\"line\">        ComponentName component = <span class=\"keyword\">new</span> ComponentName(packageName, className);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a new intent. Use the old one for extras and such reuse</span></span><br><span class=\"line\">        Intent explicitIntent = <span class=\"keyword\">new</span> Intent(implicitIntent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Set the component to be explicit</span></span><br><span class=\"line\">        explicitIntent.setComponent(component);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> explicitIntent;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>然后调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = new Intent();</span><br><span class=\"line\">                intent.setAction(ACTION_BIND_SERVICE);</span><br><span class=\"line\">                final Intent eintent = new Intent(createExplicitFromImplicitIntent(this,intent));</span><br><span class=\"line\">                bindService(eintent,mServiceConnection, Service.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>\n<p>两种办法都可以解决.记下来,免得以后忘了.<br>感谢Stackoverflow~<a href=\"https://stackoverflow.com/questions/24480069/google-in-app-billing-illegalargumentexception-service-intent-must-be-explicit/26318757#26318757\" target=\"_blank\" rel=\"noopener\">Google In-App billing, IllegalArgumentException: Service Intent must be explicit, after upgrading to Android L Dev Preview</a></p>\n<p><a href=\"https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent\" target=\"_blank\" rel=\"noopener\">Service Intent must be explicit: Intent</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>今天在学习AIDL的时候,通过以下步骤:</p>",
        "more": "<ul>\n<li><strong>在AndroidMenifest中声明service</strong></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;service</span><br><span class=\"line\">\tandroid:name=<span class=\"string\">\".MyService\"</span></span><br><span class=\"line\">       android:process=<span class=\"string\">\":remote\"</span></span><br><span class=\"line\">       android:exported=<span class=\"string\">\"true\"</span>&gt;</span><br><span class=\"line\">       &lt;intent-filter &gt;</span><br><span class=\"line\">       \t&lt;category android:name=\"android.intent.category.DEFAULT\"&gt;&lt;/category&gt;</span><br><span class=\"line\">           &lt;action android:name=\"com.ihealth.learnaidl.MyService\"&gt;&lt;/action&gt;</span><br><span class=\"line\">       &lt;/intent-filter&gt;</span><br><span class=\"line\">   &lt;/service&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>在客户端中绑定service</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Intent intentService=<span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                intentService.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">                intentService.setAction(ACTION_BIND_SERVICE);</span><br><span class=\"line\">                MainActivity.<span class=\"keyword\">this</span>.bindService(intentService,mServiceConnection,BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>运行程序,结果报错了!</strong><br>java.lang.IllegalArgumentException: Service Intent must be explicit<br><img src=\"http://paynnyvep.bkt.clouddn.com/20170914154711498.png\" alt=\"20170914154711498\"></li>\n</ul>\n<p>经过查找资料<a href=\"https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent\" target=\"_blank\" rel=\"noopener\">Stackoverflow.com</a>,发现是需要将隐含意图转换为显示的意图，然后启动再服务。</p>\n<p>所以综合Stackoverflow上给出的解决方案,现在大体上有两种解决的方法.</p>\n<p>1.先说一个简单的办法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent mIntent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\"><span class=\"comment\">//自定义的Service的action</span></span><br><span class=\"line\">mIntent.setAction(<span class=\"string\">\"XXX.XXX.XXX\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//自定义Service的包名</span></span><br><span class=\"line\">mIntent.setPackage(getPackageName());</span><br><span class=\"line\">context.startService(mIntent);</span><br></pre></td></tr></table></figure></p>\n<p>即只需要多加一句话<strong>mIntent.setPackage(getPackageName());</strong>就可以解决.</p>\n<p>2.另外一个比较麻烦的方法<br>先通过一个函数将隐式调用转变为显示调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * Android L (lollipop, API 21) introduced a new problem when trying to invoke implicit intent,</span></span><br><span class=\"line\"><span class=\"comment\">     * \"java.lang.IllegalArgumentException: Service Intent must be explicit\"</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * If you are using an implicit intent, and know only 1 target would answer this intent,</span></span><br><span class=\"line\"><span class=\"comment\">     * This method will help you turn the implicit intent into the explicit form.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Inspired from SO answer: http://stackoverflow.com/a/26318757/1446466</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> implicitIntent - The original implicit intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Explicit Intent created from the implicit original intent</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Intent <span class=\"title\">createExplicitFromImplicitIntent</span><span class=\"params\">(Context context, Intent implicitIntent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Retrieve all services that can match the given intent</span></span><br><span class=\"line\">        PackageManager pm = context.getPackageManager();</span><br><span class=\"line\">        List&lt;ResolveInfo&gt; resolveInfo = pm.queryIntentServices(implicitIntent, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Make sure only one match was found</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolveInfo == <span class=\"keyword\">null</span> || resolveInfo.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get component info and create ComponentName</span></span><br><span class=\"line\">        ResolveInfo serviceInfo = resolveInfo.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        String packageName = serviceInfo.serviceInfo.packageName;</span><br><span class=\"line\">        String className = serviceInfo.serviceInfo.name;</span><br><span class=\"line\">        ComponentName component = <span class=\"keyword\">new</span> ComponentName(packageName, className);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a new intent. Use the old one for extras and such reuse</span></span><br><span class=\"line\">        Intent explicitIntent = <span class=\"keyword\">new</span> Intent(implicitIntent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Set the component to be explicit</span></span><br><span class=\"line\">        explicitIntent.setComponent(component);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> explicitIntent;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>然后调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = new Intent();</span><br><span class=\"line\">                intent.setAction(ACTION_BIND_SERVICE);</span><br><span class=\"line\">                final Intent eintent = new Intent(createExplicitFromImplicitIntent(this,intent));</span><br><span class=\"line\">                bindService(eintent,mServiceConnection, Service.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>\n<p>两种办法都可以解决.记下来,免得以后忘了.<br>感谢Stackoverflow~<a href=\"https://stackoverflow.com/questions/24480069/google-in-app-billing-illegalargumentexception-service-intent-must-be-explicit/26318757#26318757\" target=\"_blank\" rel=\"noopener\">Google In-App billing, IllegalArgumentException: Service Intent must be explicit, after upgrading to Android L Dev Preview</a></p>\n<p><a href=\"https://stackoverflow.com/questions/27842430/service-intent-must-be-explicit-intent\" target=\"_blank\" rel=\"noopener\">Service Intent must be explicit: Intent</a></p>"
      },
      {
        "title": "如何将Hexo Blog同时发布到GitHub跟Coding上",
        "date": "2016-04-24T17:22:44.000Z",
        "_content": "# 前言\n\n上一篇文章已经讲过怎样使用Hexo建立博客以及怎样将Hexo博客发布到GitHub上.如果对Hexo建立博客还不熟悉请先看看之前的那篇文章[我的Hexo博客建站日志](http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/).大家可能跟我一样,建站的时候很轻松,但是等往github上提交的时候会等待很长时间,毕竟GitHub是国外的东西,很多地方会被墙掉,在我们现在不翻墙的情况下如何能将自己的博客迅速的托管到免费平台上呢?于是我想到了我比较喜欢保存自己项目的[Coding.net](https://coding.net/).一款国内的,强大的代码托管,项目演示平台.平台找到了,但又如何能不费劲一次就同时部署到[Coding.net](https://coding.net/)跟[GitHub](http://github.com)上呢?于是带着这两个问题,我查了很多资料,又经过一番折腾,终于实现了,一次部署同时发布.\n<!-- more -->\n![这里写图片描述](http://img.blog.csdn.net/20160425013150955)\n\n# 在Coding上创建一个项目\n## 准备工作\n首先打开个账户的[个人设置](https://coding.net/user/account/setting/basic)中找到Global Key(个性后缀),然后新建一个Coding项目,项目名字跟Global Key相同.(大家也可以不这么建,可以直接建立项目,但是最后生成的页面会很长,显得不美观)\n![这里写图片描述](http://img.blog.csdn.net/20160424234852399)\n![这里写图片描述](http://img.blog.csdn.net/20160425013553308)\n\nTips:\n- 最好创建跟Global Key相同的项目这样访问起来直接就是http://yourGlobalKey.coding.me. 比如说我的Coding的博客[CodingBlog](http://shenzhenwei.coding.me/),否则的话后面得加上项目名.\n- 这里创建的是公有项目,为什么要创建公有项目,是因为如果项目弄成私有的,那么你的项目的pages页面就看不到里面的js效果了,就是只有文字的那种,主题什么的都白设置了.\n- 如果项目已经设置成私有项目了并且还想看到效果,那只能用coding的演示功能了.只是coding功能是需要花费码币的,24小时0.01码币.\n- 如果项目设置成公有的项目了,然后也部署成功了,在手机上打开的时候建议使用腾讯内核外的浏览器,否则的话可能会被当成恶意网站屏蔽掉.在pc上任何浏览器打开都是没问题的.\n## 配置CodingGit的SSH\n如果是第一次使用CodingGit提交的话,建议先配置SSH公匙.Coding生成公匙的方法可以查看[配置CodingSSH公钥](https://coding.net/help/doc/git/ssh-key.html).如果陌生可以按以下步骤来:\n1. 打开个人中心的[SSH公匙](https://coding.net/user/account/setting/keys)\n2. 如果之前配置过GitHub的公匙的话直接打开,.ssh文件夹里面的_rsa.pub\n![这里写图片描述](http://img.blog.csdn.net/20160425001714644)\n比如我的是pvphero_rsa.pub,然后将里面的内容全部复制,填写到ssh_rsa公匙处,公匙的名称可以随便起,然后点击'添加',再接着输入密码就可以完成添加了\n![这里写图片描述](http://img.blog.csdn.net/20160425002144536)\n3. 添加后测试一下\n``` bash\nssh -T git@git.coding.net\n```\n如果出现下面的提示则表示公匙添加成功了:\n``` \nHello shenzhenwei You've connected to Coding.net by SSH successfully!\n```\n# 配置_config.yml的部署\n\n准备工作都做好了,现在开始配置_config.yml,大家经过前面的文章[我的Hexo博客建站日志](http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/)相信对发布到GitHub上并不陌生,发布到GitHub上是在_config.yml文件中的deploy加上了GitHub的项目地址,以及发布的分支.那么要想同时发布到Coding上肯定是需要在配置文件中加上Coding的项目地址的,但是应该怎么加?格式又是如何呢?,根据[Hexo官方文档](https://hexo.io/zh-cn/docs/deployment.htmll)只需要将deploy的格式更改成下面的就可以了\n``` \ndeploy:\n  type: git\n  repo:\n    github: <repository url>,[branch]\n    coding: <repository url>,[branch]\n```\n比如我的是这样的:\n```\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:pvphero/pvphero.github.io.git,master\n    coding: git@git.coding.net:shenzhenwei/shenzhenwei.git,master \n```\n# 部署Hexo博客\n## 部署到GitHub跟Coding\n- 前面的工作都做好了以后,生成静态网页\n```\n $ hexo g\n```\n- 本地查看效果\n```\n$ hexo s\n```\n- 部署到git\n```\n$ sudo hexo d \n```\n之后我们可以看到Coding跟GitHub中项目有我们提交上来的代码\n![这里写图片描述](http://img.blog.csdn.net/20160425013918474)\n![这里写图片描述](http://img.blog.csdn.net/20160425013942380)\n并且GitHub上已经可以看到发布的内容[Github Blog](http://pvphero.github.io/)\n![这里写图片描述](http://img.blog.csdn.net/20160425014004224)\n\n## 设置Coding项目中的配置\n\n**在Coding上部署博客有两种方式,前面提到过,在做下说明.Coding上部署博客总共有两种:**\n1. 通过coding pages的方式进行博客的部署.coding为每个项目都推出了pages,不管是公有的还是私有的都有pages功能.我也比较推荐这种方式去搭建Hexo Coding博客.有很多好处,比如说免费,比如说可以绑定域名等等吧.\n2.  通过Coding的演示功能进行Hexo Coding博客的部署.这种方式是收费的,每天最少0.01码币,大家可以体验体验.但不推荐.\n**如果采用Pages方式的话就必须要在source/新建一个空白文件,名字必须是Staticfile**\n```\n cd source\n touch Staticfile  #名字必须是Staticfile\n```\n因为用过coding演示功能的小伙伴都可能会知道,如果演示的时候没有Staticfile,coding的检测会提示检测不到,询问你是否强制开启.具体的原因的话,可能是coding是用静态的方式部署的,检测到这个的时候就知道你的项目是以静态方式发布的.\n### 开启coding项目的pages功能\n在刚刚建的项目中开启pages功能,这里的部署分支选择master,因为你在_config.yml中设置的分支是master,然后点击立即开启.\n![这里写图片描述](http://img.blog.csdn.net/20160425014038443)\n![这里写图片描述](http://img.blog.csdn.net/20160425014106287)\n这时候如果点击链接出现404的话,并且本地测试是没有问题的,github上打开的链接也是没有问题的话,那么久需要耐心的多等几分钟了,这个coding.net部署的稍微慢点.coding的博客部署就ok了.这样就可以提交一次同时部署了~~\n\n### 演示方式部署\n关于演示方式部署,我就不费口舌了,因为演示方式部署肯定支持静态网页的,不管你是私有项目还是公有项目都是可以看到的.如果实在想去进行网站部署,建议大家参看[ 嘟嘟MD ](http://www.jianshu.com/p/7ad9d3cd4d6e)\n\n**希望这篇文章对大家有所帮助~~我也是看了[ 嘟嘟MD ](http://www.jianshu.com/p/7ad9d3cd4d6e)的博客,然后跟着一步一步实现的~希望大家有问题多交流~**\n\n[本文参与 Coding 征文计划](https://coding.net/wow/stories/)\n\n",
        "source": "_posts/PushHexoBlogToGitHubAndCoding.md",
        "raw": "---\ntitle: 如何将Hexo Blog同时发布到GitHub跟Coding上\ndate: 2016-04-25 01:22:44\ntags:\n- Hexo\n- GitHub\n- Coding\n---\n# 前言\n\n上一篇文章已经讲过怎样使用Hexo建立博客以及怎样将Hexo博客发布到GitHub上.如果对Hexo建立博客还不熟悉请先看看之前的那篇文章[我的Hexo博客建站日志](http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/).大家可能跟我一样,建站的时候很轻松,但是等往github上提交的时候会等待很长时间,毕竟GitHub是国外的东西,很多地方会被墙掉,在我们现在不翻墙的情况下如何能将自己的博客迅速的托管到免费平台上呢?于是我想到了我比较喜欢保存自己项目的[Coding.net](https://coding.net/).一款国内的,强大的代码托管,项目演示平台.平台找到了,但又如何能不费劲一次就同时部署到[Coding.net](https://coding.net/)跟[GitHub](http://github.com)上呢?于是带着这两个问题,我查了很多资料,又经过一番折腾,终于实现了,一次部署同时发布.\n<!-- more -->\n![这里写图片描述](http://img.blog.csdn.net/20160425013150955)\n\n# 在Coding上创建一个项目\n## 准备工作\n首先打开个账户的[个人设置](https://coding.net/user/account/setting/basic)中找到Global Key(个性后缀),然后新建一个Coding项目,项目名字跟Global Key相同.(大家也可以不这么建,可以直接建立项目,但是最后生成的页面会很长,显得不美观)\n![这里写图片描述](http://img.blog.csdn.net/20160424234852399)\n![这里写图片描述](http://img.blog.csdn.net/20160425013553308)\n\nTips:\n- 最好创建跟Global Key相同的项目这样访问起来直接就是http://yourGlobalKey.coding.me. 比如说我的Coding的博客[CodingBlog](http://shenzhenwei.coding.me/),否则的话后面得加上项目名.\n- 这里创建的是公有项目,为什么要创建公有项目,是因为如果项目弄成私有的,那么你的项目的pages页面就看不到里面的js效果了,就是只有文字的那种,主题什么的都白设置了.\n- 如果项目已经设置成私有项目了并且还想看到效果,那只能用coding的演示功能了.只是coding功能是需要花费码币的,24小时0.01码币.\n- 如果项目设置成公有的项目了,然后也部署成功了,在手机上打开的时候建议使用腾讯内核外的浏览器,否则的话可能会被当成恶意网站屏蔽掉.在pc上任何浏览器打开都是没问题的.\n## 配置CodingGit的SSH\n如果是第一次使用CodingGit提交的话,建议先配置SSH公匙.Coding生成公匙的方法可以查看[配置CodingSSH公钥](https://coding.net/help/doc/git/ssh-key.html).如果陌生可以按以下步骤来:\n1. 打开个人中心的[SSH公匙](https://coding.net/user/account/setting/keys)\n2. 如果之前配置过GitHub的公匙的话直接打开,.ssh文件夹里面的_rsa.pub\n![这里写图片描述](http://img.blog.csdn.net/20160425001714644)\n比如我的是pvphero_rsa.pub,然后将里面的内容全部复制,填写到ssh_rsa公匙处,公匙的名称可以随便起,然后点击'添加',再接着输入密码就可以完成添加了\n![这里写图片描述](http://img.blog.csdn.net/20160425002144536)\n3. 添加后测试一下\n``` bash\nssh -T git@git.coding.net\n```\n如果出现下面的提示则表示公匙添加成功了:\n``` \nHello shenzhenwei You've connected to Coding.net by SSH successfully!\n```\n# 配置_config.yml的部署\n\n准备工作都做好了,现在开始配置_config.yml,大家经过前面的文章[我的Hexo博客建站日志](http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/)相信对发布到GitHub上并不陌生,发布到GitHub上是在_config.yml文件中的deploy加上了GitHub的项目地址,以及发布的分支.那么要想同时发布到Coding上肯定是需要在配置文件中加上Coding的项目地址的,但是应该怎么加?格式又是如何呢?,根据[Hexo官方文档](https://hexo.io/zh-cn/docs/deployment.htmll)只需要将deploy的格式更改成下面的就可以了\n``` \ndeploy:\n  type: git\n  repo:\n    github: <repository url>,[branch]\n    coding: <repository url>,[branch]\n```\n比如我的是这样的:\n```\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:pvphero/pvphero.github.io.git,master\n    coding: git@git.coding.net:shenzhenwei/shenzhenwei.git,master \n```\n# 部署Hexo博客\n## 部署到GitHub跟Coding\n- 前面的工作都做好了以后,生成静态网页\n```\n $ hexo g\n```\n- 本地查看效果\n```\n$ hexo s\n```\n- 部署到git\n```\n$ sudo hexo d \n```\n之后我们可以看到Coding跟GitHub中项目有我们提交上来的代码\n![这里写图片描述](http://img.blog.csdn.net/20160425013918474)\n![这里写图片描述](http://img.blog.csdn.net/20160425013942380)\n并且GitHub上已经可以看到发布的内容[Github Blog](http://pvphero.github.io/)\n![这里写图片描述](http://img.blog.csdn.net/20160425014004224)\n\n## 设置Coding项目中的配置\n\n**在Coding上部署博客有两种方式,前面提到过,在做下说明.Coding上部署博客总共有两种:**\n1. 通过coding pages的方式进行博客的部署.coding为每个项目都推出了pages,不管是公有的还是私有的都有pages功能.我也比较推荐这种方式去搭建Hexo Coding博客.有很多好处,比如说免费,比如说可以绑定域名等等吧.\n2.  通过Coding的演示功能进行Hexo Coding博客的部署.这种方式是收费的,每天最少0.01码币,大家可以体验体验.但不推荐.\n**如果采用Pages方式的话就必须要在source/新建一个空白文件,名字必须是Staticfile**\n```\n cd source\n touch Staticfile  #名字必须是Staticfile\n```\n因为用过coding演示功能的小伙伴都可能会知道,如果演示的时候没有Staticfile,coding的检测会提示检测不到,询问你是否强制开启.具体的原因的话,可能是coding是用静态的方式部署的,检测到这个的时候就知道你的项目是以静态方式发布的.\n### 开启coding项目的pages功能\n在刚刚建的项目中开启pages功能,这里的部署分支选择master,因为你在_config.yml中设置的分支是master,然后点击立即开启.\n![这里写图片描述](http://img.blog.csdn.net/20160425014038443)\n![这里写图片描述](http://img.blog.csdn.net/20160425014106287)\n这时候如果点击链接出现404的话,并且本地测试是没有问题的,github上打开的链接也是没有问题的话,那么久需要耐心的多等几分钟了,这个coding.net部署的稍微慢点.coding的博客部署就ok了.这样就可以提交一次同时部署了~~\n\n### 演示方式部署\n关于演示方式部署,我就不费口舌了,因为演示方式部署肯定支持静态网页的,不管你是私有项目还是公有项目都是可以看到的.如果实在想去进行网站部署,建议大家参看[ 嘟嘟MD ](http://www.jianshu.com/p/7ad9d3cd4d6e)\n\n**希望这篇文章对大家有所帮助~~我也是看了[ 嘟嘟MD ](http://www.jianshu.com/p/7ad9d3cd4d6e)的博客,然后跟着一步一步实现的~希望大家有问题多交流~**\n\n[本文参与 Coding 征文计划](https://coding.net/wow/stories/)\n\n",
        "slug": "PushHexoBlogToGitHubAndCoding",
        "published": 1,
        "updated": "2020-05-19T02:32:04.681Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2r000t52j982hz76xu",
        "content": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上一篇文章已经讲过怎样使用Hexo建立博客以及怎样将Hexo博客发布到GitHub上.如果对Hexo建立博客还不熟悉请先看看之前的那篇文章<a href=\"http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/\">我的Hexo博客建站日志</a>.大家可能跟我一样,建站的时候很轻松,但是等往github上提交的时候会等待很长时间,毕竟GitHub是国外的东西,很多地方会被墙掉,在我们现在不翻墙的情况下如何能将自己的博客迅速的托管到免费平台上呢?于是我想到了我比较喜欢保存自己项目的<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net</a>.一款国内的,强大的代码托管,项目演示平台.平台找到了,但又如何能不费劲一次就同时部署到<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net</a>跟<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>上呢?于是带着这两个问题,我查了很多资料,又经过一番折腾,终于实现了,一次部署同时发布.<br><a id=\"more\"></a><br><img src=\"http://img.blog.csdn.net/20160425013150955\" alt=\"这里写图片描述\"></p>\n<h1 id=\"在Coding上创建一个项目\"><a href=\"#在Coding上创建一个项目\" class=\"headerlink\" title=\"在Coding上创建一个项目\"></a>在Coding上创建一个项目</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先打开个账户的<a href=\"https://coding.net/user/account/setting/basic\" target=\"_blank\" rel=\"noopener\">个人设置</a>中找到Global Key(个性后缀),然后新建一个Coding项目,项目名字跟Global Key相同.(大家也可以不这么建,可以直接建立项目,但是最后生成的页面会很长,显得不美观)<br><img src=\"http://img.blog.csdn.net/20160424234852399\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20160425013553308\" alt=\"这里写图片描述\"></p>\n<p>Tips:</p>\n<ul>\n<li>最好创建跟Global Key相同的项目这样访问起来直接就是<a href=\"http://yourGlobalKey.coding.me\" target=\"_blank\" rel=\"noopener\">http://yourGlobalKey.coding.me</a>. 比如说我的Coding的博客<a href=\"http://shenzhenwei.coding.me/\" target=\"_blank\" rel=\"noopener\">CodingBlog</a>,否则的话后面得加上项目名.</li>\n<li>这里创建的是公有项目,为什么要创建公有项目,是因为如果项目弄成私有的,那么你的项目的pages页面就看不到里面的js效果了,就是只有文字的那种,主题什么的都白设置了.</li>\n<li>如果项目已经设置成私有项目了并且还想看到效果,那只能用coding的演示功能了.只是coding功能是需要花费码币的,24小时0.01码币.</li>\n<li>如果项目设置成公有的项目了,然后也部署成功了,在手机上打开的时候建议使用腾讯内核外的浏览器,否则的话可能会被当成恶意网站屏蔽掉.在pc上任何浏览器打开都是没问题的.<h2 id=\"配置CodingGit的SSH\"><a href=\"#配置CodingGit的SSH\" class=\"headerlink\" title=\"配置CodingGit的SSH\"></a>配置CodingGit的SSH</h2>如果是第一次使用CodingGit提交的话,建议先配置SSH公匙.Coding生成公匙的方法可以查看<a href=\"https://coding.net/help/doc/git/ssh-key.html\" target=\"_blank\" rel=\"noopener\">配置CodingSSH公钥</a>.如果陌生可以按以下步骤来:</li>\n</ul>\n<ol>\n<li>打开个人中心的<a href=\"https://coding.net/user/account/setting/keys\" target=\"_blank\" rel=\"noopener\">SSH公匙</a></li>\n<li>如果之前配置过GitHub的公匙的话直接打开,.ssh文件夹里面的_rsa.pub<br><img src=\"http://img.blog.csdn.net/20160425001714644\" alt=\"这里写图片描述\"><br>比如我的是pvphero_rsa.pub,然后将里面的内容全部复制,填写到ssh_rsa公匙处,公匙的名称可以随便起,然后点击’添加’,再接着输入密码就可以完成添加了<br><img src=\"http://img.blog.csdn.net/20160425002144536\" alt=\"这里写图片描述\"></li>\n<li>添加后测试一下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果出现下面的提示则表示公匙添加成功了:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello shenzhenwei You&apos;ve connected to Coding.net by SSH successfully!</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配置-config-yml的部署\"><a href=\"#配置-config-yml的部署\" class=\"headerlink\" title=\"配置_config.yml的部署\"></a>配置_config.yml的部署</h1><p>准备工作都做好了,现在开始配置_config.yml,大家经过前面的文章<a href=\"http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/\">我的Hexo博客建站日志</a>相信对发布到GitHub上并不陌生,发布到GitHub上是在_config.yml文件中的deploy加上了GitHub的项目地址,以及发布的分支.那么要想同时发布到Coding上肯定是需要在配置文件中加上Coding的项目地址的,但是应该怎么加?格式又是如何呢?,根据<a href=\"https://hexo.io/zh-cn/docs/deployment.htmll\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>只需要将deploy的格式更改成下面的就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    github: &lt;repository url&gt;,[branch]</span><br><span class=\"line\">    coding: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure></p>\n<p>比如我的是这样的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    github: git@github.com:pvphero/pvphero.github.io.git,master</span><br><span class=\"line\">    coding: git@git.coding.net:shenzhenwei/shenzhenwei.git,master</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"部署Hexo博客\"><a href=\"#部署Hexo博客\" class=\"headerlink\" title=\"部署Hexo博客\"></a>部署Hexo博客</h1><h2 id=\"部署到GitHub跟Coding\"><a href=\"#部署到GitHub跟Coding\" class=\"headerlink\" title=\"部署到GitHub跟Coding\"></a>部署到GitHub跟Coding</h2><ul>\n<li><p>前面的工作都做好了以后,生成静态网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地查看效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>之后我们可以看到Coding跟GitHub中项目有我们提交上来的代码<br><img src=\"http://img.blog.csdn.net/20160425013918474\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20160425013942380\" alt=\"这里写图片描述\"><br>并且GitHub上已经可以看到发布的内容<a href=\"http://pvphero.github.io/\">Github Blog</a><br><img src=\"http://img.blog.csdn.net/20160425014004224\" alt=\"这里写图片描述\"></p>\n<h2 id=\"设置Coding项目中的配置\"><a href=\"#设置Coding项目中的配置\" class=\"headerlink\" title=\"设置Coding项目中的配置\"></a>设置Coding项目中的配置</h2><p><strong>在Coding上部署博客有两种方式,前面提到过,在做下说明.Coding上部署博客总共有两种:</strong></p>\n<ol>\n<li>通过coding pages的方式进行博客的部署.coding为每个项目都推出了pages,不管是公有的还是私有的都有pages功能.我也比较推荐这种方式去搭建Hexo Coding博客.有很多好处,比如说免费,比如说可以绑定域名等等吧.</li>\n<li>通过Coding的演示功能进行Hexo Coding博客的部署.这种方式是收费的,每天最少0.01码币,大家可以体验体验.但不推荐.<br><strong>如果采用Pages方式的话就必须要在source/新建一个空白文件,名字必须是Staticfile</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd source</span><br><span class=\"line\">touch Staticfile  #名字必须是Staticfile</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为用过coding演示功能的小伙伴都可能会知道,如果演示的时候没有Staticfile,coding的检测会提示检测不到,询问你是否强制开启.具体的原因的话,可能是coding是用静态的方式部署的,检测到这个的时候就知道你的项目是以静态方式发布的.</p>\n<h3 id=\"开启coding项目的pages功能\"><a href=\"#开启coding项目的pages功能\" class=\"headerlink\" title=\"开启coding项目的pages功能\"></a>开启coding项目的pages功能</h3><p>在刚刚建的项目中开启pages功能,这里的部署分支选择master,因为你在_config.yml中设置的分支是master,然后点击立即开启.<br><img src=\"http://img.blog.csdn.net/20160425014038443\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20160425014106287\" alt=\"这里写图片描述\"><br>这时候如果点击链接出现404的话,并且本地测试是没有问题的,github上打开的链接也是没有问题的话,那么久需要耐心的多等几分钟了,这个coding.net部署的稍微慢点.coding的博客部署就ok了.这样就可以提交一次同时部署了~~</p>\n<h3 id=\"演示方式部署\"><a href=\"#演示方式部署\" class=\"headerlink\" title=\"演示方式部署\"></a>演示方式部署</h3><p>关于演示方式部署,我就不费口舌了,因为演示方式部署肯定支持静态网页的,不管你是私有项目还是公有项目都是可以看到的.如果实在想去进行网站部署,建议大家参看<a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\" target=\"_blank\" rel=\"noopener\"> 嘟嘟MD </a></p>\n<p><strong>希望这篇文章对大家有所帮助~~我也是看了<a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\" target=\"_blank\" rel=\"noopener\"> 嘟嘟MD </a>的博客,然后跟着一步一步实现的~希望大家有问题多交流~</strong></p>\n<p><a href=\"https://coding.net/wow/stories/\" target=\"_blank\" rel=\"noopener\">本文参与 Coding 征文计划</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上一篇文章已经讲过怎样使用Hexo建立博客以及怎样将Hexo博客发布到GitHub上.如果对Hexo建立博客还不熟悉请先看看之前的那篇文章<a href=\"http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/\">我的Hexo博客建站日志</a>.大家可能跟我一样,建站的时候很轻松,但是等往github上提交的时候会等待很长时间,毕竟GitHub是国外的东西,很多地方会被墙掉,在我们现在不翻墙的情况下如何能将自己的博客迅速的托管到免费平台上呢?于是我想到了我比较喜欢保存自己项目的<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net</a>.一款国内的,强大的代码托管,项目演示平台.平台找到了,但又如何能不费劲一次就同时部署到<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding.net</a>跟<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>上呢?于是带着这两个问题,我查了很多资料,又经过一番折腾,终于实现了,一次部署同时发布.<br>",
        "more": "<br><img src=\"http://img.blog.csdn.net/20160425013150955\" alt=\"这里写图片描述\"></p>\n<h1 id=\"在Coding上创建一个项目\"><a href=\"#在Coding上创建一个项目\" class=\"headerlink\" title=\"在Coding上创建一个项目\"></a>在Coding上创建一个项目</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先打开个账户的<a href=\"https://coding.net/user/account/setting/basic\" target=\"_blank\" rel=\"noopener\">个人设置</a>中找到Global Key(个性后缀),然后新建一个Coding项目,项目名字跟Global Key相同.(大家也可以不这么建,可以直接建立项目,但是最后生成的页面会很长,显得不美观)<br><img src=\"http://img.blog.csdn.net/20160424234852399\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20160425013553308\" alt=\"这里写图片描述\"></p>\n<p>Tips:</p>\n<ul>\n<li>最好创建跟Global Key相同的项目这样访问起来直接就是<a href=\"http://yourGlobalKey.coding.me\" target=\"_blank\" rel=\"noopener\">http://yourGlobalKey.coding.me</a>. 比如说我的Coding的博客<a href=\"http://shenzhenwei.coding.me/\" target=\"_blank\" rel=\"noopener\">CodingBlog</a>,否则的话后面得加上项目名.</li>\n<li>这里创建的是公有项目,为什么要创建公有项目,是因为如果项目弄成私有的,那么你的项目的pages页面就看不到里面的js效果了,就是只有文字的那种,主题什么的都白设置了.</li>\n<li>如果项目已经设置成私有项目了并且还想看到效果,那只能用coding的演示功能了.只是coding功能是需要花费码币的,24小时0.01码币.</li>\n<li>如果项目设置成公有的项目了,然后也部署成功了,在手机上打开的时候建议使用腾讯内核外的浏览器,否则的话可能会被当成恶意网站屏蔽掉.在pc上任何浏览器打开都是没问题的.<h2 id=\"配置CodingGit的SSH\"><a href=\"#配置CodingGit的SSH\" class=\"headerlink\" title=\"配置CodingGit的SSH\"></a>配置CodingGit的SSH</h2>如果是第一次使用CodingGit提交的话,建议先配置SSH公匙.Coding生成公匙的方法可以查看<a href=\"https://coding.net/help/doc/git/ssh-key.html\" target=\"_blank\" rel=\"noopener\">配置CodingSSH公钥</a>.如果陌生可以按以下步骤来:</li>\n</ul>\n<ol>\n<li>打开个人中心的<a href=\"https://coding.net/user/account/setting/keys\" target=\"_blank\" rel=\"noopener\">SSH公匙</a></li>\n<li>如果之前配置过GitHub的公匙的话直接打开,.ssh文件夹里面的_rsa.pub<br><img src=\"http://img.blog.csdn.net/20160425001714644\" alt=\"这里写图片描述\"><br>比如我的是pvphero_rsa.pub,然后将里面的内容全部复制,填写到ssh_rsa公匙处,公匙的名称可以随便起,然后点击’添加’,再接着输入密码就可以完成添加了<br><img src=\"http://img.blog.csdn.net/20160425002144536\" alt=\"这里写图片描述\"></li>\n<li>添加后测试一下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果出现下面的提示则表示公匙添加成功了:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello shenzhenwei You&apos;ve connected to Coding.net by SSH successfully!</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配置-config-yml的部署\"><a href=\"#配置-config-yml的部署\" class=\"headerlink\" title=\"配置_config.yml的部署\"></a>配置_config.yml的部署</h1><p>准备工作都做好了,现在开始配置_config.yml,大家经过前面的文章<a href=\"http://pvphero.github.io/2016/04/24/我的Hexo博客建站日志/\">我的Hexo博客建站日志</a>相信对发布到GitHub上并不陌生,发布到GitHub上是在_config.yml文件中的deploy加上了GitHub的项目地址,以及发布的分支.那么要想同时发布到Coding上肯定是需要在配置文件中加上Coding的项目地址的,但是应该怎么加?格式又是如何呢?,根据<a href=\"https://hexo.io/zh-cn/docs/deployment.htmll\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>只需要将deploy的格式更改成下面的就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    github: &lt;repository url&gt;,[branch]</span><br><span class=\"line\">    coding: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure></p>\n<p>比如我的是这样的:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    github: git@github.com:pvphero/pvphero.github.io.git,master</span><br><span class=\"line\">    coding: git@git.coding.net:shenzhenwei/shenzhenwei.git,master</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"部署Hexo博客\"><a href=\"#部署Hexo博客\" class=\"headerlink\" title=\"部署Hexo博客\"></a>部署Hexo博客</h1><h2 id=\"部署到GitHub跟Coding\"><a href=\"#部署到GitHub跟Coding\" class=\"headerlink\" title=\"部署到GitHub跟Coding\"></a>部署到GitHub跟Coding</h2><ul>\n<li><p>前面的工作都做好了以后,生成静态网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地查看效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>之后我们可以看到Coding跟GitHub中项目有我们提交上来的代码<br><img src=\"http://img.blog.csdn.net/20160425013918474\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20160425013942380\" alt=\"这里写图片描述\"><br>并且GitHub上已经可以看到发布的内容<a href=\"http://pvphero.github.io/\">Github Blog</a><br><img src=\"http://img.blog.csdn.net/20160425014004224\" alt=\"这里写图片描述\"></p>\n<h2 id=\"设置Coding项目中的配置\"><a href=\"#设置Coding项目中的配置\" class=\"headerlink\" title=\"设置Coding项目中的配置\"></a>设置Coding项目中的配置</h2><p><strong>在Coding上部署博客有两种方式,前面提到过,在做下说明.Coding上部署博客总共有两种:</strong></p>\n<ol>\n<li>通过coding pages的方式进行博客的部署.coding为每个项目都推出了pages,不管是公有的还是私有的都有pages功能.我也比较推荐这种方式去搭建Hexo Coding博客.有很多好处,比如说免费,比如说可以绑定域名等等吧.</li>\n<li>通过Coding的演示功能进行Hexo Coding博客的部署.这种方式是收费的,每天最少0.01码币,大家可以体验体验.但不推荐.<br><strong>如果采用Pages方式的话就必须要在source/新建一个空白文件,名字必须是Staticfile</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd source</span><br><span class=\"line\">touch Staticfile  #名字必须是Staticfile</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为用过coding演示功能的小伙伴都可能会知道,如果演示的时候没有Staticfile,coding的检测会提示检测不到,询问你是否强制开启.具体的原因的话,可能是coding是用静态的方式部署的,检测到这个的时候就知道你的项目是以静态方式发布的.</p>\n<h3 id=\"开启coding项目的pages功能\"><a href=\"#开启coding项目的pages功能\" class=\"headerlink\" title=\"开启coding项目的pages功能\"></a>开启coding项目的pages功能</h3><p>在刚刚建的项目中开启pages功能,这里的部署分支选择master,因为你在_config.yml中设置的分支是master,然后点击立即开启.<br><img src=\"http://img.blog.csdn.net/20160425014038443\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20160425014106287\" alt=\"这里写图片描述\"><br>这时候如果点击链接出现404的话,并且本地测试是没有问题的,github上打开的链接也是没有问题的话,那么久需要耐心的多等几分钟了,这个coding.net部署的稍微慢点.coding的博客部署就ok了.这样就可以提交一次同时部署了~~</p>\n<h3 id=\"演示方式部署\"><a href=\"#演示方式部署\" class=\"headerlink\" title=\"演示方式部署\"></a>演示方式部署</h3><p>关于演示方式部署,我就不费口舌了,因为演示方式部署肯定支持静态网页的,不管你是私有项目还是公有项目都是可以看到的.如果实在想去进行网站部署,建议大家参看<a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\" target=\"_blank\" rel=\"noopener\"> 嘟嘟MD </a></p>\n<p><strong>希望这篇文章对大家有所帮助~~我也是看了<a href=\"http://www.jianshu.com/p/7ad9d3cd4d6e\" target=\"_blank\" rel=\"noopener\"> 嘟嘟MD </a>的博客,然后跟着一步一步实现的~希望大家有问题多交流~</strong></p>\n<p><a href=\"https://coding.net/wow/stories/\" target=\"_blank\" rel=\"noopener\">本文参与 Coding 征文计划</a></p>"
      },
      {
        "title": "我的Hexo博客建站日志",
        "date": "2016-04-23T19:01:23.000Z",
        "_content": "\n\n\n\n# 前言\n我是一枚安卓猿,js css以及基于Nodejs的Hexo对我来说完全是个新领域.由于之前查资料查到看到一个人的博客很不错[MOxFIVE](http://moxfive.xyz/),于是就决定模仿人家的博客进行搭建自己的Hexo博客.程序员就是爱折腾.于是查了很多资料,最终实现了自己的Hexo博客.下面我就把一个完全不懂nodejs以及之前根本没听说过Hexo的人建站的历程给大家分享下.\n\n我是在Mac环境下搭建的,Win环境跟Mac的差不多,如果大家是win环境,我建议大家参看[粉丝日志](http://blog.fens.me/hexo-blog-github/)\n\n<!-- more -->\n# Hexo 介绍\n[Hexo](https://hexo.io) 是一个简单的,轻量级,基于Nodejs的一个静态的博客框架.我们可以很方便的使用Hexo搭建个人博客.\n\n对一个外行来说,在一开始使用Hexo的时候心理难免有很多疑问.那我来说,我刚接触Hexo的时候我一直在想:Hexo到底是什么?他是如何把网站部署到github或者conding上的?Hexo怎么进行博客内容的编辑啊?于是经过几番折腾,我对Hexo有了初步的了解.希望我的理解对大家刚刚搭建有所帮助吧.\n- 首先,Hexo是一个基于Nodejs的框架,我们通过Hexo里面的命令在Vim上进行hexo初始化,hexo生成index.html静态页面,然后再通过命令发布到github或者conding\n- Hexo里面集成有git的插件,所以你发布到你的 yourname.github.io的时候只需要把_config.yml中的配置配置好.然后使用\n``` bash\n$ hexo g\n$ hexo d\n```\n就可以将通过Hexo编译好的文件推送到git项目中\n\n* hexo里面的内容怎么编辑?hexo里面的文件是以md结尾的.是markdown语法.所以大家编辑的时候可以先看看[markdown语法](http://www.cnblogs.com/hnrainll/p/3514637.html).我这边是使用的mac的Mou一款免费的markdown软件.大家也可以使用phpStorm,里面在plugins中可以下载markdown的插件.建议大家下载个PHPStorm IDE,因为将来涉及到图片更换,主题更换,目录结构的查看等等,都会比较直观.\n\n# 配置环境\n\n1. 安装Node (必须) 作用是用来生成静态页面.到[Node.js](https://nodejs.org/en/)官网上下载相应平台的最新版本,一路安装即可,没有难度...此处略过!但是一定要装啊.\n\n1. 安装Git (必须) 作用是把本地hexo内容提交到git上去,安装xcode就自带Git了,就不多说了~\n\n1. 申请[Github](https://github.com/)(想同时发布到coding上的,可以再申请个[coding账号](https://coding.net/),后面会讲到)\n\n1. 配置github SSH keys(可以不配置,不配置的话就的每次提交的时候手动输入账号密码了,如果配置了就不需要了,就会很方便)[GitHub-Help-SSH配置](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/)\n\n# Hexo的安装\n系统环境\n\n**Mac OS**\n\n**Hexo安装,要用全局安装,加参数-g**\n     \n    $ sudo npm install-g hexo  \n \n  \n*查看Hexo的版本*\n\n    $ hexo version\n    hexo-cli: 1.0.1\n    os: Darwin 14.5.0 darwin x64\n    http_parser: 2.5.2\n    node: 4.4.3\n    v8: 4.5.103.35\n    uv: 1.8.0\n    zlib: 1.2.8\n    ares: 1.10.1-DEV\n    icu: 56.1\n    modules: 46\n    openssl: 1.0.2g \n    \n或者\n    \n    $ hexo v\n    hexo-cli: 1.0.1\n    os: Darwin 14.5.0 darwin x64\n    http_parser: 2.5.2\n    node: 4.4.3\n    v8: 4.5.103.35\n    uv: 1.8.0\n    zlib: 1.2.8\n    ares: 1.10.1-DEV\n    icu: 56.1\n    modules: 46\n    openssl: 1.0.2g \n这个时候可能会出现\n\n    { [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n\n解决方法\n    \n    $ npm install hexo --no-optional\n参考[Hexo常见问题解决方案](http://www.baidu.com/link?url=Zhut7pph6xKKmF5ADMlGTEDpN5NmgV8vahlW1EqcN3uR7KVFojiykBccQSqcw7CwAzJX0x2bSLvKie5SDyYVMUhl29NcV6LGDLWo7CyUE3816hITneb5IAWZUfqgPVDrA69MqdDs__GS1R1VIk-xi2vqkaeJ27OIvxHtSF-eXZ3&wd=&eqid=ec1ccb24001e820300000004571b8f14)\n\n**安装好以后我们就可以使用Hexo创建项目了**\n\n    $ hexo init nodejs-blog\n\n然后我们打开Finder发现,刚刚的路径下多了一个文件夹,并且文件夹有Hexo相应的初始化模块.\n\n**初始化完成后进入刚刚创建的文件夹,并启动服务器,看看效果**\n\n*进入刚刚创建的文件夹*\n\n    $ cd nodejs-blog/\n    $ ls -a\n    .   .gitignore\t_config.yml   package.json  source\n    ..  .npmignore\tnode_modules  scaffolds     themes\n    \n*启动hexo服务器查看效果*\n\n    $ hexo s\n    INFO  Start processing\n    INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n 然后通过浏览器访问 http://0.0.0.0:4000/查看效果\n \n ![img](http://img.blog.csdn.net/20160424121528685)\n \n# Hexo 目录结构及用法\n\n**4.1目录结构**\n\n![img](/source/img/project_jiegou.png \"jiegou\")\n\n1. scaffolds 脚手架，也就是一个工具模板\n\n1. source 存放博客正文内容 比如说我们新建一个page 那么改page就会出现在这个文件中,我们如果想对原先的博客进行修改的话,就打开这个文件夹下相应的文件进行编辑.如果是想删除的话,那就直接删除该文件夹下相应的文件\n\n1. themes 存放皮肤的目录 用户可以根据自己的喜好更换_config.yml中的themes\n\n1. _config.yml全局的配置文件\n\n1. db.json 静态常量\n\n**4.2全局变量_config.yml的配置**\n\n* 站点信息: 定义标题，作者，语言\n* URL: URL访问路径\n* 文件目录: 正文的存储目录\n* 写博客配置：文章标题，文章类型，外部链接等\n* 目录和标签：默认分类，分类图，标签图\n* 归档设置：归档的类型\n* 服务器设置：IP，访问端口，日志输出\n* 时间和日期格式： 时间显示格式，日期显示格式\n* 分页设置：每页显示数量\n* 评论：外挂的Disqus评论系统\n* 插件和皮肤：换皮肤，安装插件\n* Markdown语言：markdown的标准\n* CSS的stylus格式：是否允许压缩\n* 部署配置：github发布\n\n编辑_config.yml文件\n \n    $ vim _config.yml \n    \n    \n**4.3创建新的文章**\n\n    $ hexo new 我的第一篇Hexo博客\n    \n启动服务器\n    \n![img](http://img.blog.csdn.net/20160424121706439)\n\n**4.4文章语法**\n\n[Markdown语法](http://www.cnblogs.com/hnrainll/p/3514637.html)\n\n[怎样引导新手使用 Markdown？](https://www.zhihu.com/question/20409634)\n\n    实例:\n    title: 新的开始\n    date: 2014-05-07 18:44:12\n    permalink: abc\n    tags:\n    - 开始\n    - 我\n    - 日记\n    categories:\n    - 日志\n    - 第一天\n    ---\n    \n    这是**新的开始**，我用hexo创建了第一篇文章。\n    \n    通过下面的命令，就可以创建新文章\n    \n    ```{bash}\n    $ hexo new 我的第一篇Hexo博客\n        \n    ```\n    感觉非常好。\n# 发布到Github上\n**5.1生成静态的index.thml文件**\n\n    $ hexo g\n    \n**5.2创建githb pages**\n\n在Github上创建一个项目 username.github.io  比如我的用户名是pvphero 那么我创建的项目的名字就是pvphero.github.io [pvphero's GitHub](https://github.com/pvphero/pvphero.github.io)\n\n参考[GitHubPages](https://pages.github.com/)\n\n然后可能有人觉得访问github过慢,有什么好的解决方法么?\n\ngithub访问慢的原因是因为CDN: github.global.ssl.fastly.net,被墙了\n![这里写图片描述](http://img.blog.csdn.net/20160424121935833)\n\n解决方法\n\n* 我这边的的解决方法是更改github的hosts[快速更改MacHosts](http://pan.baidu.com/s/1c1VePTe)\n![这里写图片描述](http://img.blog.csdn.net/20160424122438761)\n* 然后访问[IPAddress.com](http://www.ipaddress.com/)根据域名找到本来的IP\n![这里写图片描述](http://img.blog.csdn.net/20160424122631064)\n* 更改Mac的hosts\n![这里写图片描述](http://img.blog.csdn.net/20160424122726718)\n**5.3发布到github上**\n\n编辑全局配置文件_config.yml，找到deploy的部分，设置github的项目地址\n\n    deploy:\n    type: git\n    repo:\n      github:git@github.com:pvpheropvphero.github.io.git,master\n      \n接下来使用hexo命令部署\n\n    $ hexo d\n 如果出现\n \n ```bash\n { [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n这样的错误\n\n输入命令行\n\n    $ npm install hexo --no-optional\n    \n[Hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n\n这样自己的博客就部署到github上了.可以通过  username.github.io查看最后的效果\n\n\n# 更换主题\n\n**6.1找一个皮肤**\n\n比如我用的皮肤是[spfk](https://github.com/luuman/hexo-theme-spfk),下载下来后直接复制到/nodejs-blog/themes/里面\n\n**6.2_config.yml中设置皮肤**\n\n编辑文件_config.yml，找到theme一行，改成 theme: pacman  \n\n整个Hexo搭建个人博客就结束了.当然大家还可以个性化设置自己的博客主题,以及加载更多的Hexo插件.下一篇将会讲如何将博客同时部署到github上跟coding上.敬请期待~\n\n\n[CodingBlog](http://shenzhenwei.coding.me/)\n\n[GitHubBlog](http://pvphero.github.io/)\n\n\n",
        "source": "_posts/MyHexoBlogWebsiteRecord.md",
        "raw": "---\ntitle: 我的Hexo博客建站日志\ndate: 2016-04-24 03:01:23\ntags:\n- Hexo\n- Mac\n- Git\n- Blog\ncategories:\n- Hexo\n---\n\n\n\n\n# 前言\n我是一枚安卓猿,js css以及基于Nodejs的Hexo对我来说完全是个新领域.由于之前查资料查到看到一个人的博客很不错[MOxFIVE](http://moxfive.xyz/),于是就决定模仿人家的博客进行搭建自己的Hexo博客.程序员就是爱折腾.于是查了很多资料,最终实现了自己的Hexo博客.下面我就把一个完全不懂nodejs以及之前根本没听说过Hexo的人建站的历程给大家分享下.\n\n我是在Mac环境下搭建的,Win环境跟Mac的差不多,如果大家是win环境,我建议大家参看[粉丝日志](http://blog.fens.me/hexo-blog-github/)\n\n<!-- more -->\n# Hexo 介绍\n[Hexo](https://hexo.io) 是一个简单的,轻量级,基于Nodejs的一个静态的博客框架.我们可以很方便的使用Hexo搭建个人博客.\n\n对一个外行来说,在一开始使用Hexo的时候心理难免有很多疑问.那我来说,我刚接触Hexo的时候我一直在想:Hexo到底是什么?他是如何把网站部署到github或者conding上的?Hexo怎么进行博客内容的编辑啊?于是经过几番折腾,我对Hexo有了初步的了解.希望我的理解对大家刚刚搭建有所帮助吧.\n- 首先,Hexo是一个基于Nodejs的框架,我们通过Hexo里面的命令在Vim上进行hexo初始化,hexo生成index.html静态页面,然后再通过命令发布到github或者conding\n- Hexo里面集成有git的插件,所以你发布到你的 yourname.github.io的时候只需要把_config.yml中的配置配置好.然后使用\n``` bash\n$ hexo g\n$ hexo d\n```\n就可以将通过Hexo编译好的文件推送到git项目中\n\n* hexo里面的内容怎么编辑?hexo里面的文件是以md结尾的.是markdown语法.所以大家编辑的时候可以先看看[markdown语法](http://www.cnblogs.com/hnrainll/p/3514637.html).我这边是使用的mac的Mou一款免费的markdown软件.大家也可以使用phpStorm,里面在plugins中可以下载markdown的插件.建议大家下载个PHPStorm IDE,因为将来涉及到图片更换,主题更换,目录结构的查看等等,都会比较直观.\n\n# 配置环境\n\n1. 安装Node (必须) 作用是用来生成静态页面.到[Node.js](https://nodejs.org/en/)官网上下载相应平台的最新版本,一路安装即可,没有难度...此处略过!但是一定要装啊.\n\n1. 安装Git (必须) 作用是把本地hexo内容提交到git上去,安装xcode就自带Git了,就不多说了~\n\n1. 申请[Github](https://github.com/)(想同时发布到coding上的,可以再申请个[coding账号](https://coding.net/),后面会讲到)\n\n1. 配置github SSH keys(可以不配置,不配置的话就的每次提交的时候手动输入账号密码了,如果配置了就不需要了,就会很方便)[GitHub-Help-SSH配置](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/)\n\n# Hexo的安装\n系统环境\n\n**Mac OS**\n\n**Hexo安装,要用全局安装,加参数-g**\n     \n    $ sudo npm install-g hexo  \n \n  \n*查看Hexo的版本*\n\n    $ hexo version\n    hexo-cli: 1.0.1\n    os: Darwin 14.5.0 darwin x64\n    http_parser: 2.5.2\n    node: 4.4.3\n    v8: 4.5.103.35\n    uv: 1.8.0\n    zlib: 1.2.8\n    ares: 1.10.1-DEV\n    icu: 56.1\n    modules: 46\n    openssl: 1.0.2g \n    \n或者\n    \n    $ hexo v\n    hexo-cli: 1.0.1\n    os: Darwin 14.5.0 darwin x64\n    http_parser: 2.5.2\n    node: 4.4.3\n    v8: 4.5.103.35\n    uv: 1.8.0\n    zlib: 1.2.8\n    ares: 1.10.1-DEV\n    icu: 56.1\n    modules: 46\n    openssl: 1.0.2g \n这个时候可能会出现\n\n    { [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n\n解决方法\n    \n    $ npm install hexo --no-optional\n参考[Hexo常见问题解决方案](http://www.baidu.com/link?url=Zhut7pph6xKKmF5ADMlGTEDpN5NmgV8vahlW1EqcN3uR7KVFojiykBccQSqcw7CwAzJX0x2bSLvKie5SDyYVMUhl29NcV6LGDLWo7CyUE3816hITneb5IAWZUfqgPVDrA69MqdDs__GS1R1VIk-xi2vqkaeJ27OIvxHtSF-eXZ3&wd=&eqid=ec1ccb24001e820300000004571b8f14)\n\n**安装好以后我们就可以使用Hexo创建项目了**\n\n    $ hexo init nodejs-blog\n\n然后我们打开Finder发现,刚刚的路径下多了一个文件夹,并且文件夹有Hexo相应的初始化模块.\n\n**初始化完成后进入刚刚创建的文件夹,并启动服务器,看看效果**\n\n*进入刚刚创建的文件夹*\n\n    $ cd nodejs-blog/\n    $ ls -a\n    .   .gitignore\t_config.yml   package.json  source\n    ..  .npmignore\tnode_modules  scaffolds     themes\n    \n*启动hexo服务器查看效果*\n\n    $ hexo s\n    INFO  Start processing\n    INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n 然后通过浏览器访问 http://0.0.0.0:4000/查看效果\n \n ![img](http://img.blog.csdn.net/20160424121528685)\n \n# Hexo 目录结构及用法\n\n**4.1目录结构**\n\n![img](/source/img/project_jiegou.png \"jiegou\")\n\n1. scaffolds 脚手架，也就是一个工具模板\n\n1. source 存放博客正文内容 比如说我们新建一个page 那么改page就会出现在这个文件中,我们如果想对原先的博客进行修改的话,就打开这个文件夹下相应的文件进行编辑.如果是想删除的话,那就直接删除该文件夹下相应的文件\n\n1. themes 存放皮肤的目录 用户可以根据自己的喜好更换_config.yml中的themes\n\n1. _config.yml全局的配置文件\n\n1. db.json 静态常量\n\n**4.2全局变量_config.yml的配置**\n\n* 站点信息: 定义标题，作者，语言\n* URL: URL访问路径\n* 文件目录: 正文的存储目录\n* 写博客配置：文章标题，文章类型，外部链接等\n* 目录和标签：默认分类，分类图，标签图\n* 归档设置：归档的类型\n* 服务器设置：IP，访问端口，日志输出\n* 时间和日期格式： 时间显示格式，日期显示格式\n* 分页设置：每页显示数量\n* 评论：外挂的Disqus评论系统\n* 插件和皮肤：换皮肤，安装插件\n* Markdown语言：markdown的标准\n* CSS的stylus格式：是否允许压缩\n* 部署配置：github发布\n\n编辑_config.yml文件\n \n    $ vim _config.yml \n    \n    \n**4.3创建新的文章**\n\n    $ hexo new 我的第一篇Hexo博客\n    \n启动服务器\n    \n![img](http://img.blog.csdn.net/20160424121706439)\n\n**4.4文章语法**\n\n[Markdown语法](http://www.cnblogs.com/hnrainll/p/3514637.html)\n\n[怎样引导新手使用 Markdown？](https://www.zhihu.com/question/20409634)\n\n    实例:\n    title: 新的开始\n    date: 2014-05-07 18:44:12\n    permalink: abc\n    tags:\n    - 开始\n    - 我\n    - 日记\n    categories:\n    - 日志\n    - 第一天\n    ---\n    \n    这是**新的开始**，我用hexo创建了第一篇文章。\n    \n    通过下面的命令，就可以创建新文章\n    \n    ```{bash}\n    $ hexo new 我的第一篇Hexo博客\n        \n    ```\n    感觉非常好。\n# 发布到Github上\n**5.1生成静态的index.thml文件**\n\n    $ hexo g\n    \n**5.2创建githb pages**\n\n在Github上创建一个项目 username.github.io  比如我的用户名是pvphero 那么我创建的项目的名字就是pvphero.github.io [pvphero's GitHub](https://github.com/pvphero/pvphero.github.io)\n\n参考[GitHubPages](https://pages.github.com/)\n\n然后可能有人觉得访问github过慢,有什么好的解决方法么?\n\ngithub访问慢的原因是因为CDN: github.global.ssl.fastly.net,被墙了\n![这里写图片描述](http://img.blog.csdn.net/20160424121935833)\n\n解决方法\n\n* 我这边的的解决方法是更改github的hosts[快速更改MacHosts](http://pan.baidu.com/s/1c1VePTe)\n![这里写图片描述](http://img.blog.csdn.net/20160424122438761)\n* 然后访问[IPAddress.com](http://www.ipaddress.com/)根据域名找到本来的IP\n![这里写图片描述](http://img.blog.csdn.net/20160424122631064)\n* 更改Mac的hosts\n![这里写图片描述](http://img.blog.csdn.net/20160424122726718)\n**5.3发布到github上**\n\n编辑全局配置文件_config.yml，找到deploy的部分，设置github的项目地址\n\n    deploy:\n    type: git\n    repo:\n      github:git@github.com:pvpheropvphero.github.io.git,master\n      \n接下来使用hexo命令部署\n\n    $ hexo d\n 如果出现\n \n ```bash\n { [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n这样的错误\n\n输入命令行\n\n    $ npm install hexo --no-optional\n    \n[Hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n\n这样自己的博客就部署到github上了.可以通过  username.github.io查看最后的效果\n\n\n# 更换主题\n\n**6.1找一个皮肤**\n\n比如我用的皮肤是[spfk](https://github.com/luuman/hexo-theme-spfk),下载下来后直接复制到/nodejs-blog/themes/里面\n\n**6.2_config.yml中设置皮肤**\n\n编辑文件_config.yml，找到theme一行，改成 theme: pacman  \n\n整个Hexo搭建个人博客就结束了.当然大家还可以个性化设置自己的博客主题,以及加载更多的Hexo插件.下一篇将会讲如何将博客同时部署到github上跟coding上.敬请期待~\n\n\n[CodingBlog](http://shenzhenwei.coding.me/)\n\n[GitHubBlog](http://pvphero.github.io/)\n\n\n",
        "slug": "MyHexoBlogWebsiteRecord",
        "published": 1,
        "updated": "2020-05-19T02:32:04.680Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2s000w52j9nugrcbz7",
        "content": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我是一枚安卓猿,js css以及基于Nodejs的Hexo对我来说完全是个新领域.由于之前查资料查到看到一个人的博客很不错<a href=\"http://moxfive.xyz/\" target=\"_blank\" rel=\"noopener\">MOxFIVE</a>,于是就决定模仿人家的博客进行搭建自己的Hexo博客.程序员就是爱折腾.于是查了很多资料,最终实现了自己的Hexo博客.下面我就把一个完全不懂nodejs以及之前根本没听说过Hexo的人建站的历程给大家分享下.</p>\n<p>我是在Mac环境下搭建的,Win环境跟Mac的差不多,如果大家是win环境,我建议大家参看<a href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\" rel=\"noopener\">粉丝日志</a></p>\n<a id=\"more\"></a>\n<h1 id=\"Hexo-介绍\"><a href=\"#Hexo-介绍\" class=\"headerlink\" title=\"Hexo 介绍\"></a>Hexo 介绍</h1><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> 是一个简单的,轻量级,基于Nodejs的一个静态的博客框架.我们可以很方便的使用Hexo搭建个人博客.</p>\n<p>对一个外行来说,在一开始使用Hexo的时候心理难免有很多疑问.那我来说,我刚接触Hexo的时候我一直在想:Hexo到底是什么?他是如何把网站部署到github或者conding上的?Hexo怎么进行博客内容的编辑啊?于是经过几番折腾,我对Hexo有了初步的了解.希望我的理解对大家刚刚搭建有所帮助吧.</p>\n<ul>\n<li>首先,Hexo是一个基于Nodejs的框架,我们通过Hexo里面的命令在Vim上进行hexo初始化,hexo生成index.html静态页面,然后再通过命令发布到github或者conding</li>\n<li>Hexo里面集成有git的插件,所以你发布到你的 yourname.github.io的时候只需要把_config.yml中的配置配置好.然后使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>就可以将通过Hexo编译好的文件推送到git项目中</p>\n<ul>\n<li>hexo里面的内容怎么编辑?hexo里面的文件是以md结尾的.是markdown语法.所以大家编辑的时候可以先看看<a href=\"http://www.cnblogs.com/hnrainll/p/3514637.html\" target=\"_blank\" rel=\"noopener\">markdown语法</a>.我这边是使用的mac的Mou一款免费的markdown软件.大家也可以使用phpStorm,里面在plugins中可以下载markdown的插件.建议大家下载个PHPStorm IDE,因为将来涉及到图片更换,主题更换,目录结构的查看等等,都会比较直观.</li>\n</ul>\n<h1 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h1><ol>\n<li><p>安装Node (必须) 作用是用来生成静态页面.到<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>官网上下载相应平台的最新版本,一路安装即可,没有难度…此处略过!但是一定要装啊.</p>\n</li>\n<li><p>安装Git (必须) 作用是把本地hexo内容提交到git上去,安装xcode就自带Git了,就不多说了~</p>\n</li>\n<li><p>申请<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>(想同时发布到coding上的,可以再申请个<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding账号</a>,后面会讲到)</p>\n</li>\n<li><p>配置github SSH keys(可以不配置,不配置的话就的每次提交的时候手动输入账号密码了,如果配置了就不需要了,就会很方便)<a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\" target=\"_blank\" rel=\"noopener\">GitHub-Help-SSH配置</a></p>\n</li>\n</ol>\n<h1 id=\"Hexo的安装\"><a href=\"#Hexo的安装\" class=\"headerlink\" title=\"Hexo的安装\"></a>Hexo的安装</h1><p>系统环境</p>\n<p><strong>Mac OS</strong></p>\n<p><strong>Hexo安装,要用全局安装,加参数-g</strong></p>\n<pre><code>$ sudo npm install-g hexo  \n</code></pre><p><em>查看Hexo的版本</em></p>\n<pre><code>$ hexo version\nhexo-cli: 1.0.1\nos: Darwin 14.5.0 darwin x64\nhttp_parser: 2.5.2\nnode: 4.4.3\nv8: 4.5.103.35\nuv: 1.8.0\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2g \n</code></pre><p>或者</p>\n<pre><code>$ hexo v\nhexo-cli: 1.0.1\nos: Darwin 14.5.0 darwin x64\nhttp_parser: 2.5.2\nnode: 4.4.3\nv8: 4.5.103.35\nuv: 1.8.0\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2g \n</code></pre><p>这个时候可能会出现</p>\n<pre><code>{ [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; }\n</code></pre><p>解决方法</p>\n<pre><code>$ npm install hexo --no-optional\n</code></pre><p>参考<a href=\"http://www.baidu.com/link?url=Zhut7pph6xKKmF5ADMlGTEDpN5NmgV8vahlW1EqcN3uR7KVFojiykBccQSqcw7CwAzJX0x2bSLvKie5SDyYVMUhl29NcV6LGDLWo7CyUE3816hITneb5IAWZUfqgPVDrA69MqdDs__GS1R1VIk-xi2vqkaeJ27OIvxHtSF-eXZ3&amp;wd=&amp;eqid=ec1ccb24001e820300000004571b8f14\" target=\"_blank\" rel=\"noopener\">Hexo常见问题解决方案</a></p>\n<p><strong>安装好以后我们就可以使用Hexo创建项目了</strong></p>\n<pre><code>$ hexo init nodejs-blog\n</code></pre><p>然后我们打开Finder发现,刚刚的路径下多了一个文件夹,并且文件夹有Hexo相应的初始化模块.</p>\n<p><strong>初始化完成后进入刚刚创建的文件夹,并启动服务器,看看效果</strong></p>\n<p><em>进入刚刚创建的文件夹</em></p>\n<pre><code>$ cd nodejs-blog/\n$ ls -a\n.   .gitignore    _config.yml   package.json  source\n..  .npmignore    node_modules  scaffolds     themes\n</code></pre><p><em>启动hexo服务器查看效果</em></p>\n<pre><code>$ hexo s\nINFO  Start processing\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n</code></pre><p> 然后通过浏览器访问 <a href=\"http://0.0.0.0:4000/查看效果\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/查看效果</a></p>\n<p> <img src=\"http://img.blog.csdn.net/20160424121528685\" alt=\"img\"></p>\n<h1 id=\"Hexo-目录结构及用法\"><a href=\"#Hexo-目录结构及用法\" class=\"headerlink\" title=\"Hexo 目录结构及用法\"></a>Hexo 目录结构及用法</h1><p><strong>4.1目录结构</strong></p>\n<p><img src=\"/source/img/project_jiegou.png\" alt=\"img\" title=\"jiegou\"></p>\n<ol>\n<li><p>scaffolds 脚手架，也就是一个工具模板</p>\n</li>\n<li><p>source 存放博客正文内容 比如说我们新建一个page 那么改page就会出现在这个文件中,我们如果想对原先的博客进行修改的话,就打开这个文件夹下相应的文件进行编辑.如果是想删除的话,那就直接删除该文件夹下相应的文件</p>\n</li>\n<li><p>themes 存放皮肤的目录 用户可以根据自己的喜好更换_config.yml中的themes</p>\n</li>\n<li><p>_config.yml全局的配置文件</p>\n</li>\n<li><p>db.json 静态常量</p>\n</li>\n</ol>\n<p><strong>4.2全局变量_config.yml的配置</strong></p>\n<ul>\n<li>站点信息: 定义标题，作者，语言</li>\n<li>URL: URL访问路径</li>\n<li>文件目录: 正文的存储目录</li>\n<li>写博客配置：文章标题，文章类型，外部链接等</li>\n<li>目录和标签：默认分类，分类图，标签图</li>\n<li>归档设置：归档的类型</li>\n<li>服务器设置：IP，访问端口，日志输出</li>\n<li>时间和日期格式： 时间显示格式，日期显示格式</li>\n<li>分页设置：每页显示数量</li>\n<li>评论：外挂的Disqus评论系统</li>\n<li>插件和皮肤：换皮肤，安装插件</li>\n<li>Markdown语言：markdown的标准</li>\n<li>CSS的stylus格式：是否允许压缩</li>\n<li>部署配置：github发布</li>\n</ul>\n<p>编辑_config.yml文件</p>\n<pre><code>$ vim _config.yml \n</code></pre><p><strong>4.3创建新的文章</strong></p>\n<pre><code>$ hexo new 我的第一篇Hexo博客\n</code></pre><p>启动服务器</p>\n<p><img src=\"http://img.blog.csdn.net/20160424121706439\" alt=\"img\"></p>\n<p><strong>4.4文章语法</strong></p>\n<p><a href=\"http://www.cnblogs.com/hnrainll/p/3514637.html\" target=\"_blank\" rel=\"noopener\">Markdown语法</a></p>\n<p><a href=\"https://www.zhihu.com/question/20409634\" target=\"_blank\" rel=\"noopener\">怎样引导新手使用 Markdown？</a></p>\n<pre><code>实例:\ntitle: 新的开始\ndate: 2014-05-07 18:44:12\npermalink: abc\ntags:\n- 开始\n- 我\n- 日记\ncategories:\n- 日志\n- 第一天\n---\n\n这是**新的开始**，我用hexo创建了第一篇文章。\n\n通过下面的命令，就可以创建新文章\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 我的第一篇Hexo博客</span><br></pre></td></tr></table></figure>\n\n感觉非常好。\n</code></pre><h1 id=\"发布到Github上\"><a href=\"#发布到Github上\" class=\"headerlink\" title=\"发布到Github上\"></a>发布到Github上</h1><p><strong>5.1生成静态的index.thml文件</strong></p>\n<pre><code>$ hexo g\n</code></pre><p><strong>5.2创建githb pages</strong></p>\n<p>在Github上创建一个项目 username.github.io  比如我的用户名是pvphero 那么我创建的项目的名字就是pvphero.github.io <a href=\"https://github.com/pvphero/pvphero.github.io\" target=\"_blank\" rel=\"noopener\">pvphero’s GitHub</a></p>\n<p>参考<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHubPages</a></p>\n<p>然后可能有人觉得访问github过慢,有什么好的解决方法么?</p>\n<p>github访问慢的原因是因为CDN: github.global.ssl.fastly.net,被墙了<br><img src=\"http://img.blog.csdn.net/20160424121935833\" alt=\"这里写图片描述\"></p>\n<p>解决方法</p>\n<ul>\n<li>我这边的的解决方法是更改github的hosts<a href=\"http://pan.baidu.com/s/1c1VePTe\" target=\"_blank\" rel=\"noopener\">快速更改MacHosts</a><br><img src=\"http://img.blog.csdn.net/20160424122438761\" alt=\"这里写图片描述\"></li>\n<li>然后访问<a href=\"http://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\">IPAddress.com</a>根据域名找到本来的IP<br><img src=\"http://img.blog.csdn.net/20160424122631064\" alt=\"这里写图片描述\"></li>\n<li>更改Mac的hosts<br><img src=\"http://img.blog.csdn.net/20160424122726718\" alt=\"这里写图片描述\"><br><strong>5.3发布到github上</strong></li>\n</ul>\n<p>编辑全局配置文件_config.yml，找到deploy的部分，设置github的项目地址</p>\n<pre><code>deploy:\ntype: git\nrepo:\n  github:git@github.com:pvpheropvphero.github.io.git,master\n</code></pre><p>接下来使用hexo命令部署</p>\n<pre><code>$ hexo d\n</code></pre><p> 如果出现</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123; [Error: Cannot find module <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>这样的错误</p>\n<p>输入命令行</p>\n<pre><code>$ npm install hexo --no-optional\n</code></pre><p><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">Hexo常见问题解决方案</a></p>\n<p>这样自己的博客就部署到github上了.可以通过  username.github.io查看最后的效果</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p><strong>6.1找一个皮肤</strong></p>\n<p>比如我用的皮肤是<a href=\"https://github.com/luuman/hexo-theme-spfk\" target=\"_blank\" rel=\"noopener\">spfk</a>,下载下来后直接复制到/nodejs-blog/themes/里面</p>\n<p><strong>6.2_config.yml中设置皮肤</strong></p>\n<p>编辑文件_config.yml，找到theme一行，改成 theme: pacman  </p>\n<p>整个Hexo搭建个人博客就结束了.当然大家还可以个性化设置自己的博客主题,以及加载更多的Hexo插件.下一篇将会讲如何将博客同时部署到github上跟coding上.敬请期待~</p>\n<p><a href=\"http://shenzhenwei.coding.me/\" target=\"_blank\" rel=\"noopener\">CodingBlog</a></p>\n<p><a href=\"http://pvphero.github.io/\">GitHubBlog</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我是一枚安卓猿,js css以及基于Nodejs的Hexo对我来说完全是个新领域.由于之前查资料查到看到一个人的博客很不错<a href=\"http://moxfive.xyz/\" target=\"_blank\" rel=\"noopener\">MOxFIVE</a>,于是就决定模仿人家的博客进行搭建自己的Hexo博客.程序员就是爱折腾.于是查了很多资料,最终实现了自己的Hexo博客.下面我就把一个完全不懂nodejs以及之前根本没听说过Hexo的人建站的历程给大家分享下.</p>\n<p>我是在Mac环境下搭建的,Win环境跟Mac的差不多,如果大家是win环境,我建议大家参看<a href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\" rel=\"noopener\">粉丝日志</a></p>",
        "more": "<h1 id=\"Hexo-介绍\"><a href=\"#Hexo-介绍\" class=\"headerlink\" title=\"Hexo 介绍\"></a>Hexo 介绍</h1><p><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> 是一个简单的,轻量级,基于Nodejs的一个静态的博客框架.我们可以很方便的使用Hexo搭建个人博客.</p>\n<p>对一个外行来说,在一开始使用Hexo的时候心理难免有很多疑问.那我来说,我刚接触Hexo的时候我一直在想:Hexo到底是什么?他是如何把网站部署到github或者conding上的?Hexo怎么进行博客内容的编辑啊?于是经过几番折腾,我对Hexo有了初步的了解.希望我的理解对大家刚刚搭建有所帮助吧.</p>\n<ul>\n<li>首先,Hexo是一个基于Nodejs的框架,我们通过Hexo里面的命令在Vim上进行hexo初始化,hexo生成index.html静态页面,然后再通过命令发布到github或者conding</li>\n<li>Hexo里面集成有git的插件,所以你发布到你的 yourname.github.io的时候只需要把_config.yml中的配置配置好.然后使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>就可以将通过Hexo编译好的文件推送到git项目中</p>\n<ul>\n<li>hexo里面的内容怎么编辑?hexo里面的文件是以md结尾的.是markdown语法.所以大家编辑的时候可以先看看<a href=\"http://www.cnblogs.com/hnrainll/p/3514637.html\" target=\"_blank\" rel=\"noopener\">markdown语法</a>.我这边是使用的mac的Mou一款免费的markdown软件.大家也可以使用phpStorm,里面在plugins中可以下载markdown的插件.建议大家下载个PHPStorm IDE,因为将来涉及到图片更换,主题更换,目录结构的查看等等,都会比较直观.</li>\n</ul>\n<h1 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h1><ol>\n<li><p>安装Node (必须) 作用是用来生成静态页面.到<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>官网上下载相应平台的最新版本,一路安装即可,没有难度…此处略过!但是一定要装啊.</p>\n</li>\n<li><p>安装Git (必须) 作用是把本地hexo内容提交到git上去,安装xcode就自带Git了,就不多说了~</p>\n</li>\n<li><p>申请<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>(想同时发布到coding上的,可以再申请个<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding账号</a>,后面会讲到)</p>\n</li>\n<li><p>配置github SSH keys(可以不配置,不配置的话就的每次提交的时候手动输入账号密码了,如果配置了就不需要了,就会很方便)<a href=\"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/\" target=\"_blank\" rel=\"noopener\">GitHub-Help-SSH配置</a></p>\n</li>\n</ol>\n<h1 id=\"Hexo的安装\"><a href=\"#Hexo的安装\" class=\"headerlink\" title=\"Hexo的安装\"></a>Hexo的安装</h1><p>系统环境</p>\n<p><strong>Mac OS</strong></p>\n<p><strong>Hexo安装,要用全局安装,加参数-g</strong></p>\n<pre><code>$ sudo npm install-g hexo  \n</code></pre><p><em>查看Hexo的版本</em></p>\n<pre><code>$ hexo version\nhexo-cli: 1.0.1\nos: Darwin 14.5.0 darwin x64\nhttp_parser: 2.5.2\nnode: 4.4.3\nv8: 4.5.103.35\nuv: 1.8.0\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2g \n</code></pre><p>或者</p>\n<pre><code>$ hexo v\nhexo-cli: 1.0.1\nos: Darwin 14.5.0 darwin x64\nhttp_parser: 2.5.2\nnode: 4.4.3\nv8: 4.5.103.35\nuv: 1.8.0\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2g \n</code></pre><p>这个时候可能会出现</p>\n<pre><code>{ [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; }\n</code></pre><p>解决方法</p>\n<pre><code>$ npm install hexo --no-optional\n</code></pre><p>参考<a href=\"http://www.baidu.com/link?url=Zhut7pph6xKKmF5ADMlGTEDpN5NmgV8vahlW1EqcN3uR7KVFojiykBccQSqcw7CwAzJX0x2bSLvKie5SDyYVMUhl29NcV6LGDLWo7CyUE3816hITneb5IAWZUfqgPVDrA69MqdDs__GS1R1VIk-xi2vqkaeJ27OIvxHtSF-eXZ3&amp;wd=&amp;eqid=ec1ccb24001e820300000004571b8f14\" target=\"_blank\" rel=\"noopener\">Hexo常见问题解决方案</a></p>\n<p><strong>安装好以后我们就可以使用Hexo创建项目了</strong></p>\n<pre><code>$ hexo init nodejs-blog\n</code></pre><p>然后我们打开Finder发现,刚刚的路径下多了一个文件夹,并且文件夹有Hexo相应的初始化模块.</p>\n<p><strong>初始化完成后进入刚刚创建的文件夹,并启动服务器,看看效果</strong></p>\n<p><em>进入刚刚创建的文件夹</em></p>\n<pre><code>$ cd nodejs-blog/\n$ ls -a\n.   .gitignore    _config.yml   package.json  source\n..  .npmignore    node_modules  scaffolds     themes\n</code></pre><p><em>启动hexo服务器查看效果</em></p>\n<pre><code>$ hexo s\nINFO  Start processing\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n</code></pre><p> 然后通过浏览器访问 <a href=\"http://0.0.0.0:4000/查看效果\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/查看效果</a></p>\n<p> <img src=\"http://img.blog.csdn.net/20160424121528685\" alt=\"img\"></p>\n<h1 id=\"Hexo-目录结构及用法\"><a href=\"#Hexo-目录结构及用法\" class=\"headerlink\" title=\"Hexo 目录结构及用法\"></a>Hexo 目录结构及用法</h1><p><strong>4.1目录结构</strong></p>\n<p><img src=\"/source/img/project_jiegou.png\" alt=\"img\" title=\"jiegou\"></p>\n<ol>\n<li><p>scaffolds 脚手架，也就是一个工具模板</p>\n</li>\n<li><p>source 存放博客正文内容 比如说我们新建一个page 那么改page就会出现在这个文件中,我们如果想对原先的博客进行修改的话,就打开这个文件夹下相应的文件进行编辑.如果是想删除的话,那就直接删除该文件夹下相应的文件</p>\n</li>\n<li><p>themes 存放皮肤的目录 用户可以根据自己的喜好更换_config.yml中的themes</p>\n</li>\n<li><p>_config.yml全局的配置文件</p>\n</li>\n<li><p>db.json 静态常量</p>\n</li>\n</ol>\n<p><strong>4.2全局变量_config.yml的配置</strong></p>\n<ul>\n<li>站点信息: 定义标题，作者，语言</li>\n<li>URL: URL访问路径</li>\n<li>文件目录: 正文的存储目录</li>\n<li>写博客配置：文章标题，文章类型，外部链接等</li>\n<li>目录和标签：默认分类，分类图，标签图</li>\n<li>归档设置：归档的类型</li>\n<li>服务器设置：IP，访问端口，日志输出</li>\n<li>时间和日期格式： 时间显示格式，日期显示格式</li>\n<li>分页设置：每页显示数量</li>\n<li>评论：外挂的Disqus评论系统</li>\n<li>插件和皮肤：换皮肤，安装插件</li>\n<li>Markdown语言：markdown的标准</li>\n<li>CSS的stylus格式：是否允许压缩</li>\n<li>部署配置：github发布</li>\n</ul>\n<p>编辑_config.yml文件</p>\n<pre><code>$ vim _config.yml \n</code></pre><p><strong>4.3创建新的文章</strong></p>\n<pre><code>$ hexo new 我的第一篇Hexo博客\n</code></pre><p>启动服务器</p>\n<p><img src=\"http://img.blog.csdn.net/20160424121706439\" alt=\"img\"></p>\n<p><strong>4.4文章语法</strong></p>\n<p><a href=\"http://www.cnblogs.com/hnrainll/p/3514637.html\" target=\"_blank\" rel=\"noopener\">Markdown语法</a></p>\n<p><a href=\"https://www.zhihu.com/question/20409634\" target=\"_blank\" rel=\"noopener\">怎样引导新手使用 Markdown？</a></p>\n<pre><code>实例:\ntitle: 新的开始\ndate: 2014-05-07 18:44:12\npermalink: abc\ntags:\n- 开始\n- 我\n- 日记\ncategories:\n- 日志\n- 第一天\n---\n\n这是**新的开始**，我用hexo创建了第一篇文章。\n\n通过下面的命令，就可以创建新文章\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new 我的第一篇Hexo博客</span><br></pre></td></tr></table></figure>\n\n感觉非常好。\n</code></pre><h1 id=\"发布到Github上\"><a href=\"#发布到Github上\" class=\"headerlink\" title=\"发布到Github上\"></a>发布到Github上</h1><p><strong>5.1生成静态的index.thml文件</strong></p>\n<pre><code>$ hexo g\n</code></pre><p><strong>5.2创建githb pages</strong></p>\n<p>在Github上创建一个项目 username.github.io  比如我的用户名是pvphero 那么我创建的项目的名字就是pvphero.github.io <a href=\"https://github.com/pvphero/pvphero.github.io\" target=\"_blank\" rel=\"noopener\">pvphero’s GitHub</a></p>\n<p>参考<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHubPages</a></p>\n<p>然后可能有人觉得访问github过慢,有什么好的解决方法么?</p>\n<p>github访问慢的原因是因为CDN: github.global.ssl.fastly.net,被墙了<br><img src=\"http://img.blog.csdn.net/20160424121935833\" alt=\"这里写图片描述\"></p>\n<p>解决方法</p>\n<ul>\n<li>我这边的的解决方法是更改github的hosts<a href=\"http://pan.baidu.com/s/1c1VePTe\" target=\"_blank\" rel=\"noopener\">快速更改MacHosts</a><br><img src=\"http://img.blog.csdn.net/20160424122438761\" alt=\"这里写图片描述\"></li>\n<li>然后访问<a href=\"http://www.ipaddress.com/\" target=\"_blank\" rel=\"noopener\">IPAddress.com</a>根据域名找到本来的IP<br><img src=\"http://img.blog.csdn.net/20160424122631064\" alt=\"这里写图片描述\"></li>\n<li>更改Mac的hosts<br><img src=\"http://img.blog.csdn.net/20160424122726718\" alt=\"这里写图片描述\"><br><strong>5.3发布到github上</strong></li>\n</ul>\n<p>编辑全局配置文件_config.yml，找到deploy的部分，设置github的项目地址</p>\n<pre><code>deploy:\ntype: git\nrepo:\n  github:git@github.com:pvpheropvphero.github.io.git,master\n</code></pre><p>接下来使用hexo命令部署</p>\n<pre><code>$ hexo d\n</code></pre><p> 如果出现</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123; [Error: Cannot find module <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>这样的错误</p>\n<p>输入命令行</p>\n<pre><code>$ npm install hexo --no-optional\n</code></pre><p><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">Hexo常见问题解决方案</a></p>\n<p>这样自己的博客就部署到github上了.可以通过  username.github.io查看最后的效果</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><p><strong>6.1找一个皮肤</strong></p>\n<p>比如我用的皮肤是<a href=\"https://github.com/luuman/hexo-theme-spfk\" target=\"_blank\" rel=\"noopener\">spfk</a>,下载下来后直接复制到/nodejs-blog/themes/里面</p>\n<p><strong>6.2_config.yml中设置皮肤</strong></p>\n<p>编辑文件_config.yml，找到theme一行，改成 theme: pacman  </p>\n<p>整个Hexo搭建个人博客就结束了.当然大家还可以个性化设置自己的博客主题,以及加载更多的Hexo插件.下一篇将会讲如何将博客同时部署到github上跟coding上.敬请期待~</p>\n<p><a href=\"http://shenzhenwei.coding.me/\" target=\"_blank\" rel=\"noopener\">CodingBlog</a></p>\n<p><a href=\"http://pvphero.github.io/\">GitHubBlog</a></p>"
      },
      {
        "title": "Hello World",
        "_content": "Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n",
        "source": "_posts/hello-world.md",
        "raw": "---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n",
        "slug": "hello-world",
        "published": 1,
        "date": "2020-05-19T02:32:04.681Z",
        "updated": "2020-05-19T02:32:04.682Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ckadizj2t000x52j9y21pp4es",
        "content": "<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n",
        "site": {
          "data": {}
        },
        "excerpt": "<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>",
        "more": "<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"
      }
    ],
    "PostAsset": [],
    "PostCategory": [
      {
        "post_id": "ckadizj13000052j98srce5wi",
        "category_id": "ckadizj2f000i52j91lk4gx8a",
        "_id": "ckadizj3w002352j9frn4fq8u"
      },
      {
        "post_id": "ckadizj18000252j9smo2h9d8",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3w002552j9vnlb6ma6"
      },
      {
        "post_id": "ckadizj19000352j9x3tdqdia",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3x002752j9ezvtf342"
      },
      {
        "post_id": "ckadizj1a000452j90htmmb85",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3x002a52j90xaywsyh"
      },
      {
        "post_id": "ckadizj1b000552j9wgjbg25s",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3x002c52j9lq49v4kf"
      },
      {
        "post_id": "ckadizj1c000652j9me7yt70m",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3y002f52j9wgfippru"
      },
      {
        "post_id": "ckadizj1d000752j990wy9pze",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3y002h52j9rzboccq0"
      },
      {
        "post_id": "ckadizj1d000852j9rdmkwgt9",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3y002k52j9qq3s062g"
      },
      {
        "post_id": "ckadizj1e000952j97mw1px63",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj3z002m52j998j9w1v6"
      },
      {
        "post_id": "ckadizj1g000a52j96xhz0hik",
        "category_id": "ckadizj2x001852j9x2y4qen9",
        "_id": "ckadizj3z002p52j9il6xvbew"
      },
      {
        "post_id": "ckadizj1g000b52j9y4wvb0wv",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj40002r52j9f4midsce"
      },
      {
        "post_id": "ckadizj1h000c52j9whecyxya",
        "category_id": "ckadizj2z001c52j9rc610gc1",
        "_id": "ckadizj40002u52j91czqpupl"
      },
      {
        "post_id": "ckadizj1i000d52j94h9z1l33",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj41002w52j9g1o33zri"
      },
      {
        "post_id": "ckadizj1j000e52j9mi8pu5io",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj41002y52j9q0dgv43a"
      },
      {
        "post_id": "ckadizj1k000f52j9j6e6sslq",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj41003152j9f9ik07wv"
      },
      {
        "post_id": "ckadizj1k000g52j9zvwsa8vq",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj41003352j91g5sq1hv"
      },
      {
        "post_id": "ckadizj2e000h52j97p3roixv",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj41003552j9nvigiwpf"
      },
      {
        "post_id": "ckadizj2n000o52j914b18mmy",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj42003752j9tz6posx2"
      },
      {
        "post_id": "ckadizj2n000p52j9oqjn5f49",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj42003952j9drmgnvdw"
      },
      {
        "post_id": "ckadizj2q000s52j9mgijikcv",
        "category_id": "ckadizj2m000m52j94x5y4cg4",
        "_id": "ckadizj42003b52j9hdcezz15"
      },
      {
        "post_id": "ckadizj2s000w52j9nugrcbz7",
        "category_id": "ckadizj3w002252j9ta203x7n",
        "_id": "ckadizj4f003s52j9aoek2sfi"
      }
    ],
    "PostTag": [
      {
        "post_id": "ckadizj13000052j98srce5wi",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj3w002052j91isaz1x8"
      },
      {
        "post_id": "ckadizj13000052j98srce5wi",
        "tag_id": "ckadizj2m000n52j9n93i3qua",
        "_id": "ckadizj3w002452j9jln5v7xj"
      },
      {
        "post_id": "ckadizj17000152j99n66tlzc",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj3x002652j9s1jrcjog"
      },
      {
        "post_id": "ckadizj17000152j99n66tlzc",
        "tag_id": "ckadizj2s000v52j90hkee15b",
        "_id": "ckadizj3x002952j9r2kforbq"
      },
      {
        "post_id": "ckadizj18000252j9smo2h9d8",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj3x002b52j923goxm30"
      },
      {
        "post_id": "ckadizj18000252j9smo2h9d8",
        "tag_id": "ckadizj2v001152j9ta3nfp6k",
        "_id": "ckadizj3y002e52j9298r501d"
      },
      {
        "post_id": "ckadizj18000252j9smo2h9d8",
        "tag_id": "ckadizj2w001352j9wgsobc5k",
        "_id": "ckadizj3y002g52j9099spufk"
      },
      {
        "post_id": "ckadizj19000352j9x3tdqdia",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj3y002j52j9dwwv29ew"
      },
      {
        "post_id": "ckadizj19000352j9x3tdqdia",
        "tag_id": "ckadizj2x001752j9omb6x1s2",
        "_id": "ckadizj3z002l52j9o2stzcsj"
      },
      {
        "post_id": "ckadizj1a000452j90htmmb85",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj3z002n52j9x9vp1z2c"
      },
      {
        "post_id": "ckadizj1a000452j90htmmb85",
        "tag_id": "ckadizj2y001b52j9d69dc36c",
        "_id": "ckadizj40002q52j98yw9l2bd"
      },
      {
        "post_id": "ckadizj1b000552j9wgjbg25s",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj40002s52j943qdpv5u"
      },
      {
        "post_id": "ckadizj1b000552j9wgjbg25s",
        "tag_id": "ckadizj30001f52j98svrx3hl",
        "_id": "ckadizj40002v52j9xx93fhzr"
      },
      {
        "post_id": "ckadizj1c000652j9me7yt70m",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj41002x52j9alv89san"
      },
      {
        "post_id": "ckadizj1d000752j990wy9pze",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj41003052j9b7q6f0yw"
      },
      {
        "post_id": "ckadizj1d000852j9rdmkwgt9",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj41003252j91c321p21"
      },
      {
        "post_id": "ckadizj1d000852j9rdmkwgt9",
        "tag_id": "ckadizj32001m52j9xhyc5eb5",
        "_id": "ckadizj41003452j98hg8sb5h"
      },
      {
        "post_id": "ckadizj1e000952j97mw1px63",
        "tag_id": "ckadizj32001n52j9xd43gkog",
        "_id": "ckadizj42003652j9jvwq3655"
      },
      {
        "post_id": "ckadizj1g000a52j96xhz0hik",
        "tag_id": "ckadizj33001o52j9wdalxyfp",
        "_id": "ckadizj42003852j9o69c0ci3"
      },
      {
        "post_id": "ckadizj1g000a52j96xhz0hik",
        "tag_id": "ckadizj33001p52j9fsqwjrfl",
        "_id": "ckadizj42003a52j94j1uohs0"
      },
      {
        "post_id": "ckadizj1g000b52j9y4wvb0wv",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj42003c52j9uspipmql"
      },
      {
        "post_id": "ckadizj1g000b52j9y4wvb0wv",
        "tag_id": "ckadizj32001m52j9xhyc5eb5",
        "_id": "ckadizj42003d52j921xy8k4x"
      },
      {
        "post_id": "ckadizj1h000c52j9whecyxya",
        "tag_id": "ckadizj34001s52j9ae3m2ple",
        "_id": "ckadizj42003e52j9ho9le4ez"
      },
      {
        "post_id": "ckadizj1i000d52j94h9z1l33",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj42003f52j9oz2sq6al"
      },
      {
        "post_id": "ckadizj1i000d52j94h9z1l33",
        "tag_id": "ckadizj2m000n52j9n93i3qua",
        "_id": "ckadizj42003g52j9pgc9z4ho"
      },
      {
        "post_id": "ckadizj1j000e52j9mi8pu5io",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj43003h52j9fj0p8ssd"
      },
      {
        "post_id": "ckadizj1j000e52j9mi8pu5io",
        "tag_id": "ckadizj36001w52j9hea4y0tp",
        "_id": "ckadizj43003i52j9saz0ebqg"
      },
      {
        "post_id": "ckadizj1j000e52j9mi8pu5io",
        "tag_id": "ckadizj36001x52j9qv95033s",
        "_id": "ckadizj43003j52j9343r1k1q"
      },
      {
        "post_id": "ckadizj1k000f52j9j6e6sslq",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj43003k52j9xh569zf8"
      },
      {
        "post_id": "ckadizj1k000g52j9zvwsa8vq",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj43003l52j90zaoeq56"
      },
      {
        "post_id": "ckadizj2e000h52j97p3roixv",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj43003m52j96yh2zuqv"
      },
      {
        "post_id": "ckadizj2m000l52j9ijghuljh",
        "tag_id": "ckadizj34001s52j9ae3m2ple",
        "_id": "ckadizj43003n52j9pdigvodq"
      },
      {
        "post_id": "ckadizj2n000p52j9oqjn5f49",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj43003o52j9v2yic7ue"
      },
      {
        "post_id": "ckadizj2n000p52j9oqjn5f49",
        "tag_id": "ckadizj2w001352j9wgsobc5k",
        "_id": "ckadizj43003p52j99jqf5j2b"
      },
      {
        "post_id": "ckadizj2q000s52j9mgijikcv",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj43003q52j9yyp87d7o"
      },
      {
        "post_id": "ckadizj2n000o52j914b18mmy",
        "tag_id": "ckadizj2k000j52j9cdxzly61",
        "_id": "ckadizj4f003r52j9hx5err1x"
      },
      {
        "post_id": "ckadizj2n000o52j914b18mmy",
        "tag_id": "ckadizj3w002152j9ob7frt3x",
        "_id": "ckadizj4f003t52j9qi7mcqsj"
      },
      {
        "post_id": "ckadizj2r000t52j982hz76xu",
        "tag_id": "ckadizj3x002852j9d98bscvp",
        "_id": "ckadizj4g003u52j96ywxul0i"
      },
      {
        "post_id": "ckadizj2r000t52j982hz76xu",
        "tag_id": "ckadizj3y002d52j92cnu7lzg",
        "_id": "ckadizj4g003v52j9uaxn1di2"
      },
      {
        "post_id": "ckadizj2r000t52j982hz76xu",
        "tag_id": "ckadizj3y002i52j9d92tj8w3",
        "_id": "ckadizj4g003w52j93yzd3mm2"
      },
      {
        "post_id": "ckadizj2s000w52j9nugrcbz7",
        "tag_id": "ckadizj3x002852j9d98bscvp",
        "_id": "ckadizj4g003x52j9dk92kjv9"
      },
      {
        "post_id": "ckadizj2s000w52j9nugrcbz7",
        "tag_id": "ckadizj40002t52j95hin2cee",
        "_id": "ckadizj4g003y52j93x5hd96f"
      },
      {
        "post_id": "ckadizj2s000w52j9nugrcbz7",
        "tag_id": "ckadizj33001p52j9fsqwjrfl",
        "_id": "ckadizj4h003z52j9m47pm9nb"
      },
      {
        "post_id": "ckadizj2s000w52j9nugrcbz7",
        "tag_id": "ckadizj41002z52j9coeqw7xo",
        "_id": "ckadizj4h004052j9emxnpd2a"
      }
    ],
    "Tag": [
      {
        "name": "Android",
        "_id": "ckadizj2k000j52j9cdxzly61"
      },
      {
        "name": "fragment",
        "_id": "ckadizj2m000n52j9n93i3qua"
      },
      {
        "name": "Interview",
        "_id": "ckadizj2s000v52j90hkee15b"
      },
      {
        "name": "性能优化",
        "_id": "ckadizj2v001152j9ta3nfp6k"
      },
      {
        "name": "ListView",
        "_id": "ckadizj2w001352j9wgsobc5k"
      },
      {
        "name": "Debug",
        "_id": "ckadizj2x001752j9omb6x1s2"
      },
      {
        "name": "UI",
        "_id": "ckadizj2y001b52j9d69dc36c"
      },
      {
        "name": "自定义控件",
        "_id": "ckadizj30001f52j98svrx3hl"
      },
      {
        "name": "NDK",
        "_id": "ckadizj32001m52j9xhyc5eb5"
      },
      {
        "name": "Android UnitTest",
        "_id": "ckadizj32001n52j9xd43gkog"
      },
      {
        "name": "Android Studio",
        "_id": "ckadizj33001o52j9wdalxyfp"
      },
      {
        "name": "Git",
        "_id": "ckadizj33001p52j9fsqwjrfl"
      },
      {
        "name": "Java",
        "_id": "ckadizj34001s52j9ae3m2ple"
      },
      {
        "name": "Intent",
        "_id": "ckadizj36001w52j9hea4y0tp"
      },
      {
        "name": "setFlags",
        "_id": "ckadizj36001x52j9qv95033s"
      },
      {
        "name": "Bitmap",
        "_id": "ckadizj3w002152j9ob7frt3x"
      },
      {
        "name": "Hexo",
        "_id": "ckadizj3x002852j9d98bscvp"
      },
      {
        "name": "GitHub",
        "_id": "ckadizj3y002d52j92cnu7lzg"
      },
      {
        "name": "Coding",
        "_id": "ckadizj3y002i52j9d92tj8w3"
      },
      {
        "name": "Mac",
        "_id": "ckadizj40002t52j95hin2cee"
      },
      {
        "name": "Blog",
        "_id": "ckadizj41002z52j9coeqw7xo"
      }
    ]
  }
}